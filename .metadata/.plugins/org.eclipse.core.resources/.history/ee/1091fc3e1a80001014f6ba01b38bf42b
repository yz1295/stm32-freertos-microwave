/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include <stdio.h>
#include "main.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd.h"
#include "stm32f4xx_hal.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
// --------- LCD test routines ---------
#include "lcd.h"
#include "gui.h"
#include "font.h"

static void run_lcd_hello(void) {
    LCD_Clear(BLACK);
    // a few pixels and a rect so we know drawing works
    LCD_DrawPixel(5,5, WHITE);
    LCD_FillRect(20, 30, 40, 30, MAGENTA);
}

void run_lcd_probe(void) {
    // draws a border and crosshair to verify windowing & rotation
    uint16_t w = LCD_Width(), h = LCD_Height();

    LCD_Clear(0x2104);                 // dark blue/gray
    LCD_DrawFastHLine(0, 0, w, GREEN);
    LCD_DrawFastHLine(0, h-1, w, RED);
    LCD_DrawFastVLine(0, 0, h, YELLOW);
    LCD_DrawFastVLine(w-1, 0, h, BLUE);

    // crosshair
    LCD_DrawFastVLine(w/2, 0, h, WHITE);
    LCD_DrawFastHLine(0, h/2, w, WHITE);

    // filled block bottom‑right
    LCD_FillRect(w-70, h-50, 60, 40, MAGENTA);
}

void run_text_ascii(void) {
    LCD_Clear(BLACK);
    LCD_FillRect(0, 0, LCD_Width(), 16, 0x4208);   // header bar
    LCD_DrawFastHLine(0, 16, LCD_Width(), WHITE);

    POINT_COLOR = WHITE; BACK_COLOR = BLACK;
    LCD_ShowString(4, 24, 12, (uint8_t*)"Hello, ST7735!", 0);
    LCD_ShowString(4, 40, 16, (uint8_t*)"Width:", 0);
    LCD_ShowNum(4+6*8, 40, LCD_Width(), 3, 16);
    LCD_ShowString(4, 58, 16, (uint8_t*)"Height:", 0);
    LCD_ShowNum(4+7*8, 58, LCD_Height(), 3, 16);

    LCD_DrawRectangle(2, 20, LCD_Width()-3, LCD_Height()-3);
    LCD_DrawFillRectangle(LCD_Width()-64-8, LCD_Height()-32-8,
                          LCD_Width()-8,     LCD_Height()-8);
}

void run_text_cn(void) {
    // requires GB16/24/32 tables in your font.c
    LCD_Clear(BLACK);
    POINT_COLOR = YELLOW; BACK_COLOR = BLACK;
    GUI_DrawFont16(4, 24, YELLOW,  BLACK, (uint8_t*)"中文", 0);
    GUI_DrawFont24(4, 50, CYAN,    BLACK, (uint8_t*)"测 试", 0);
    GUI_DrawFont32(4, 80, MAGENTA, BLACK, (uint8_t*)"字体", 0);
    Show_Str(4, 120, WHITE, BLACK, (uint8_t*)"Hello 中文!", 16, 0);
}

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  // --- test LCD BSP ---

  printf("Hello from STM32F407!\r\n");
  printf("System running at %lu Hz\r\n", HAL_RCC_GetSysClockFreq());




   LCD_Init();
   /*LCD_SetRotation(1);          // try 0..3 if orientation is off

   LCD_Clear(BLUE);
   LCD_FillRect(10, 10, 60, 40, RED);
   LCD_DrawPixel(5, 5, WHITE);*/

   //run_lcd_hello();
   // LCD_SetRotation(0); // try 0..3 if you want to check all four

   // LCD_SetRotation(1); // try 0..3
   run_lcd_probe();
   HAL_Delay(1000);
   run_text_ascii();
   HAL_Delay(2000);
   run_text_cn();   // if Chinese font tables are compiled






  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 64;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
