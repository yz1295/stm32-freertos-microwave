#include <string.h>
#include <stdint.h>
#include "lcd.h"
#include "font.h"
#include "gui.h"

/* ========= Primitives ========= */

void GUI_DrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
    LCD_SetCursor(x, y);
    Lcd_WriteData_16Bit(color);
}

void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
    uint16_t w = (ex >= sx) ? (ex - sx + 1) : 0;
    uint16_t h = (ey >= sy) ? (ey - sy + 1) : 0;

    if (w == 0 || h == 0) return;

    LCD_SetWindows(sx, sy, ex, ey);
    for (uint32_t i = 0; i < (uint32_t)w * h; i++) {
        Lcd_WriteData_16Bit(color);
    }
    LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
}

void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    int16_t dx = (int16_t)x2 - (int16_t)x1;
    int16_t dy = (int16_t)y2 - (int16_t)y1;
    int16_t sx = (dx >= 0) ? 1 : -1;
    int16_t sy = (dy >= 0) ? 1 : -1;
    dx = (dx >= 0) ? dx : -dx;
    dy = (dy >= 0) ? dy : -dy;

    int16_t err = (dx > dy ? dx : -dy) / 2;
    int16_t x = x1, y = y1;

    for(;;) {
        LCD_DrawPoint(x, y);
        if (x == x2 && y == y2) break;
        int16_t e2 = err;
        if (e2 > -dx) { err -= dy; x += sx; }
        if (e2 <  dy) { err += dx; y += sy; }
    }
}

void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    LCD_DrawLine(x1,y1,x2,y1);
    LCD_DrawLine(x1,y1,x1,y2);
    LCD_DrawLine(x1,y2,x2,y2);
    LCD_DrawLine(x2,y1,x2,y2);
}

void LCD_DrawFillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    LCD_Fill(x1,y1,x2,y2,POINT_COLOR);
}

/* ========= Circles / Triangles ========= */

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
    GUI_DrawPoint(xc + x, yc + y, c);
    GUI_DrawPoint(xc - x, yc + y, c);
    GUI_DrawPoint(xc + x, yc - y, c);
    GUI_DrawPoint(xc - x, yc - y, c);
    GUI_DrawPoint(xc + y, yc + x, c);
    GUI_DrawPoint(xc - y, yc + x, c);
    GUI_DrawPoint(xc + y, yc - x, c);
    GUI_DrawPoint(xc - y, yc - x, c);
}

void gui_circle(int xc, int yc, uint16_t c, int r, int fill)
{
    int x = 0, y = r;
    int d = 3 - 2 * r;

    if (fill) {
        while (x <= y) {
            for (int yi = x; yi <= y; yi++) _draw_circle_8(xc, yc, x, yi, c);
            if (d < 0) d += 4 * x + 6;
            else { d += 4 * (x - y) + 10; y--; }
            x++;
        }
    } else {
        while (x <= y) {
            _draw_circle_8(xc, yc, x, y, c);
            if (d < 0) d += 4 * x + 6;
            else { d += 4 * (x - y) + 10; y--; }
            x++;
        }
    }
}

/* header asks for Draw_Circle()â€”provide a hollow wrapper */
void Draw_Circle(uint16_t x0, uint16_t y0, uint16_t fc, uint8_t r)
{
    uint16_t old = POINT_COLOR;
    POINT_COLOR = fc;
    gui_circle(x0, y0, fc, r, 0);
    POINT_COLOR = old;
}

void Draw_Triangel(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
    LCD_DrawLine(x0,y0,x1,y1);
    LCD_DrawLine(x1,y1,x2,y2);
    LCD_DrawLine(x2,y2,x0,y0);
}

static void _swap_u16(uint16_t *a, uint16_t *b)
{
    uint16_t t = *a; *a = *b; *b = t;
}

void Fill_Triangel(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
    int dx01 = x1 - x0, dy01 = y1 - y0;
    int dx02 = x2 - x0, dy02 = y2 - y0;
    int dx12 = x2 - x1, dy12 = y2 - y1;
    uint16_t a, b, y, last;
    long sa = 0, sb = 0;

    if (y0 > y1) { _swap_u16(&y0,&y1); _swap_u16(&x0,&x1); }
    if (y1 > y2) { _swap_u16(&y2,&y1); _swap_u16(&x2,&x1); }
    if (y0 > y1) { _swap_u16(&y0,&y1); _swap_u16(&x0,&x1); }

    if (y0 == y2) {
        a = b = x0;
        if (x1 < a) a = x1; else if (x1 > b) b = x1;
        if (x2 < a) a = x2; else if (x2 > b) b = x2;
        LCD_Fill(a, y0, b, y0, POINT_COLOR);
        return;
    }

    if (y1 == y2) last = y1;
    else last = y1 - 1;

    for (y = y0; y <= last; y++) {
        a = x0 + sa / (dy01 ? dy01 : 1);
        b = x0 + sb / (dy02 ? dy02 : 1);
        sa += dx01; sb += dx02;
        if (a > b) _swap_u16(&a,&b);
        LCD_Fill(a, y, b, y, POINT_COLOR);
    }

    sa = (long)dx12 * (long)(y - y1);
    sb = (long)dx02 * (long)(y - y0);
    for (; y <= y2; y++) {
        a = x1 + sa / (dy12 ? dy12 : 1);
        b = x0 + sb / (dy02 ? dy02 : 1);
        sa += dx12; sb += dx02;
        if (a > b) _swap_u16(&a,&b);
        LCD_Fill(a, y, b, y, POINT_COLOR);
    }
}

/* ========= Text ========= */

static uint32_t mypow10(uint8_t n)
{
    uint32_t r = 1;
    while (n--) r *= 10U;
    return r;
}

void LCD_ShowChar(uint16_t x,uint16_t y,uint16_t fc, uint16_t bc, uint8_t num,uint8_t size,uint8_t mode)
{
    uint8_t pos, t, temp;
    uint16_t keep = POINT_COLOR;
    num -= ' ';

    LCD_SetWindows(x, y, x + size/2 - 1, y + size - 1);

    if (!mode) {
        for (pos = 0; pos < size; pos++) {
            temp = (size == 12) ? asc2_1206[num][pos] : asc2_1608[num][pos];
            for (t = 0; t < size/2; t++) {
                Lcd_WriteData_16Bit( (temp & 0x01) ? fc : bc );
                temp >>= 1;
            }
        }
    } else {
        for (pos = 0; pos < size; pos++) {
            temp = (size == 12) ? asc2_1206[num][pos] : asc2_1608[num][pos];
            for (t = 0; t < size/2; t++) {
                POINT_COLOR = fc;
                if (temp & 0x01) LCD_DrawPoint(x + t, y + pos);
                temp >>= 1;
            }
        }
    }
    POINT_COLOR = keep;
    LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
}

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size,uint8_t *p,uint8_t mode)
{
    while ((*p >= ' ') && (*p <= '~')) {
        if (x > (lcddev.width - 1) || y > (lcddev.height - 1)) return;
        LCD_ShowChar(x, y, POINT_COLOR, BACK_COLOR, *p, size, mode);
        x += size / 2;
        p++;
    }
}

void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
    uint8_t t, temp;
    uint8_t shown = 0;
    for (t = 0; t < len; t++) {
        temp = (num / mypow10(len - t - 1)) % 10U;
        if (!shown && t < (len - 1)) {
            if (temp == 0) {
                LCD_ShowChar(x + (size/2)*t, y, POINT_COLOR, BACK_COLOR, ' ', size, 0);
                continue;
            } else {
                shown = 1;
            }
        }
        LCD_ShowChar(x + (size/2)*t, y, POINT_COLOR, BACK_COLOR, (uint8_t)(temp + '0'), size, 0);
    }
}

void LCD_Show2Num(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint8_t size,uint8_t mode)
{
    /* Print with leading zeros, length 'len' */
    for (int i = len - 1; i >= 0; --i) {
        uint8_t digit = (num / mypow10(i)) % 10U;
        LCD_ShowChar(x + (len - 1 - i) * (size/2), y, POINT_COLOR, BACK_COLOR, (uint8_t)('0' + digit), size, mode);
    }
}

/* ========= Chinese fonts (require font tables) ========= */

void GUI_DrawFont16(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
    //uint16_t HZnum = sizeof(tfont16)/sizeof(typFNT_GB16);
	uint16_t HZnum = tfont16_count;
    uint16_t x0 = x;
    for (uint16_t k = 0; k < HZnum; k++) {
        if (tfont16[k].Index[0]==*(s) && tfont16[k].Index[1]==*(s+1)) {
            LCD_SetWindows(x,y,x+16-1,y+16-1);
            for (uint16_t i=0;i<16*2;i++) {
                for (uint8_t j=0;j<8;j++) {
                    if (!mode) {
                        Lcd_WriteData_16Bit((tfont16[k].Msk[i] & (0x80>>j)) ? fc : bc);
                    } else {
                        POINT_COLOR = fc;
                        if (tfont16[k].Msk[i] & (0x80>>j)) LCD_DrawPoint(x,y);
                        x++;
                        if ((x - x0) == 16) { x = x0; y++; break; }
                    }
                }
            }
            break;
        }
    }
    LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
}

void GUI_DrawFont24(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
    //uint16_t HZnum = sizeof(tfont24)/sizeof(typFNT_GB24);
	uint16_t HZnum = tfont24_count;
    uint16_t x0 = x;
    for (uint16_t k = 0; k < HZnum; k++) {
        if (tfont24[k].Index[0]==*(s) && tfont24[k].Index[1]==*(s+1)) {
            LCD_SetWindows(x,y,x+24-1,y+24-1);
            for (uint16_t i=0;i<24*3;i++) {
                for (uint8_t j=0;j<8;j++) {
                    if (!mode) {
                        Lcd_WriteData_16Bit((tfont24[k].Msk[i] & (0x80>>j)) ? fc : bc);
                    } else {
                        POINT_COLOR = fc;
                        if (tfont24[k].Msk[i] & (0x80>>j)) LCD_DrawPoint(x,y);
                        x++;
                        if ((x - x0) == 24) { x = x0; y++; break; }
                    }
                }
            }
            break;
        }
    }
    LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
}

void GUI_DrawFont32(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
    //uint16_t HZnum = sizeof(tfont32)/sizeof(typFNT_GB32);
	uint16_t HZnum = tfont32_count;
    uint16_t x0 = x;
    for (uint16_t k = 0; k < HZnum; k++) {
        if (tfont32[k].Index[0]==*(s) && tfont32[k].Index[1]==*(s+1)) {
            LCD_SetWindows(x,y,x+32-1,y+32-1);
            for (uint16_t i=0;i<32*4;i++) {
                for (uint8_t j=0;j<8;j++) {
                    if (!mode) {
                        Lcd_WriteData_16Bit((tfont32[k].Msk[i] & (0x80>>j)) ? fc : bc);
                    } else {
                        POINT_COLOR = fc;
                        if (tfont32[k].Msk[i] & (0x80>>j)) LCD_DrawPoint(x,y);
                        x++;
                        if ((x - x0) == 32) { x = x0; y++; break; }
                    }
                }
            }
            break;
        }
    }
    LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
}

/* ========= Mixed strings (ASCII + Chinese) ========= */

void Show_Str(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str,uint8_t size,uint8_t mode)
{
    uint16_t x0 = x;
    while (*str != 0) {
        if (*str > 0x80) { // Chinese (2 bytes)
            if (x > (lcddev.width - size) || y > (lcddev.height - size)) return;
            if (size == 32)      GUI_DrawFont32(x,y,fc,bc,str,mode);
            else if (size == 24) GUI_DrawFont24(x,y,fc,bc,str,mode);
            else                 GUI_DrawFont16(x,y,fc,bc,str,mode);
            str += 2;
            x += size;
        } else {
            if (x > (lcddev.width - size/2) || y > (lcddev.height - size)) return;
            if (*str == '\r') { y += size; x = x0; str++; continue; }
            if (size > 16) { LCD_ShowChar(x,y,fc,bc,*str,16,mode); x += 8; }
            else           { LCD_ShowChar(x,y,fc,bc,*str,size,mode); x += size/2; }
            str++;
        }
    }
}

void Gui_StrCenter(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str,uint8_t size,uint8_t mode)
{
    uint16_t len = (uint16_t)strlen((const char*)str);
    uint16_t x1  = (lcddev.width - len * 8U) / 2U;
    Show_Str(x1, y, fc, bc, str, size, mode);
}

/* ========= Bitmap demo (40x40, RGB565 little-endian in array) ========= */

void Gui_Drawbmp16(uint16_t x,uint16_t y,const unsigned char *p)
{
    LCD_SetWindows(x, y, x+40-1, y+40-1);
    for (int i = 0; i < 40*40; i++) {
        uint8_t  lo = *(p + i*2);
        uint8_t  hi = *(p + i*2 + 1);
        uint16_t c  = ((uint16_t)hi << 8) | lo;
        Lcd_WriteData_16Bit(c);
    }
    LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
}
