
stm32Microwave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007eb0  08007eb0  00008eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f88  08007f88  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f8c  08007f8c  00008f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007f90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          0000863c  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200086a8  200086a8  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c45d  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043ff  00000000  00000000  000254f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  000298f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001225  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006221  00000000  00000000  0002c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce0b  00000000  00000000  000324d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9918  00000000  00000000  0004f2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128bf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068c4  00000000  00000000  00128c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e98 	.word	0x08007e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007e98 	.word	0x08007e98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_DMA_Init+0x3c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <MX_DMA_Init+0x3c>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_DMA_Init+0x3c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 4, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2104      	movs	r1, #4
 80005c2:	2010      	movs	r0, #16
 80005c4:	f000 ff48 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 ff61 	bl	8001490 <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800

080005dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <MX_FREERTOS_Init+0x18>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <MX_FREERTOS_Init+0x1c>)
 80005e6:	f003 fef9 	bl	80043dc <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a03      	ldr	r2, [pc, #12]	@ (80005fc <MX_FREERTOS_Init+0x20>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08007f08 	.word	0x08007f08
 80005f8:	08000601 	.word	0x08000601
 80005fc:	20000088 	.word	0x20000088

08000600 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f003 ff79 	bl	8004500 <osDelay>
 800060e:	e7fb      	b.n	8000608 <StartDefaultTask+0x8>

08000610 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <MX_GPIO_Init+0xbc>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <MX_GPIO_Init+0xbc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <MX_GPIO_Init+0xbc>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_GPIO_Init+0xbc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000666:	f001 fc39 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800066a:	f241 0302 	movw	r3, #4098	@ 0x1002
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4813      	ldr	r0, [pc, #76]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000682:	f001 fa8f 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8000686:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 80006a0:	f001 fa80 	bl	8001ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2106      	movs	r1, #6
 80006a8:	2007      	movs	r0, #7
 80006aa:	f000 fed5 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006ae:	2007      	movs	r0, #7
 80006b0:	f000 feee 	bl	8001490 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2107      	movs	r1, #7
 80006b8:	2028      	movs	r0, #40	@ 0x28
 80006ba:	f000 fecd 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006be:	2028      	movs	r0, #40	@ 0x28
 80006c0:	f000 fee6 	bl	8001490 <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400

080006d4 <LED_EnableGPIOClock>:

#include "led.h"

/* Enable the GPIO clock for the given port pointer */
static void LED_EnableGPIOClock(GPIO_TypeDef *port)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b08d      	sub	sp, #52	@ 0x34
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    if (port == GPIOA)      { __HAL_RCC_GPIOA_CLK_ENABLE(); }
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a57      	ldr	r2, [pc, #348]	@ (800083c <LED_EnableGPIOClock+0x168>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10e      	bne.n	8000702 <LED_EnableGPIOClock+0x2e>
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006e8:	4b55      	ldr	r3, [pc, #340]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a54      	ldr	r2, [pc, #336]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b52      	ldr	r3, [pc, #328]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    else if (port == GPIOH) { __HAL_RCC_GPIOH_CLK_ENABLE(); }
#endif
#ifdef GPIOI
    else if (port == GPIOI) { __HAL_RCC_GPIOI_CLK_ENABLE(); }
#endif
}
 8000700:	e096      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOB) { __HAL_RCC_GPIOB_CLK_ENABLE(); }
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a4f      	ldr	r2, [pc, #316]	@ (8000844 <LED_EnableGPIOClock+0x170>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d10e      	bne.n	8000728 <LED_EnableGPIOClock+0x54>
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800070e:	4b4c      	ldr	r3, [pc, #304]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a4b      	ldr	r2, [pc, #300]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b49      	ldr	r3, [pc, #292]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8000726:	e083      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOC) { __HAL_RCC_GPIOC_CLK_ENABLE(); }
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a47      	ldr	r2, [pc, #284]	@ (8000848 <LED_EnableGPIOClock+0x174>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d10e      	bne.n	800074e <LED_EnableGPIOClock+0x7a>
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
 8000734:	4b42      	ldr	r3, [pc, #264]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000738:	4a41      	ldr	r2, [pc, #260]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000740:	4b3f      	ldr	r3, [pc, #252]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800074c:	e070      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOD) { __HAL_RCC_GPIOD_CLK_ENABLE(); }
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a3e      	ldr	r2, [pc, #248]	@ (800084c <LED_EnableGPIOClock+0x178>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10e      	bne.n	8000774 <LED_EnableGPIOClock+0xa0>
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
 800075a:	4b39      	ldr	r3, [pc, #228]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a38      	ldr	r2, [pc, #224]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
}
 8000772:	e05d      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOE) { __HAL_RCC_GPIOE_CLK_ENABLE(); }
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a36      	ldr	r2, [pc, #216]	@ (8000850 <LED_EnableGPIOClock+0x17c>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d10e      	bne.n	800079a <LED_EnableGPIOClock+0xc6>
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000784:	4a2e      	ldr	r2, [pc, #184]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6313      	str	r3, [r2, #48]	@ 0x30
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	69fb      	ldr	r3, [r7, #28]
}
 8000798:	e04a      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOF) { __HAL_RCC_GPIOF_CLK_ENABLE(); }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <LED_EnableGPIOClock+0x180>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d10e      	bne.n	80007c0 <LED_EnableGPIOClock+0xec>
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
}
 80007be:	e037      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOG) { __HAL_RCC_GPIOG_CLK_ENABLE(); }
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <LED_EnableGPIOClock+0x184>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d10e      	bne.n	80007e6 <LED_EnableGPIOClock+0x112>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697b      	ldr	r3, [r7, #20]
}
 80007e4:	e024      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOH) { __HAL_RCC_GPIOH_CLK_ENABLE(); }
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <LED_EnableGPIOClock+0x188>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d10e      	bne.n	800080c <LED_EnableGPIOClock+0x138>
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
}
 800080a:	e011      	b.n	8000830 <LED_EnableGPIOClock+0x15c>
    else if (port == GPIOI) { __HAL_RCC_GPIOI_CLK_ENABLE(); }
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <LED_EnableGPIOClock+0x18c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d10d      	bne.n	8000830 <LED_EnableGPIOClock+0x15c>
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000822:	6313      	str	r3, [r2, #48]	@ 0x30
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <LED_EnableGPIOClock+0x16c>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	bf00      	nop
 8000832:	3734      	adds	r7, #52	@ 0x34
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40020000 	.word	0x40020000
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021000 	.word	0x40021000
 8000854:	40021400 	.word	0x40021400
 8000858:	40021800 	.word	0x40021800
 800085c:	40021c00 	.word	0x40021c00
 8000860:	40022000 	.word	0x40022000

08000864 <LED_Init>:

/* Public API implementations */

void LED_Init(led_d *led, GPIO_TypeDef *port, uint16_t pin)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	4613      	mov	r3, r2
 8000870:	80fb      	strh	r3, [r7, #6]
    if (!led) return;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00c      	beq.n	8000892 <LED_Init+0x2e>

    led->port = port;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	601a      	str	r2, [r3, #0]
    led->pin  = pin;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	809a      	strh	r2, [r3, #4]

    LED_EnableGPIOClock(port);
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f7ff ff25 	bl	80006d4 <LED_EnableGPIOClock>
    led_config(led);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f000 f805 	bl	800089a <led_config>
 8000890:	e000      	b.n	8000894 <LED_Init+0x30>
    if (!led) return;
 8000892:	bf00      	nop
}
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <led_config>:

void led_config(led_d *led)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b088      	sub	sp, #32
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
    if (!led) return;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d01c      	beq.n	80008e2 <led_config+0x48>

    GPIO_InitTypeDef gpio = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
    gpio.Pin   = led->pin;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	60fb      	str	r3, [r7, #12]
    gpio.Mode  = GPIO_MODE_OUTPUT_PP;     /* push-pull output */
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
    gpio.Pull  = GPIO_NOPULL;             /* no pull-up/down */
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;     /* LED does not need high speed */
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(led->port, &gpio);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f107 020c 	add.w	r2, r7, #12
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f965 	bl	8001ba4 <HAL_GPIO_Init>

    /* Default state: off */
    led_off(led);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f819 	bl	8000912 <led_off>
 80008e0:	e000      	b.n	80008e4 <led_config+0x4a>
    if (!led) return;
 80008e2:	bf00      	nop
}
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <led_on>:

void led_on(led_d *led)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
    if (!led) return;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <led_on+0x20>
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	889b      	ldrh	r3, [r3, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	f001 faea 	bl	8001edc <HAL_GPIO_WritePin>
 8000908:	e000      	b.n	800090c <led_on+0x22>
    if (!led) return;
 800090a:	bf00      	nop
}
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <led_off>:

void led_off(led_d *led)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
    if (!led) return;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <led_off+0x20>
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	f001 fad6 	bl	8001edc <HAL_GPIO_WritePin>
 8000930:	e000      	b.n	8000934 <led_off+0x22>
    if (!led) return;
 8000932:	bf00      	nop
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <led_toggle>:

void led_toggle(led_d *led)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
    if (!led) return;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <led_toggle+0x20>
    HAL_GPIO_TogglePin(led->port, led->pin);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	889b      	ldrh	r3, [r3, #4]
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f001 fadb 	bl	8001f0e <HAL_GPIO_TogglePin>
 8000958:	e000      	b.n	800095c <led_toggle+0x22>
    if (!led) return;
 800095a:	bf00      	nop
}
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fc58 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f860 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f7ff fe4e 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 8000974:	f7ff fe12 	bl	800059c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000978:	f000 fb78 	bl	800106c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800097c:	f000 f8ee 	bl	8000b5c <MX_SPI1_Init>
  MX_TIM4_Init();
 8000980:	f000 fafe 	bl	8000f80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 4, 0);  // override it, make DMA=4
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	2010      	movs	r0, #16
 800098a:	f000 fd65 	bl	8001458 <HAL_NVIC_SetPriority>

  // --- test LCD BSP ---

  //USART2 test
  printf("Hello from STM32F407!\r\n");
 800098e:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <main+0xb0>)
 8000990:	f006 fbb4 	bl	80070fc <puts>
  printf("System running at %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 8000994:	f001 fe58 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8000998:	4603      	mov	r3, r0
 800099a:	4619      	mov	r1, r3
 800099c:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <main+0xb4>)
 800099e:	f006 fb45 	bl	800702c <iprintf>
  Beep_Off(&hbeep);
  delay_ms(500);8/

  //led test
  /* Init four on-board LEDs */
      LED_Init(&LED_GREEN,  GPIOD, GPIO_PIN_12);
 80009a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009a6:	491d      	ldr	r1, [pc, #116]	@ (8000a1c <main+0xb8>)
 80009a8:	481d      	ldr	r0, [pc, #116]	@ (8000a20 <main+0xbc>)
 80009aa:	f7ff ff5b 	bl	8000864 <LED_Init>
      LED_Init(&LED_ORANGE, GPIOD, GPIO_PIN_13);
 80009ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b2:	491a      	ldr	r1, [pc, #104]	@ (8000a1c <main+0xb8>)
 80009b4:	481b      	ldr	r0, [pc, #108]	@ (8000a24 <main+0xc0>)
 80009b6:	f7ff ff55 	bl	8000864 <LED_Init>
      LED_Init(&LED_RED,    GPIOD, GPIO_PIN_14);
 80009ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009be:	4917      	ldr	r1, [pc, #92]	@ (8000a1c <main+0xb8>)
 80009c0:	4819      	ldr	r0, [pc, #100]	@ (8000a28 <main+0xc4>)
 80009c2:	f7ff ff4f 	bl	8000864 <LED_Init>
      LED_Init(&LED_BLUE,   GPIOD, GPIO_PIN_15);
 80009c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009ca:	4914      	ldr	r1, [pc, #80]	@ (8000a1c <main+0xb8>)
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <main+0xc8>)
 80009ce:	f7ff ff49 	bl	8000864 <LED_Init>

      /* Simple test */
      led_on(&LED_GREEN);
 80009d2:	4813      	ldr	r0, [pc, #76]	@ (8000a20 <main+0xbc>)
 80009d4:	f7ff ff89 	bl	80008ea <led_on>
      HAL_Delay(2000);
 80009d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009dc:	f000 fc60 	bl	80012a0 <HAL_Delay>
      led_on(&LED_ORANGE);
 80009e0:	4810      	ldr	r0, [pc, #64]	@ (8000a24 <main+0xc0>)
 80009e2:	f7ff ff82 	bl	80008ea <led_on>
      HAL_Delay(2000);
 80009e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ea:	f000 fc59 	bl	80012a0 <HAL_Delay>
      led_toggle(&LED_BLUE);
 80009ee:	480f      	ldr	r0, [pc, #60]	@ (8000a2c <main+0xc8>)
 80009f0:	f7ff ffa3 	bl	800093a <led_toggle>
      HAL_Delay(2000);
 80009f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009f8:	f000 fc52 	bl	80012a0 <HAL_Delay>
      led_toggle(&LED_RED);
 80009fc:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <main+0xc4>)
 80009fe:	f7ff ff9c 	bl	800093a <led_toggle>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000a02:	f003 fca1 	bl	8004348 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a06:	f7ff fde9 	bl	80005dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a0a:	f003 fcc1 	bl	8004390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <main+0xaa>
 8000a12:	bf00      	nop
 8000a14:	08007ebc 	.word	0x08007ebc
 8000a18:	08007ed4 	.word	0x08007ed4
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	20000094 	.word	0x20000094
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	200000a4 	.word	0x200000a4

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	@ 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f006 fc3c 	bl	80072bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000aa4:	2340      	movs	r3, #64	@ 0x40
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa69 	bl	8001f8c <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac0:	f000 f830 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000acc:	2390      	movs	r3, #144	@ 0x90
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fccc 	bl	800247c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aea:	f000 f81b 	bl	8000b24 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	@ 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b12:	f000 fba5 	bl	8001260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40001000 	.word	0x40001000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <_write>:
  * @param  file Unused
  * @param  ptr  Pointer to string
  * @param  len  String length
  * @retval Number of characters written
  */
int _write(int file, char *ptr, int len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <_write+0x28>)
 8000b48:	f002 fbf2 	bl	8003330 <HAL_UART_Transmit>
    return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000198 	.word	0x20000198

08000b5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	@ (8000bc4 <MX_SPI1_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <MX_SPI1_Init+0x64>)
 8000bae:	f001 fe77 	bl	80028a0 <HAL_SPI_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb8:	f7ff ffb4 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000ac 	.word	0x200000ac
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_SPI_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c22:	23e0      	movs	r3, #224	@ 0xe0
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c32:	2305      	movs	r3, #5
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c3e:	f000 ffb1 	bl	8001ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013000 	.word	0x40013000
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_MspInit+0x54>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <HAL_MspInit+0x54>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_MspInit+0x54>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_MspInit+0x54>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fbdb 	bl	8001458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <HAL_InitTick+0xe4>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	4a32      	ldr	r2, [pc, #200]	@ (8000d94 <HAL_InitTick+0xe4>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <HAL_InitTick+0xe4>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fda8 	bl	800283c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 fd79 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8000cfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cfc:	e004      	b.n	8000d08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cfe:	f001 fd75 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8000d02:	4603      	mov	r3, r0
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0a:	4a23      	ldr	r2, [pc, #140]	@ (8000d98 <HAL_InitTick+0xe8>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	3b01      	subs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d1a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d24:	4a1d      	ldr	r2, [pc, #116]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d3c:	4817      	ldr	r0, [pc, #92]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d3e:	f001 fe38 	bl	80029b2 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11b      	bne.n	8000d88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d50:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d52:	f001 fe7d 	bl	8002a50 <HAL_TIM_Base_Start_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d111      	bne.n	8000d88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d64:	2036      	movs	r0, #54	@ 0x36
 8000d66:	f000 fb93 	bl	8001490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d808      	bhi.n	8000d82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	2036      	movs	r0, #54	@ 0x36
 8000d76:	f000 fb6f 	bl	8001458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_InitTick+0xf4>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e002      	b.n	8000d88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3738      	adds	r7, #56	@ 0x38
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	20000104 	.word	0x20000104
 8000da0:	40001000 	.word	0x40001000
 8000da4:	20000004 	.word	0x20000004

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000de2:	2002      	movs	r0, #2
 8000de4:	f001 f8ae 	bl	8001f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <DMA1_Stream5_IRQHandler+0x10>)
 8000df2:	f000 fc9b 	bl	800172c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001e0 	.word	0x200001e0

08000e00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <TIM4_IRQHandler+0x10>)
 8000e06:	f001 fe93 	bl	8002b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000150 	.word	0x20000150

08000e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <USART2_IRQHandler+0x10>)
 8000e1a:	f002 fb15 	bl	8003448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000198 	.word	0x20000198

08000e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e30:	f001 f888 	bl	8001f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM6_DAC_IRQHandler+0x10>)
 8000e3e:	f001 fe77 	bl	8002b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000104 	.word	0x20000104

08000e4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
  }

  return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:


int _close(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eae:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_isatty>:

int _isatty(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f006 fa78 	bl	8007414 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20020000 	.word	0x20020000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	2000014c 	.word	0x2000014c
 8000f58:	200086a8 	.word	0x200086a8

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <MX_TIM4_Init+0x98>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fc2:	4814      	ldr	r0, [pc, #80]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fc4:	f001 fcf5 	bl	80029b2 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fce:	f7ff fda9 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000fe0:	f001 fe96 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f7ff fd9b 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_TIM4_Init+0x94>)
 8000ffc:	f002 f8b8 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001006:	f7ff fd8d 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000150 	.word	0x20000150
 8001018:	40000800 	.word	0x40000800

0800101c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_TIM_Base_MspInit+0x48>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d115      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <HAL_TIM_Base_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <HAL_TIM_Base_MspInit+0x4c>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_TIM_Base_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2105      	movs	r1, #5
 800104e:	201e      	movs	r0, #30
 8001050:	f000 fa02 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001054:	201e      	movs	r0, #30
 8001056:	f000 fa1b 	bl	8001490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40000800 	.word	0x40000800
 8001068:	40023800 	.word	0x40023800

0800106c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f002 f8f4 	bl	8003290 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f7ff fd39 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000198 	.word	0x20000198
 80010bc:	40004400 	.word	0x40004400

080010c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a35      	ldr	r2, [pc, #212]	@ (80011b4 <HAL_UART_MspInit+0xf4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d163      	bne.n	80011aa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a33      	ldr	r2, [pc, #204]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a2c      	ldr	r2, [pc, #176]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_UART_MspInit+0xf8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800111a:	230c      	movs	r3, #12
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112a:	2307      	movs	r3, #7
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	@ (80011bc <HAL_UART_MspInit+0xfc>)
 8001136:	f000 fd35 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800113a:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 800113c:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <HAL_UART_MspInit+0x104>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001146:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 800116a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001172:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001176:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800117e:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001180:	f000 f994 	bl	80014ac <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800118a:	f7ff fccb 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_UART_MspInit+0x100>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2103      	movs	r1, #3
 800119e:	2026      	movs	r0, #38	@ 0x26
 80011a0:	f000 f95a 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a4:	2026      	movs	r0, #38	@ 0x26
 80011a6:	f000 f973 	bl	8001490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004400 	.word	0x40004400
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	200001e0 	.word	0x200001e0
 80011c4:	40026088 	.word	0x40026088

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001200 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011cc:	f7ff fec6 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f006 f913 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fbb3 	bl	8000964 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800120c:	08007f90 	.word	0x08007f90
  ldr r2, =_sbss
 8001210:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001214:	200086a8 	.word	0x200086a8

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f8fc 	bl	8001442 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fd30 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fd02 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	20000240 	.word	0x20000240

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000240 	.word	0x20000240

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff4c 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146a:	f7ff ff61 	bl	8001330 <__NVIC_GetPriorityGrouping>
 800146e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	6978      	ldr	r0, [r7, #20]
 8001476:	f7ff ffb1 	bl	80013dc <NVIC_EncodePriority>
 800147a:	4602      	mov	r2, r0
 800147c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff80 	bl	8001388 <__NVIC_SetPriority>
}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff54 	bl	800134c <__NVIC_EnableIRQ>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff fee6 	bl	8001288 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e099      	b.n	80015fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	e00f      	b.n	800150a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ea:	f7ff fecd 	bl	8001288 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d908      	bls.n	800150a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2220      	movs	r2, #32
 80014fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e078      	b.n	80015fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e8      	bne.n	80014ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <HAL_DMA_Init+0x158>)
 8001524:	4013      	ands	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	2b04      	cmp	r3, #4
 8001562:	d107      	bne.n	8001574 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4313      	orrs	r3, r2
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f023 0307 	bic.w	r3, r3, #7
 800158a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	4313      	orrs	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	2b04      	cmp	r3, #4
 800159c:	d117      	bne.n	80015ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00e      	beq.n	80015ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fa7b 	bl	8001aac <DMA_CheckFifoParam>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2240      	movs	r2, #64	@ 0x40
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015ca:	2301      	movs	r3, #1
 80015cc:	e016      	b.n	80015fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa32 	bl	8001a40 <DMA_CalcBaseAndBitshift>
 80015dc:	4603      	mov	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	223f      	movs	r2, #63	@ 0x3f
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	f010803f 	.word	0xf010803f

08001608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001616:	f7ff fe37 	bl	8001288 <HAL_GetTick>
 800161a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d008      	beq.n	800163a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e052      	b.n	80016e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0216 	bic.w	r2, r2, #22
 8001648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_DMA_Abort+0x62>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0208 	bic.w	r2, r2, #8
 8001678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168a:	e013      	b.n	80016b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168c:	f7ff fdfc 	bl	8001288 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d90c      	bls.n	80016b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e015      	b.n	80016e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e4      	bne.n	800168c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c6:	223f      	movs	r2, #63	@ 0x3f
 80016c8:	409a      	lsls	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00c      	b.n	8001720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2205      	movs	r2, #5
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001738:	4b8e      	ldr	r3, [pc, #568]	@ (8001974 <HAL_DMA_IRQHandler+0x248>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a8e      	ldr	r2, [pc, #568]	@ (8001978 <HAL_DMA_IRQHandler+0x24c>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0a9b      	lsrs	r3, r3, #10
 8001744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001756:	2208      	movs	r2, #8
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01a      	beq.n	8001798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0204 	bic.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001784:	2208      	movs	r2, #8
 8001786:	409a      	lsls	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2201      	movs	r2, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d012      	beq.n	80017ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ba:	2201      	movs	r2, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c6:	f043 0202 	orr.w	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d2:	2204      	movs	r2, #4
 80017d4:	409a      	lsls	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d012      	beq.n	8001804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f043 0204 	orr.w	r2, r3, #4
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001808:	2210      	movs	r2, #16
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d043      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03c      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2210      	movs	r2, #16
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d018      	beq.n	800186e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d024      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
 800185a:	e01f      	b.n	800189c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e016      	b.n	800189c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0208 	bic.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	2220      	movs	r2, #32
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 808f 	beq.w	80019cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8087 	beq.w	80019cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	2220      	movs	r2, #32
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d136      	bne.n	8001944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0216 	bic.w	r2, r2, #22
 80018e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_DMA_IRQHandler+0x1da>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0208 	bic.w	r2, r2, #8
 8001914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	223f      	movs	r2, #63	@ 0x3f
 800191c:	409a      	lsls	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001936:	2b00      	cmp	r3, #0
 8001938:	d07e      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
        }
        return;
 8001942:	e079      	b.n	8001a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01d      	beq.n	800198e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10d      	bne.n	800197c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	2b00      	cmp	r3, #0
 8001966:	d031      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
 8001970:	e02c      	b.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000
 8001978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d023      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e01e      	b.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0210 	bic.w	r2, r2, #16
 80019aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d032      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d022      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2205      	movs	r2, #5
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d307      	bcc.n	8001a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f2      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x2cc>
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
 8001a36:	e000      	b.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a38:	bf00      	nop
    }
  }
}
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3b10      	subs	r3, #16
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d909      	bls.n	8001a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	1d1a      	adds	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a80:	e007      	b.n	8001a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	08007f44 	.word	0x08007f44

08001aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11f      	bne.n	8001b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d856      	bhi.n	8001b7a <DMA_CheckFifoParam+0xce>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <DMA_CheckFifoParam+0x28>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af7 	.word	0x08001af7
 8001adc:	08001ae5 	.word	0x08001ae5
 8001ae0:	08001b7b 	.word	0x08001b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d046      	beq.n	8001b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e043      	b.n	8001b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001afe:	d140      	bne.n	8001b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e03d      	b.n	8001b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b0e:	d121      	bne.n	8001b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d837      	bhi.n	8001b86 <DMA_CheckFifoParam+0xda>
 8001b16:	a201      	add	r2, pc, #4	@ (adr r2, 8001b1c <DMA_CheckFifoParam+0x70>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b33 	.word	0x08001b33
 8001b24:	08001b2d 	.word	0x08001b2d
 8001b28:	08001b45 	.word	0x08001b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b30:	e030      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d025      	beq.n	8001b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b42:	e022      	b.n	8001b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b52:	e01c      	b.n	8001b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d903      	bls.n	8001b62 <DMA_CheckFifoParam+0xb6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b60:	e018      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      break;
 8001b66:	e015      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      break;
 8001b78:	e00b      	b.n	8001b92 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e00a      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e008      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e006      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e004      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
    }
  } 
  
  return status; 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e16b      	b.n	8001e98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 815a 	bne.w	8001e92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80b4 	beq.w	8001e92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b60      	ldr	r3, [pc, #384]	@ (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_GPIO_Init+0x310>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	@ (8001eb8 <HAL_GPIO_Init+0x314>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a51      	ldr	r2, [pc, #324]	@ (8001ebc <HAL_GPIO_Init+0x318>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	@ (8001ec0 <HAL_GPIO_Init+0x31c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x216>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4d      	ldr	r2, [pc, #308]	@ (8001ecc <HAL_GPIO_Init+0x328>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x212>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed0 <HAL_GPIO_Init+0x32c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x20e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <HAL_GPIO_Init+0x330>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x20a>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00e      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dae:	2308      	movs	r3, #8
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4935      	ldr	r1, [pc, #212]	@ (8001eb4 <HAL_GPIO_Init+0x310>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0e:	4a32      	ldr	r2, [pc, #200]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e14:	4b30      	ldr	r3, [pc, #192]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e38:	4a27      	ldr	r2, [pc, #156]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae90 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40021c00 	.word	0x40021c00
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	041a      	lsls	r2, r3, #16
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	400b      	ands	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f806 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e267      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d075      	beq.n	8002096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001faa:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b82      	ldr	r3, [pc, #520]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x108>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e242      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x74>
 8001ff2:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x98>
 800200a:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6f      	ldr	r2, [pc, #444]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6c      	ldr	r2, [pc, #432]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002024:	4b69      	ldr	r3, [pc, #420]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a68      	ldr	r2, [pc, #416]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a65      	ldr	r2, [pc, #404]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff f920 	bl	8001288 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f91c 	bl	8001288 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e207      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xc0>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff f90c 	bl	8001288 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff f908 	bl	8001288 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1f3      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b51      	ldr	r3, [pc, #324]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0xe8>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1c7      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4937      	ldr	r1, [pc, #220]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_OscConfig+0x244>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f8c1 	bl	8001288 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f8bd 	bl	8001288 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1a8      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4925      	ldr	r1, [pc, #148]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_RCC_OscConfig+0x244>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f8a0 	bl	8001288 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff f89c 	bl	8001288 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e187      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d036      	beq.n	80021e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_RCC_OscConfig+0x248>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7ff f880 	bl	8001288 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff f87c 	bl	8001288 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e167      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x200>
 80021aa:	e01b      	b.n	80021e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_OscConfig+0x248>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff f869 	bl	8001288 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	e00e      	b.n	80021d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff f865 	bl	8001288 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d907      	bls.n	80021d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e150      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470000 	.word	0x42470000
 80021d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ea      	bne.n	80021ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8097 	beq.w	8002320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b81      	ldr	r3, [pc, #516]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b7d      	ldr	r3, [pc, #500]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	4a7c      	ldr	r2, [pc, #496]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	@ 0x40
 8002212:	4b7a      	ldr	r3, [pc, #488]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a73      	ldr	r2, [pc, #460]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff f825 	bl	8001288 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff f821 	bl	8001288 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e10c      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x2ea>
 8002268:	4b64      	ldr	r3, [pc, #400]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a63      	ldr	r2, [pc, #396]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x324>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x30c>
 800227e:	4b5f      	ldr	r3, [pc, #380]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	4a5e      	ldr	r2, [pc, #376]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	@ 0x70
 800228a:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	4a5b      	ldr	r2, [pc, #364]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6713      	str	r3, [r2, #112]	@ 0x70
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x324>
 8002298:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229c:	4a57      	ldr	r2, [pc, #348]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a4:	4b55      	ldr	r3, [pc, #340]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe ffe6 	bl	8001288 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe ffe2 	bl	8001288 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0cb      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b49      	ldr	r3, [pc, #292]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCC_OscConfig+0x334>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7fe ffd0 	bl	8001288 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe ffcc 	bl	8001288 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0b5      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ee      	bne.n	80022ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	4a38      	ldr	r2, [pc, #224]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a1 	beq.w	800246c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232a:	4b34      	ldr	r3, [pc, #208]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d05c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d141      	bne.n	80023c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe ffa0 	bl	8001288 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe ff9c 	bl	8001288 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e087      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	3b01      	subs	r3, #1
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	491b      	ldr	r1, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe ff75 	bl	8001288 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe ff71 	bl	8001288 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e05c      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x416>
 80023c0:	e054      	b.n	800246c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe ff5e 	bl	8001288 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe ff5a 	bl	8001288 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e045      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x444>
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e038      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000
 8002404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x4ec>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d028      	beq.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d121      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d11a      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800243e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0cc      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d90c      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b8      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a58      	ldr	r2, [pc, #352]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	494d      	ldr	r1, [pc, #308]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d044      	beq.n	800259c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d119      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e07f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002536:	2b03      	cmp	r3, #3
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b3f      	ldr	r3, [pc, #252]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e067      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4934      	ldr	r1, [pc, #208]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800256c:	f7fe fe8c 	bl	8001288 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7fe fe88 	bl	8001288 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e04f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d20c      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e032      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4916      	ldr	r1, [pc, #88]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002602:	f000 f821 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490a      	ldr	r1, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fb44 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00
 8002638:	40023800 	.word	0x40023800
 800263c:	08007f2c 	.word	0x08007f2c
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004

08002648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b090      	sub	sp, #64	@ 0x40
 800264e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d00d      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x40>
 800266c:	2b08      	cmp	r3, #8
 800266e:	f200 80a1 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x34>
 8002676:	2b04      	cmp	r3, #4
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x3a>
 800267a:	e09b      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x184>)
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002680:	e09b      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002682:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002686:	e098      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002688:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002692:	4b4d      	ldr	r3, [pc, #308]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b4a      	ldr	r3, [pc, #296]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	2200      	movs	r2, #0
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026b0:	2100      	movs	r1, #0
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026b4:	fb03 f201 	mul.w	r2, r3, r1
 80026b8:	2300      	movs	r3, #0
 80026ba:	fb00 f303 	mul.w	r3, r0, r3
 80026be:	4413      	add	r3, r2
 80026c0:	4a43      	ldr	r2, [pc, #268]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026c2:	fba0 1202 	umull	r1, r2, r0, r2
 80026c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c8:	460a      	mov	r2, r1
 80026ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ce:	4413      	add	r3, r2
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d4:	2200      	movs	r2, #0
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	61fa      	str	r2, [r7, #28]
 80026da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026e2:	f7fd fdc5 	bl	8000270 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4613      	mov	r3, r2
 80026ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ee:	e053      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	2200      	movs	r2, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	617a      	str	r2, [r7, #20]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002702:	f04f 0b00 	mov.w	fp, #0
 8002706:	4652      	mov	r2, sl
 8002708:	465b      	mov	r3, fp
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002718:	0150      	lsls	r0, r2, #5
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	ebb2 080a 	subs.w	r8, r2, sl
 8002722:	eb63 090b 	sbc.w	r9, r3, fp
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800273a:	ebb2 0408 	subs.w	r4, r2, r8
 800273e:	eb63 0509 	sbc.w	r5, r3, r9
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	00eb      	lsls	r3, r5, #3
 800274c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002750:	00e2      	lsls	r2, r4, #3
 8002752:	4614      	mov	r4, r2
 8002754:	461d      	mov	r5, r3
 8002756:	eb14 030a 	adds.w	r3, r4, sl
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	eb45 030b 	adc.w	r3, r5, fp
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276e:	4629      	mov	r1, r5
 8002770:	028b      	lsls	r3, r1, #10
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002778:	4621      	mov	r1, r4
 800277a:	028a      	lsls	r2, r1, #10
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	2200      	movs	r2, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278c:	f7fd fd70 	bl	8000270 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x184>)
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3740      	adds	r7, #64	@ 0x40
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	017d7840 	.word	0x017d7840

080027d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	08007f3c 	.word	0x08007f3c

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002818:	f7ff ffdc 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0b5b      	lsrs	r3, r3, #13
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08007f3c 	.word	0x08007f3c

0800283c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	220f      	movs	r2, #15
 800284a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_GetClockConfig+0x5c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800287e:	4b07      	ldr	r3, [pc, #28]	@ (800289c <HAL_RCC_GetClockConfig+0x60>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07b      	b.n	80029aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c2:	d009      	beq.n	80028d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
 80028ca:	e005      	b.n	80028d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe f968 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800290e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0104 	and.w	r1, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	f003 0210 	and.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e041      	b.n	8002a48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fb1f 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fa7d 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e04e      	b.n	8002b06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a23      	ldr	r2, [pc, #140]	@ (8002b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a92:	d01d      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d018      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x80>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d010      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	e007      	b.n	8002b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	40000c00 	.word	0x40000c00
 8002b24:	40010400 	.word	0x40010400
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40001800 	.word	0x40001800

08002b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d020      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0202 	mvn.w	r2, #2
 8002b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f999 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f98b 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f99c 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0204 	mvn.w	r2, #4
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f973 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f965 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f976 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0208 	mvn.w	r2, #8
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2204      	movs	r2, #4
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f94d 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f93f 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f950 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d020      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01b      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0210 	mvn.w	r2, #16
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f927 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f919 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f92a 	bl	8002ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0201 	mvn.w	r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd ff32 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fade 	bl	800327c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8fb 	bl	8002eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0220 	mvn.w	r2, #32
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fab0 	bl	8003268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_ConfigClockSource+0x1c>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0b4      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x186>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d64:	d03e      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6a:	f200 8087 	bhi.w	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d72:	f000 8086 	beq.w	8002e82 <HAL_TIM_ConfigClockSource+0x172>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d7a:	d87f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b70      	cmp	r3, #112	@ 0x70
 8002d7e:	d01a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d80:	2b70      	cmp	r3, #112	@ 0x70
 8002d82:	d87b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b60      	cmp	r3, #96	@ 0x60
 8002d86:	d050      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x11a>
 8002d88:	2b60      	cmp	r3, #96	@ 0x60
 8002d8a:	d877      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b50      	cmp	r3, #80	@ 0x50
 8002d8e:	d03c      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xfa>
 8002d90:	2b50      	cmp	r3, #80	@ 0x50
 8002d92:	d873      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d058      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x13a>
 8002d98:	2b40      	cmp	r3, #64	@ 0x40
 8002d9a:	d86f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b30      	cmp	r3, #48	@ 0x30
 8002d9e:	d064      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	2b30      	cmp	r3, #48	@ 0x30
 8002da2:	d86b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d060      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d867      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d05a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	e062      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	f000 f9b3 	bl	8003130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e04f      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	f000 f99c 	bl	8003130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e03c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 f910 	bl	800303c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2150      	movs	r1, #80	@ 0x50
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f969 	bl	80030fa <TIM_ITRx_SetConfig>
      break;
 8002e28:	e02c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f92f 	bl	800309a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2160      	movs	r1, #96	@ 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f959 	bl	80030fa <TIM_ITRx_SetConfig>
      break;
 8002e48:	e01c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f8f0 	bl	800303c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f949 	bl	80030fa <TIM_ITRx_SetConfig>
      break;
 8002e68:	e00c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f000 f940 	bl	80030fa <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e000      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a43      	ldr	r2, [pc, #268]	@ (8003010 <TIM_Base_SetConfig+0x120>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0e:	d00f      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a40      	ldr	r2, [pc, #256]	@ (8003014 <TIM_Base_SetConfig+0x124>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003018 <TIM_Base_SetConfig+0x128>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <TIM_Base_SetConfig+0x12c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003020 <TIM_Base_SetConfig+0x130>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d108      	bne.n	8002f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a32      	ldr	r2, [pc, #200]	@ (8003010 <TIM_Base_SetConfig+0x120>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f50:	d027      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2f      	ldr	r2, [pc, #188]	@ (8003014 <TIM_Base_SetConfig+0x124>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d023      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003018 <TIM_Base_SetConfig+0x128>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01f      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2d      	ldr	r2, [pc, #180]	@ (800301c <TIM_Base_SetConfig+0x12c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01b      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003020 <TIM_Base_SetConfig+0x130>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d017      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	@ (8003024 <TIM_Base_SetConfig+0x134>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003028 <TIM_Base_SetConfig+0x138>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00f      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a29      	ldr	r2, [pc, #164]	@ (800302c <TIM_Base_SetConfig+0x13c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00b      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <TIM_Base_SetConfig+0x140>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <TIM_Base_SetConfig+0x144>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	@ (8003038 <TIM_Base_SetConfig+0x148>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d108      	bne.n	8002fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <TIM_Base_SetConfig+0x120>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0xf2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <TIM_Base_SetConfig+0x130>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d103      	bne.n	8002fea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f043 0204 	orr.w	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40010400 	.word	0x40010400
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800
 8003030:	40001800 	.word	0x40001800
 8003034:	40001c00 	.word	0x40001c00
 8003038:	40002000 	.word	0x40002000

0800303c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0201 	bic.w	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f023 030a 	bic.w	r3, r3, #10
 8003078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 0210 	bic.w	r2, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	031b      	lsls	r3, r3, #12
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	f043 0307 	orr.w	r3, r3, #7
 800311c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800314a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	021a      	lsls	r2, r3, #8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	431a      	orrs	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003184:	2302      	movs	r3, #2
 8003186:	e05a      	b.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d01d      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	@ (800325c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40010400 	.word	0x40010400
 8003260:	40014000 	.word	0x40014000
 8003264:	40001800 	.word	0x40001800

08003268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e042      	b.n	8003328 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd ff02 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	@ 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fd7f 	bl	8003dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d175      	bne.n	800343c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Transmit+0x2c>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e06e      	b.n	800343e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	@ 0x21
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336e:	f7fd ff8b 	bl	8001288 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x6c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a4:	e02e      	b.n	8003404 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	@ 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fb1d 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e03a      	b.n	800343e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e007      	b.n	80033f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1cb      	bne.n	80033a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	@ 0x40
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fae9 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e006      	b.n	800343e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	@ 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fbd7 	bl	8003c5a <UART_Receive_IT>
      return;
 80034ac:	e273      	b.n	8003996 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80de 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
 80034b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80d1 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
 8003526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 820a 	beq.w	800398c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fb62 	bl	8003c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_UART_IRQHandler+0x17a>
 80035ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04f      	beq.n	8003662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa6d 	bl	8003aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d141      	bne.n	800365a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003602:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800360e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800361a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1d9      	bne.n	80035d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362e:	4a8a      	ldr	r2, [pc, #552]	@ (8003858 <HAL_UART_IRQHandler+0x410>)
 8003630:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f856 	bl	80016e8 <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00e      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9b6 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e00a      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9b2 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e006      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9ae 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800366e:	e18d      	b.n	800398c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	bf00      	nop
    return;
 8003672:	e18b      	b.n	800398c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 8167 	bne.w	800394c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8160 	beq.w	800394c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8159 	beq.w	800394c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	f040 80ce 	bne.w	800385c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a9 	beq.w	8003828 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036de:	429a      	cmp	r2, r3
 80036e0:	f080 80a2 	bcs.w	8003828 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f6:	f000 8088 	beq.w	800380a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800372a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003732:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800373e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3314      	adds	r3, #20
 800374c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800376a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800376e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800377c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e1      	bne.n	8003746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e3      	bne.n	8003782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037da:	f023 0310 	bic.w	r3, r3, #16
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e3      	bne.n	80037c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd feff 	bl	8001608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8d9 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003826:	e0b3      	b.n	8003990 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800382c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003830:	429a      	cmp	r2, r3
 8003832:	f040 80ad 	bne.w	8003990 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	f040 80a6 	bne.w	8003990 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8c1 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
      return;
 8003856:	e09b      	b.n	8003990 <HAL_UART_IRQHandler+0x548>
 8003858:	08003b69 	.word	0x08003b69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003864:	b29b      	uxth	r3, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 808e 	beq.w	8003994 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8089 	beq.w	8003994 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e3      	bne.n	8003882 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	623b      	str	r3, [r7, #32]
   return(result);
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3314      	adds	r3, #20
 80038da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038de:	633a      	str	r2, [r7, #48]	@ 0x30
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e3      	bne.n	80038ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003924:	61fa      	str	r2, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	617b      	str	r3, [r7, #20]
   return(result);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e3      	bne.n	8003900 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800393e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f847 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394a:	e023      	b.n	8003994 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_UART_IRQHandler+0x524>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f910 	bl	8003b8a <UART_Transmit_IT>
    return;
 800396a:	e014      	b.n	8003996 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <HAL_UART_IRQHandler+0x54e>
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f950 	bl	8003c2a <UART_EndTransmit_IT>
    return;
 800398a:	e004      	b.n	8003996 <HAL_UART_IRQHandler+0x54e>
    return;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_UART_IRQHandler+0x54e>
      return;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_UART_IRQHandler+0x54e>
      return;
 8003994:	bf00      	nop
  }
}
 8003996:	37e8      	adds	r7, #232	@ 0xe8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	e03b      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d037      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fd fc3d 	bl	8001288 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e03a      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d023      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d020      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d01d      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d116      	bne.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f81d 	bl	8003aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d0b4      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b095      	sub	sp, #84	@ 0x54
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aca:	643a      	str	r2, [r7, #64]	@ 0x40
 8003acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d119      	bne.n	8003b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0310 	bic.w	r3, r3, #16
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3a:	61ba      	str	r2, [r7, #24]
 8003b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e5      	bne.n	8003b1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b5c:	bf00      	nop
 8003b5e:	3754      	adds	r7, #84	@ 0x54
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff ff21 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b21      	cmp	r3, #33	@ 0x21
 8003b9c:	d13e      	bne.n	8003c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba6:	d114      	bne.n	8003bd2 <UART_Transmit_IT+0x48>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]
 8003bd0:	e008      	b.n	8003be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6211      	str	r1, [r2, #32]
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fea6 	bl	800399c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b08c      	sub	sp, #48	@ 0x30
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b22      	cmp	r3, #34	@ 0x22
 8003c74:	f040 80aa 	bne.w	8003dcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d115      	bne.n	8003cae <UART_Receive_IT+0x54>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d111      	bne.n	8003cae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cac:	e024      	b.n	8003cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbc:	d007      	beq.n	8003cce <UART_Receive_IT+0x74>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <UART_Receive_IT+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e008      	b.n	8003cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d15d      	bne.n	8003dc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0220 	bic.w	r2, r2, #32
 8003d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d135      	bne.n	8003dbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	613b      	str	r3, [r7, #16]
   return(result);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d78:	623a      	str	r2, [r7, #32]
 8003d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d10a      	bne.n	8003db0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fe0e 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
 8003dbc:	e002      	b.n	8003dc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fdf6 	bl	80039b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e002      	b.n	8003dce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3730      	adds	r7, #48	@ 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b0c0      	sub	sp, #256	@ 0x100
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	68d9      	ldr	r1, [r3, #12]
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	ea40 0301 	orr.w	r3, r0, r1
 8003e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e30:	f021 010c 	bic.w	r1, r1, #12
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	6999      	ldr	r1, [r3, #24]
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	ea40 0301 	orr.w	r3, r0, r1
 8003e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8f      	ldr	r3, [pc, #572]	@ (80040a4 <UART_SetConfig+0x2cc>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d005      	beq.n	8003e78 <UART_SetConfig+0xa0>
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8d      	ldr	r3, [pc, #564]	@ (80040a8 <UART_SetConfig+0x2d0>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d104      	bne.n	8003e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe fccc 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e80:	e003      	b.n	8003e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e82:	f7fe fcb3 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8003e86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	f040 810c 	bne.w	80040b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	1891      	adds	r1, r2, r2
 8003eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eb2:	415b      	adcs	r3, r3
 8003eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eba:	4621      	mov	r1, r4
 8003ebc:	eb12 0801 	adds.w	r8, r2, r1
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	eb43 0901 	adc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	462b      	mov	r3, r5
 8003eea:	eb49 0303 	adc.w	r3, r9, r3
 8003eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003efe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f06:	460b      	mov	r3, r1
 8003f08:	18db      	adds	r3, r3, r3
 8003f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	eb42 0303 	adc.w	r3, r2, r3
 8003f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f1c:	f7fc f9a8 	bl	8000270 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	011c      	lsls	r4, r3, #4
 8003f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	1891      	adds	r1, r2, r2
 8003f46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f48:	415b      	adcs	r3, r3
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f50:	4641      	mov	r1, r8
 8003f52:	eb12 0a01 	adds.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb43 0b01 	adc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f70:	4692      	mov	sl, r2
 8003f72:	469b      	mov	fp, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	eb1a 0303 	adds.w	r3, sl, r3
 8003f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb4b 0303 	adc.w	r3, fp, r3
 8003f84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	18db      	adds	r3, r3, r3
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	eb42 0303 	adc.w	r3, r2, r3
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fb2:	f7fc f95d 	bl	8000270 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2264      	movs	r2, #100	@ 0x64
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	1acb      	subs	r3, r1, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fd2:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fe0:	441c      	add	r4, r3
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004004:	4641      	mov	r1, r8
 8004006:	1851      	adds	r1, r2, r1
 8004008:	6339      	str	r1, [r7, #48]	@ 0x30
 800400a:	4649      	mov	r1, r9
 800400c:	414b      	adcs	r3, r1
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800401c:	4659      	mov	r1, fp
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4651      	mov	r1, sl
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4651      	mov	r1, sl
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4642      	mov	r2, r8
 8004032:	189b      	adds	r3, r3, r2
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004038:	464b      	mov	r3, r9
 800403a:	460a      	mov	r2, r1
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004058:	460b      	mov	r3, r1
 800405a:	18db      	adds	r3, r3, r3
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405e:	4613      	mov	r3, r2
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800406a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800406e:	f7fc f8ff 	bl	8000270 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <UART_SetConfig+0x2d4>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	@ 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	@ 0x32
 800408a:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <UART_SetConfig+0x2d4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4422      	add	r2, r4
 800409e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a0:	e106      	b.n	80042b0 <UART_SetConfig+0x4d8>
 80040a2:	bf00      	nop
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040c2:	4642      	mov	r2, r8
 80040c4:	464b      	mov	r3, r9
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	6239      	str	r1, [r7, #32]
 80040ca:	415b      	adcs	r3, r3
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d2:	4641      	mov	r1, r8
 80040d4:	1854      	adds	r4, r2, r1
 80040d6:	4649      	mov	r1, r9
 80040d8:	eb43 0501 	adc.w	r5, r3, r1
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f8:	464b      	mov	r3, r9
 80040fa:	eb45 0303 	adc.w	r3, r5, r3
 80040fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800411e:	4629      	mov	r1, r5
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004128:	4621      	mov	r1, r4
 800412a:	008a      	lsls	r2, r1, #2
 800412c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004130:	f7fc f89e 	bl	8000270 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <UART_SetConfig+0x4e4>)
 800413a:	fba3 2302 	umull	r2, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	011c      	lsls	r4, r3, #4
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800414c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	61b9      	str	r1, [r7, #24]
 800415c:	415b      	adcs	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004164:	4641      	mov	r1, r8
 8004166:	1851      	adds	r1, r2, r1
 8004168:	6139      	str	r1, [r7, #16]
 800416a:	4649      	mov	r1, r9
 800416c:	414b      	adcs	r3, r1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800417c:	4659      	mov	r1, fp
 800417e:	00cb      	lsls	r3, r1, #3
 8004180:	4651      	mov	r1, sl
 8004182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004186:	4651      	mov	r1, sl
 8004188:	00ca      	lsls	r2, r1, #3
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	4603      	mov	r3, r0
 8004190:	4642      	mov	r2, r8
 8004192:	189b      	adds	r3, r3, r2
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004198:	464b      	mov	r3, r9
 800419a:	460a      	mov	r2, r1
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041bc:	4649      	mov	r1, r9
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c6:	4641      	mov	r1, r8
 80041c8:	008a      	lsls	r2, r1, #2
 80041ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041ce:	f7fc f84f 	bl	8000270 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	4b38      	ldr	r3, [pc, #224]	@ (80042bc <UART_SetConfig+0x4e4>)
 80041da:	fba3 2301 	umull	r2, r3, r3, r1
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	@ 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1acb      	subs	r3, r1, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	@ 0x32
 80041ec:	4a33      	ldr	r2, [pc, #204]	@ (80042bc <UART_SetConfig+0x4e4>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f8:	441c      	add	r4, r3
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	673b      	str	r3, [r7, #112]	@ 0x70
 8004202:	677a      	str	r2, [r7, #116]	@ 0x74
 8004204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	415b      	adcs	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424a:	464b      	mov	r3, r9
 800424c:	460a      	mov	r2, r1
 800424e:	eb42 0303 	adc.w	r3, r2, r3
 8004252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	663b      	str	r3, [r7, #96]	@ 0x60
 800425e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800427e:	f7fb fff7 	bl	8000270 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <UART_SetConfig+0x4e4>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	2164      	movs	r1, #100	@ 0x64
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	3332      	adds	r3, #50	@ 0x32
 800429a:	4a08      	ldr	r2, [pc, #32]	@ (80042bc <UART_SetConfig+0x4e4>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4422      	add	r2, r4
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042bc:	51eb851f 	.word	0x51eb851f

080042c0 <__NVIC_SetPriority>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	@ (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <SysTick_Handler+0x1c>)
 800431a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800431c:	f001 fd46 	bl	8005dac <xTaskGetSchedulerState>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004326:	f002 fb3f 	bl	80069a8 <xPortSysTickHandler>
  }
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000e010 	.word	0xe000e010

08004334 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004338:	2100      	movs	r1, #0
 800433a:	f06f 0004 	mvn.w	r0, #4
 800433e:	f7ff ffbf 	bl	80042c0 <__NVIC_SetPriority>
#endif
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434e:	f3ef 8305 	mrs	r3, IPSR
 8004352:	603b      	str	r3, [r7, #0]
  return(result);
 8004354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800435a:	f06f 0305 	mvn.w	r3, #5
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	e00c      	b.n	800437c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <osKernelInitialize+0x44>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <osKernelInitialize+0x44>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	e002      	b.n	800437c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000244 	.word	0x20000244

08004390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	603b      	str	r3, [r7, #0]
  return(result);
 800439c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80043a2:	f06f 0305 	mvn.w	r3, #5
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e010      	b.n	80043cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <osKernelStart+0x48>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d109      	bne.n	80043c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043b2:	f7ff ffbf 	bl	8004334 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043b6:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <osKernelStart+0x48>)
 80043b8:	2202      	movs	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043bc:	f001 f892 	bl	80054e4 <vTaskStartScheduler>
      stat = osOK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	e002      	b.n	80043cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000244 	.word	0x20000244

080043dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	@ 0x38
 80043e0:	af04      	add	r7, sp, #16
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ec:	f3ef 8305 	mrs	r3, IPSR
 80043f0:	617b      	str	r3, [r7, #20]
  return(result);
 80043f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d17e      	bne.n	80044f6 <osThreadNew+0x11a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d07b      	beq.n	80044f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004402:	2318      	movs	r3, #24
 8004404:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d045      	beq.n	80044a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <osThreadNew+0x48>
        name = attr->name;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <osThreadNew+0x6e>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b38      	cmp	r3, #56	@ 0x38
 800443c:	d805      	bhi.n	800444a <osThreadNew+0x6e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <osThreadNew+0x72>
        return (NULL);
 800444a:	2300      	movs	r3, #0
 800444c:	e054      	b.n	80044f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <osThreadNew+0xa8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2ba7      	cmp	r3, #167	@ 0xa7
 800446c:	d90a      	bls.n	8004484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <osThreadNew+0xa8>
        mem = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e010      	b.n	80044a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10c      	bne.n	80044a6 <osThreadNew+0xca>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <osThreadNew+0xca>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <osThreadNew+0xca>
          mem = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e001      	b.n	80044a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d110      	bne.n	80044ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044b4:	9202      	str	r2, [sp, #8]
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fe1a 	bl	80050fc <xTaskCreateStatic>
 80044c8:	4603      	mov	r3, r0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e013      	b.n	80044f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fe68 	bl	80051bc <xTaskCreate>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <osThreadNew+0x11a>
            hTask = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044f6:	693b      	ldr	r3, [r7, #16]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3728      	adds	r7, #40	@ 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004508:	f3ef 8305 	mrs	r3, IPSR
 800450c:	60bb      	str	r3, [r7, #8]
  return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <osDelay+0x1c>
    stat = osErrorISR;
 8004514:	f06f 0305 	mvn.w	r3, #5
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e007      	b.n	800452c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffa6 	bl	8005478 <vTaskDelay>
    }
  }

  return (stat);
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <vApplicationGetIdleTaskMemory+0x2c>)
 8004548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a06      	ldr	r2, [pc, #24]	@ (8004568 <vApplicationGetIdleTaskMemory+0x30>)
 800454e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2280      	movs	r2, #128	@ 0x80
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000248 	.word	0x20000248
 8004568:	200002f0 	.word	0x200002f0

0800456c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a07      	ldr	r2, [pc, #28]	@ (8004598 <vApplicationGetTimerTaskMemory+0x2c>)
 800457c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a06      	ldr	r2, [pc, #24]	@ (800459c <vApplicationGetTimerTaskMemory+0x30>)
 8004582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	200004f0 	.word	0x200004f0
 800459c:	20000598 	.word	0x20000598

080045a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f103 0208 	add.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f103 0208 	add.w	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f103 0208 	add.w	r2, r3, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d103      	bne.n	8004662 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e00c      	b.n	800467c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3308      	adds	r3, #8
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e002      	b.n	8004670 <vListInsert+0x2e>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	d2f6      	bcs.n	800466a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6892      	ldr	r2, [r2, #8]
 80046ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6852      	ldr	r2, [r2, #4]
 80046d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d103      	bne.n	80046e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800471c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004734:	f002 f8a8 	bl	8006888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004764:	3b01      	subs	r3, #1
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	22ff      	movs	r2, #255	@ 0xff
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	22ff      	movs	r2, #255	@ 0xff
 8004780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d114      	bne.n	80047b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3310      	adds	r3, #16
 8004796:	4618      	mov	r0, r3
 8004798:	f001 f942 	bl	8005a20 <xTaskRemoveFromEventList>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d012      	beq.n	80047c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047a2:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <xQueueGenericReset+0xd0>)
 80047a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	e009      	b.n	80047c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3310      	adds	r3, #16
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fef1 	bl	80045a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3324      	adds	r3, #36	@ 0x24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff feec 	bl	80045a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047c8:	f002 f890 	bl	80068ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	@ 0x38
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047f0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800480e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <xQueueGenericCreateStatic+0x56>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <xQueueGenericCreateStatic+0x5a>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueGenericCreateStatic+0x5c>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800483c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	623b      	str	r3, [r7, #32]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <xQueueGenericCreateStatic+0x84>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <xQueueGenericCreateStatic+0x88>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <xQueueGenericCreateStatic+0x8a>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800486a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	61fb      	str	r3, [r7, #28]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004882:	2350      	movs	r3, #80	@ 0x50
 8004884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b50      	cmp	r3, #80	@ 0x50
 800488a:	d00b      	beq.n	80048a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800488c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	61bb      	str	r3, [r7, #24]
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	e7fd      	b.n	80048a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f805 	bl	80048d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3730      	adds	r7, #48	@ 0x30
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e002      	b.n	80048f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004904:	2101      	movs	r1, #1
 8004906:	69b8      	ldr	r0, [r7, #24]
 8004908:	f7ff fefe 	bl	8004708 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800492a:	2300      	movs	r3, #0
 800492c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xQueueGenericSend+0x34>
	__asm volatile
 8004938:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <xQueueGenericSend+0x42>
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <xQueueGenericSend+0x46>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueGenericSend+0x48>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <xQueueGenericSend+0x64>
	__asm volatile
 8004968:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d103      	bne.n	800498e <xQueueGenericSend+0x72>
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <xQueueGenericSend+0x76>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <xQueueGenericSend+0x78>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <xQueueGenericSend+0x94>
	__asm volatile
 8004998:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049b0:	f001 f9fc 	bl	8005dac <xTaskGetSchedulerState>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <xQueueGenericSend+0xa4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <xQueueGenericSend+0xa8>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <xQueueGenericSend+0xaa>
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80049ca:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	61fb      	str	r3, [r7, #28]
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049e2:	f001 ff51 	bl	8006888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <xQueueGenericSend+0xdc>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d129      	bne.n	8004a4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049fe:	f000 fa0f 	bl	8004e20 <prvCopyDataToQueue>
 8004a02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	3324      	adds	r3, #36	@ 0x24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f805 	bl	8005a20 <xTaskRemoveFromEventList>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b1c <xQueueGenericSend+0x200>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	e00a      	b.n	8004a44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a34:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <xQueueGenericSend+0x200>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a44:	f001 ff52 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e063      	b.n	8004b14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a52:	f001 ff4b 	bl	80068ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e05c      	b.n	8004b14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f83f 	bl	8005ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a6e:	f001 ff3d 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a72:	f000 fda7 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a76:	f001 ff07 	bl	8006888 <vPortEnterCritical>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a80:	b25b      	sxtb	r3, r3
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d103      	bne.n	8004a90 <xQueueGenericSend+0x174>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d103      	bne.n	8004aa6 <xQueueGenericSend+0x18a>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa6:	f001 ff21 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aaa:	1d3a      	adds	r2, r7, #4
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f82e 	bl	8005b14 <xTaskCheckForTimeOut>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d124      	bne.n	8004b08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004abe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ac0:	f000 faa6 	bl	8005010 <prvIsQueueFull>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d018      	beq.n	8004afc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	3310      	adds	r3, #16
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff52 	bl	800597c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ada:	f000 fa31 	bl	8004f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ade:	f000 fd7f 	bl	80055e0 <xTaskResumeAll>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f47f af7c 	bne.w	80049e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004aea:	4b0c      	ldr	r3, [pc, #48]	@ (8004b1c <xQueueGenericSend+0x200>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	e772      	b.n	80049e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004afe:	f000 fa1f 	bl	8004f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b02:	f000 fd6d 	bl	80055e0 <xTaskResumeAll>
 8004b06:	e76c      	b.n	80049e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b0a:	f000 fa19 	bl	8004f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b0e:	f000 fd67 	bl	80055e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3738      	adds	r7, #56	@ 0x38
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	e000ed04 	.word	0xe000ed04

08004b20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b090      	sub	sp, #64	@ 0x40
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b38:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <xQueueGenericSendFromISR+0x3e>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <xQueueGenericSendFromISR+0x42>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <xQueueGenericSendFromISR+0x44>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b68:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d103      	bne.n	8004b8e <xQueueGenericSendFromISR+0x6e>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <xQueueGenericSendFromISR+0x72>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueGenericSendFromISR+0x74>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b98:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	623b      	str	r3, [r7, #32]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb0:	f001 ff4a 	bl	8006a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8004bb8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <xQueueGenericSendFromISR+0xc2>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d12f      	bne.n	8004c42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004be8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bf8:	f000 f912 	bl	8004e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d112      	bne.n	8004c2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	3324      	adds	r3, #36	@ 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 ff04 	bl	8005a20 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e007      	b.n	8004c3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c30:	3301      	adds	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	b25a      	sxtb	r2, r3
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c40:	e001      	b.n	8004c46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3740      	adds	r7, #64	@ 0x40
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	@ 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <xQueueReceive+0x32>
	__asm volatile
 8004c76:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	623b      	str	r3, [r7, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x40>
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueReceive+0x44>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueReceive+0x46>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xQueueReceive+0x62>
	__asm volatile
 8004ca6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61fb      	str	r3, [r7, #28]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cbe:	f001 f875 	bl	8005dac <xTaskGetSchedulerState>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <xQueueReceive+0x72>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <xQueueReceive+0x76>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <xQueueReceive+0x78>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xQueueReceive+0x94>
	__asm volatile
 8004cd8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61bb      	str	r3, [r7, #24]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf0:	f001 fdca 	bl	8006888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01f      	beq.n	8004d40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d04:	f000 f8f6 	bl	8004ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	1e5a      	subs	r2, r3, #1
 8004d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00f      	beq.n	8004d38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	3310      	adds	r3, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fe7f 	bl	8005a20 <xTaskRemoveFromEventList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b3c      	ldr	r3, [pc, #240]	@ (8004e1c <xQueueReceive+0x1c0>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d38:	f001 fdd8 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e069      	b.n	8004e14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d46:	f001 fdd1 	bl	80068ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e062      	b.n	8004e14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d54:	f107 0310 	add.w	r3, r7, #16
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fec5 	bl	8005ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d62:	f001 fdc3 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d66:	f000 fc2d 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d6a:	f001 fd8d 	bl	8006888 <vPortEnterCritical>
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d103      	bne.n	8004d84 <xQueueReceive+0x128>
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d103      	bne.n	8004d9a <xQueueReceive+0x13e>
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d9a:	f001 fda7 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d9e:	1d3a      	adds	r2, r7, #4
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 feb4 	bl	8005b14 <xTaskCheckForTimeOut>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d123      	bne.n	8004dfa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db4:	f000 f916 	bl	8004fe4 <prvIsQueueEmpty>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	3324      	adds	r3, #36	@ 0x24
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fdd8 	bl	800597c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dce:	f000 f8b7 	bl	8004f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dd2:	f000 fc05 	bl	80055e0 <xTaskResumeAll>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d189      	bne.n	8004cf0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e1c <xQueueReceive+0x1c0>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	e780      	b.n	8004cf0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004df0:	f000 f8a6 	bl	8004f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004df4:	f000 fbf4 	bl	80055e0 <xTaskResumeAll>
 8004df8:	e77a      	b.n	8004cf0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dfc:	f000 f8a0 	bl	8004f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e00:	f000 fbee 	bl	80055e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e06:	f000 f8ed 	bl	8004fe4 <prvIsQueueEmpty>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f43f af6f 	beq.w	8004cf0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3730      	adds	r7, #48	@ 0x30
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d14d      	bne.n	8004ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ffcc 	bl	8005de8 <xTaskPriorityDisinherit>
 8004e50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e043      	b.n	8004ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d119      	bne.n	8004e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6858      	ldr	r0, [r3, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	f002 faff 	bl	800746e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d32b      	bcc.n	8004ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e026      	b.n	8004ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68d8      	ldr	r0, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	f002 fae5 	bl	800746e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	425b      	negs	r3, r3
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d207      	bcs.n	8004ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	425b      	negs	r3, r3
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d105      	bne.n	8004ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004eea:	697b      	ldr	r3, [r7, #20]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d018      	beq.n	8004f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	441a      	add	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d303      	bcc.n	8004f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68d9      	ldr	r1, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	461a      	mov	r2, r3
 8004f32:	6838      	ldr	r0, [r7, #0]
 8004f34:	f002 fa9b 	bl	800746e <memcpy>
	}
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f48:	f001 fc9e 	bl	8006888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f54:	e011      	b.n	8004f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d012      	beq.n	8004f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3324      	adds	r3, #36	@ 0x24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd5c 	bl	8005a20 <xTaskRemoveFromEventList>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f6e:	f000 fe35 	bl	8005bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dce9      	bgt.n	8004f56 <prvUnlockQueue+0x16>
 8004f82:	e000      	b.n	8004f86 <prvUnlockQueue+0x46>
					break;
 8004f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	22ff      	movs	r2, #255	@ 0xff
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f8e:	f001 fcad 	bl	80068ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f92:	f001 fc79 	bl	8006888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f9e:	e011      	b.n	8004fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3310      	adds	r3, #16
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fd37 	bl	8005a20 <xTaskRemoveFromEventList>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fb8:	f000 fe10 	bl	8005bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dce9      	bgt.n	8004fa0 <prvUnlockQueue+0x60>
 8004fcc:	e000      	b.n	8004fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	22ff      	movs	r2, #255	@ 0xff
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fd8:	f001 fc88 	bl	80068ec <vPortExitCritical>
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fec:	f001 fc4c 	bl	8006888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e001      	b.n	8005002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005002:	f001 fc73 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005018:	f001 fc36 	bl	8006888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	429a      	cmp	r2, r3
 8005026:	d102      	bne.n	800502e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005028:	2301      	movs	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e001      	b.n	8005032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005032:	f001 fc5b 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e014      	b.n	800507a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005050:	4a0f      	ldr	r2, [pc, #60]	@ (8005090 <vQueueAddToRegistry+0x50>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800505c:	490c      	ldr	r1, [pc, #48]	@ (8005090 <vQueueAddToRegistry+0x50>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <vQueueAddToRegistry+0x50>)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005072:	e006      	b.n	8005082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b07      	cmp	r3, #7
 800507e:	d9e7      	bls.n	8005050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000998 	.word	0x20000998

08005094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050a4:	f001 fbf0 	bl	8006888 <vPortEnterCritical>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d103      	bne.n	80050be <vQueueWaitForMessageRestricted+0x2a>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d103      	bne.n	80050d4 <vQueueWaitForMessageRestricted+0x40>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d4:	f001 fc0a 	bl	80068ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3324      	adds	r3, #36	@ 0x24
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fc6d 	bl	80059c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7ff ff26 	bl	8004f40 <prvUnlockQueue>
	}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08e      	sub	sp, #56	@ 0x38
 8005100:	af04      	add	r7, sp, #16
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800510a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005110:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	623b      	str	r3, [r7, #32]
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <xTaskCreateStatic+0x4a>
	__asm volatile
 800512e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	61fb      	str	r3, [r7, #28]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005146:	23a8      	movs	r3, #168	@ 0xa8
 8005148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2ba8      	cmp	r3, #168	@ 0xa8
 800514e:	d00b      	beq.n	8005168 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005150:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	61bb      	str	r3, [r7, #24]
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01e      	beq.n	80051ae <xTaskCreateStatic+0xb2>
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01b      	beq.n	80051ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2202      	movs	r2, #2
 8005184:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005188:	2300      	movs	r3, #0
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f851 	bl	8005248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051a8:	f000 f8f6 	bl	8005398 <prvAddNewTaskToReadyList>
 80051ac:	e001      	b.n	80051b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051b2:	697b      	ldr	r3, [r7, #20]
	}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	@ 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	@ 0x30
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fc7b 	bl	8006acc <pvPortMalloc>
 80051d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051de:	20a8      	movs	r0, #168	@ 0xa8
 80051e0:	f001 fc74 	bl	8006acc <pvPortMalloc>
 80051e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051f2:	e005      	b.n	8005200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	f001 fd37 	bl	8006c68 <vPortFree>
 80051fa:	e001      	b.n	8005200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d017      	beq.n	8005236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	2300      	movs	r3, #0
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f80f 	bl	8005248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800522a:	69f8      	ldr	r0, [r7, #28]
 800522c:	f000 f8b4 	bl	8005398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e002      	b.n	800523c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800523c:	69bb      	ldr	r3, [r7, #24]
	}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	461a      	mov	r2, r3
 8005260:	21a5      	movs	r1, #165	@ 0xa5
 8005262:	f002 f82b 	bl	80072bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005270:	3b01      	subs	r3, #1
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800528a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	617b      	str	r3, [r7, #20]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01f      	beq.n	80052e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e012      	b.n	80052d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	7819      	ldrb	r1, [r3, #0]
 80052b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	3334      	adds	r3, #52	@ 0x34
 80052be:	460a      	mov	r2, r1
 80052c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3301      	adds	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d9e9      	bls.n	80052ae <prvInitialiseNewTask+0x66>
 80052da:	e000      	b.n	80052de <prvInitialiseNewTask+0x96>
			{
				break;
 80052dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052e6:	e003      	b.n	80052f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	2b37      	cmp	r3, #55	@ 0x37
 80052f4:	d901      	bls.n	80052fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052f6:	2337      	movs	r3, #55	@ 0x37
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005304:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	3304      	adds	r3, #4
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff f965 	bl	80045e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	3318      	adds	r3, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff f960 	bl	80045e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005324:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	2200      	movs	r2, #0
 800533a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	2200      	movs	r2, #0
 8005342:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	3354      	adds	r3, #84	@ 0x54
 800534a:	224c      	movs	r2, #76	@ 0x4c
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f001 ffb4 	bl	80072bc <memset>
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	4a0d      	ldr	r2, [pc, #52]	@ (800538c <prvInitialiseNewTask+0x144>)
 8005358:	659a      	str	r2, [r3, #88]	@ 0x58
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	4a0c      	ldr	r2, [pc, #48]	@ (8005390 <prvInitialiseNewTask+0x148>)
 800535e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <prvInitialiseNewTask+0x14c>)
 8005364:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	69b8      	ldr	r0, [r7, #24]
 800536c:	f001 f95a 	bl	8006624 <pxPortInitialiseStack>
 8005370:	4602      	mov	r2, r0
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005382:	bf00      	nop
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	2000855c 	.word	0x2000855c
 8005390:	200085c4 	.word	0x200085c4
 8005394:	2000862c 	.word	0x2000862c

08005398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a0:	f001 fa72 	bl	8006888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053a4:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a2c      	ldr	r2, [pc, #176]	@ (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d110      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053c4:	f000 fc2e 	bl	8005c24 <prvInitialiseTaskLists>
 80053c8:	e00d      	b.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ca:	4b26      	ldr	r3, [pc, #152]	@ (8005464 <prvAddNewTaskToReadyList+0xcc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d802      	bhi.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053e6:	4b20      	ldr	r3, [pc, #128]	@ (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005468 <prvAddNewTaskToReadyList+0xd0>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fc:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <prvAddNewTaskToReadyList+0xd4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <prvAddNewTaskToReadyList+0x74>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a18      	ldr	r2, [pc, #96]	@ (800546c <prvAddNewTaskToReadyList+0xd4>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a15      	ldr	r2, [pc, #84]	@ (8005470 <prvAddNewTaskToReadyList+0xd8>)
 800541a:	441a      	add	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff f8e9 	bl	80045fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005428:	f001 fa60 	bl	80068ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800542c:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <prvAddNewTaskToReadyList+0xcc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005434:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <prvAddNewTaskToReadyList+0xc8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d207      	bcs.n	8005452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <prvAddNewTaskToReadyList+0xdc>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000eac 	.word	0x20000eac
 8005460:	200009d8 	.word	0x200009d8
 8005464:	20000eb8 	.word	0x20000eb8
 8005468:	20000ec8 	.word	0x20000ec8
 800546c:	20000eb4 	.word	0x20000eb4
 8005470:	200009dc 	.word	0x200009dc
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800548a:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <vTaskDelay+0x64>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <vTaskDelay+0x32>
	__asm volatile
 8005492:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60bb      	str	r3, [r7, #8]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054aa:	f000 f88b 	bl	80055c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ae:	2100      	movs	r1, #0
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fd09 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054b6:	f000 f893 	bl	80055e0 <xTaskResumeAll>
 80054ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054c2:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <vTaskDelay+0x68>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000ed4 	.word	0x20000ed4
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	@ 0x28
 80054e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054f2:	463a      	mov	r2, r7
 80054f4:	1d39      	adds	r1, r7, #4
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff f81c 	bl	8004538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	9202      	str	r2, [sp, #8]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	460a      	mov	r2, r1
 8005512:	4924      	ldr	r1, [pc, #144]	@ (80055a4 <vTaskStartScheduler+0xc0>)
 8005514:	4824      	ldr	r0, [pc, #144]	@ (80055a8 <vTaskStartScheduler+0xc4>)
 8005516:	f7ff fdf1 	bl	80050fc <xTaskCreateStatic>
 800551a:	4603      	mov	r3, r0
 800551c:	4a23      	ldr	r2, [pc, #140]	@ (80055ac <vTaskStartScheduler+0xc8>)
 800551e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <vTaskStartScheduler+0xc8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e001      	b.n	8005532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005538:	f000 fd1a 	bl	8005f70 <xTimerCreateTimerTask>
 800553c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d11b      	bne.n	800557c <vTaskStartScheduler+0x98>
	__asm volatile
 8005544:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	613b      	str	r3, [r7, #16]
}
 8005556:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <vTaskStartScheduler+0xcc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3354      	adds	r3, #84	@ 0x54
 800555e:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <vTaskStartScheduler+0xd0>)
 8005560:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <vTaskStartScheduler+0xd4>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800556a:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <vTaskStartScheduler+0xd8>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005570:	4b13      	ldr	r3, [pc, #76]	@ (80055c0 <vTaskStartScheduler+0xdc>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005576:	f001 f8e3 	bl	8006740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800557a:	e00f      	b.n	800559c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d10b      	bne.n	800559c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005584:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <vTaskStartScheduler+0xb4>
}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	08007ef0 	.word	0x08007ef0
 80055a8:	08005bf5 	.word	0x08005bf5
 80055ac:	20000ed0 	.word	0x20000ed0
 80055b0:	200009d8 	.word	0x200009d8
 80055b4:	2000001c 	.word	0x2000001c
 80055b8:	20000ecc 	.word	0x20000ecc
 80055bc:	20000eb8 	.word	0x20000eb8
 80055c0:	20000eb0 	.word	0x20000eb0

080055c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c8:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <vTaskSuspendAll+0x18>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a03      	ldr	r2, [pc, #12]	@ (80055dc <vTaskSuspendAll+0x18>)
 80055d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000ed4 	.word	0x20000ed4

080055e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ee:	4b42      	ldr	r3, [pc, #264]	@ (80056f8 <xTaskResumeAll+0x118>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <xTaskResumeAll+0x2e>
	__asm volatile
 80055f6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	603b      	str	r3, [r7, #0]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800560e:	f001 f93b 	bl	8006888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005612:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <xTaskResumeAll+0x118>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a37      	ldr	r2, [pc, #220]	@ (80056f8 <xTaskResumeAll+0x118>)
 800561a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561c:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <xTaskResumeAll+0x118>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d162      	bne.n	80056ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005624:	4b35      	ldr	r3, [pc, #212]	@ (80056fc <xTaskResumeAll+0x11c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05e      	beq.n	80056ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562c:	e02f      	b.n	800568e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562e:	4b34      	ldr	r3, [pc, #208]	@ (8005700 <xTaskResumeAll+0x120>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3318      	adds	r3, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f83a 	bl	80046b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff f835 	bl	80046b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	4b2d      	ldr	r3, [pc, #180]	@ (8005704 <xTaskResumeAll+0x124>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d903      	bls.n	800565e <xTaskResumeAll+0x7e>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	4a2a      	ldr	r2, [pc, #168]	@ (8005704 <xTaskResumeAll+0x124>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a27      	ldr	r2, [pc, #156]	@ (8005708 <xTaskResumeAll+0x128>)
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7fe ffc0 	bl	80045fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	4b23      	ldr	r3, [pc, #140]	@ (800570c <xTaskResumeAll+0x12c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005688:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <xTaskResumeAll+0x130>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568e:	4b1c      	ldr	r3, [pc, #112]	@ (8005700 <xTaskResumeAll+0x120>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cb      	bne.n	800562e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800569c:	f000 fb66 	bl	8005d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005714 <xTaskResumeAll+0x134>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ac:	f000 f846 	bl	800573c <xTaskIncrementTick>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80056b6:	4b16      	ldr	r3, [pc, #88]	@ (8005710 <xTaskResumeAll+0x130>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f1      	bne.n	80056ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80056c8:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <xTaskResumeAll+0x134>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ce:	4b10      	ldr	r3, [pc, #64]	@ (8005710 <xTaskResumeAll+0x130>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <xTaskResumeAll+0x138>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ea:	f001 f8ff 	bl	80068ec <vPortExitCritical>

	return xAlreadyYielded;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000ed4 	.word	0x20000ed4
 80056fc:	20000eac 	.word	0x20000eac
 8005700:	20000e6c 	.word	0x20000e6c
 8005704:	20000eb4 	.word	0x20000eb4
 8005708:	200009dc 	.word	0x200009dc
 800570c:	200009d8 	.word	0x200009d8
 8005710:	20000ec0 	.word	0x20000ec0
 8005714:	20000ebc 	.word	0x20000ebc
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005722:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <xTaskGetTickCount+0x1c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005728:	687b      	ldr	r3, [r7, #4]
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000eb0 	.word	0x20000eb0

0800573c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005746:	4b4f      	ldr	r3, [pc, #316]	@ (8005884 <xTaskIncrementTick+0x148>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 8090 	bne.w	8005870 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005750:	4b4d      	ldr	r3, [pc, #308]	@ (8005888 <xTaskIncrementTick+0x14c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005758:	4a4b      	ldr	r2, [pc, #300]	@ (8005888 <xTaskIncrementTick+0x14c>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d121      	bne.n	80057a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005764:	4b49      	ldr	r3, [pc, #292]	@ (800588c <xTaskIncrementTick+0x150>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <xTaskIncrementTick+0x4a>
	__asm volatile
 800576e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <xTaskIncrementTick+0x46>
 8005786:	4b41      	ldr	r3, [pc, #260]	@ (800588c <xTaskIncrementTick+0x150>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	4b40      	ldr	r3, [pc, #256]	@ (8005890 <xTaskIncrementTick+0x154>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3e      	ldr	r2, [pc, #248]	@ (800588c <xTaskIncrementTick+0x150>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4a3e      	ldr	r2, [pc, #248]	@ (8005890 <xTaskIncrementTick+0x154>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <xTaskIncrementTick+0x158>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005894 <xTaskIncrementTick+0x158>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	f000 fae2 	bl	8005d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <xTaskIncrementTick+0x15c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d349      	bcc.n	8005846 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	4b36      	ldr	r3, [pc, #216]	@ (800588c <xTaskIncrementTick+0x150>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	4b36      	ldr	r3, [pc, #216]	@ (8005898 <xTaskIncrementTick+0x15c>)
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	601a      	str	r2, [r3, #0]
					break;
 80057c4:	e03f      	b.n	8005846 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b31      	ldr	r3, [pc, #196]	@ (800588c <xTaskIncrementTick+0x150>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d203      	bcs.n	80057e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057de:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <xTaskIncrementTick+0x15c>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057e4:	e02f      	b.n	8005846 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe ff62 	bl	80046b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3318      	adds	r3, #24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe ff59 	bl	80046b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005806:	4b25      	ldr	r3, [pc, #148]	@ (800589c <xTaskIncrementTick+0x160>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d903      	bls.n	8005816 <xTaskIncrementTick+0xda>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	4a22      	ldr	r2, [pc, #136]	@ (800589c <xTaskIncrementTick+0x160>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <xTaskIncrementTick+0x164>)
 8005824:	441a      	add	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fe fee4 	bl	80045fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005836:	4b1b      	ldr	r3, [pc, #108]	@ (80058a4 <xTaskIncrementTick+0x168>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	429a      	cmp	r2, r3
 800583e:	d3b8      	bcc.n	80057b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005844:	e7b5      	b.n	80057b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005846:	4b17      	ldr	r3, [pc, #92]	@ (80058a4 <xTaskIncrementTick+0x168>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584c:	4914      	ldr	r1, [pc, #80]	@ (80058a0 <xTaskIncrementTick+0x164>)
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d901      	bls.n	8005862 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005862:	4b11      	ldr	r3, [pc, #68]	@ (80058a8 <xTaskIncrementTick+0x16c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800586a:	2301      	movs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e004      	b.n	800587a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005870:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <xTaskIncrementTick+0x170>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a0d      	ldr	r2, [pc, #52]	@ (80058ac <xTaskIncrementTick+0x170>)
 8005878:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800587a:	697b      	ldr	r3, [r7, #20]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000ed4 	.word	0x20000ed4
 8005888:	20000eb0 	.word	0x20000eb0
 800588c:	20000e64 	.word	0x20000e64
 8005890:	20000e68 	.word	0x20000e68
 8005894:	20000ec4 	.word	0x20000ec4
 8005898:	20000ecc 	.word	0x20000ecc
 800589c:	20000eb4 	.word	0x20000eb4
 80058a0:	200009dc 	.word	0x200009dc
 80058a4:	200009d8 	.word	0x200009d8
 80058a8:	20000ec0 	.word	0x20000ec0
 80058ac:	20000ebc 	.word	0x20000ebc

080058b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <vTaskSwitchContext+0xb4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058be:	4b2a      	ldr	r3, [pc, #168]	@ (8005968 <vTaskSwitchContext+0xb8>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058c4:	e047      	b.n	8005956 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80058c6:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <vTaskSwitchContext+0xb8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b27      	ldr	r3, [pc, #156]	@ (800596c <vTaskSwitchContext+0xbc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e011      	b.n	80058f8 <vTaskSwitchContext+0x48>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80058da:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <vTaskSwitchContext+0x3e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	491d      	ldr	r1, [pc, #116]	@ (8005970 <vTaskSwitchContext+0xc0>)
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0e3      	beq.n	80058d4 <vTaskSwitchContext+0x24>
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <vTaskSwitchContext+0xc0>)
 8005918:	4413      	add	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	3308      	adds	r3, #8
 800592e:	429a      	cmp	r2, r3
 8005930:	d104      	bne.n	800593c <vTaskSwitchContext+0x8c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	4a0c      	ldr	r2, [pc, #48]	@ (8005974 <vTaskSwitchContext+0xc4>)
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4a09      	ldr	r2, [pc, #36]	@ (800596c <vTaskSwitchContext+0xbc>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800594c:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <vTaskSwitchContext+0xc4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3354      	adds	r3, #84	@ 0x54
 8005952:	4a09      	ldr	r2, [pc, #36]	@ (8005978 <vTaskSwitchContext+0xc8>)
 8005954:	6013      	str	r3, [r2, #0]
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000ed4 	.word	0x20000ed4
 8005968:	20000ec0 	.word	0x20000ec0
 800596c:	20000eb4 	.word	0x20000eb4
 8005970:	200009dc 	.word	0x200009dc
 8005974:	200009d8 	.word	0x200009d8
 8005978:	2000001c 	.word	0x2000001c

0800597c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800598c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60fb      	str	r3, [r7, #12]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059a4:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <vTaskPlaceOnEventList+0x48>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3318      	adds	r3, #24
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fe fe48 	bl	8004642 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059b2:	2101      	movs	r1, #1
 80059b4:	6838      	ldr	r0, [r7, #0]
 80059b6:	f000 fa87 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	200009d8 	.word	0x200009d8

080059c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80059da:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	617b      	str	r3, [r7, #20]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059f2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <vTaskPlaceOnEventListRestricted+0x54>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3318      	adds	r3, #24
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7fe fdfd 	bl	80045fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	68b8      	ldr	r0, [r7, #8]
 8005a10:	f000 fa5a 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
	}
 8005a14:	bf00      	nop
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200009d8 	.word	0x200009d8

08005a20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a36:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	60fb      	str	r3, [r7, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3318      	adds	r3, #24
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fe2e 	bl	80046b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a58:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <xTaskRemoveFromEventList+0xb0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fe25 	bl	80046b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <xTaskRemoveFromEventList+0xb4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d903      	bls.n	8005a7e <xTaskRemoveFromEventList+0x5e>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a16      	ldr	r2, [pc, #88]	@ (8005ad4 <xTaskRemoveFromEventList+0xb4>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a13      	ldr	r2, [pc, #76]	@ (8005ad8 <xTaskRemoveFromEventList+0xb8>)
 8005a8c:	441a      	add	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe fdb0 	bl	80045fa <vListInsertEnd>
 8005a9a:	e005      	b.n	8005aa8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	480e      	ldr	r0, [pc, #56]	@ (8005adc <xTaskRemoveFromEventList+0xbc>)
 8005aa4:	f7fe fda9 	bl	80045fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <xTaskRemoveFromEventList+0xc0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d905      	bls.n	8005ac2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <xTaskRemoveFromEventList+0xc4>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e001      	b.n	8005ac6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000ed4 	.word	0x20000ed4
 8005ad4:	20000eb4 	.word	0x20000eb4
 8005ad8:	200009dc 	.word	0x200009dc
 8005adc:	20000e6c 	.word	0x20000e6c
 8005ae0:	200009d8 	.word	0x200009d8
 8005ae4:	20000ec0 	.word	0x20000ec0

08005ae8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <vTaskInternalSetTimeOutState+0x24>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005af8:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <vTaskInternalSetTimeOutState+0x28>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	20000ec4 	.word	0x20000ec4
 8005b10:	20000eb0 	.word	0x20000eb0

08005b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b24:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b42:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60fb      	str	r3, [r7, #12]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b5a:	f000 fe95 	bl	8006888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd4 <xTaskCheckForTimeOut+0xc0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d102      	bne.n	8005b7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e023      	b.n	8005bc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <xTaskCheckForTimeOut+0xc4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d007      	beq.n	8005b9a <xTaskCheckForTimeOut+0x86>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d302      	bcc.n	8005b9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e015      	b.n	8005bc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d20b      	bcs.n	8005bbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff99 	bl	8005ae8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e004      	b.n	8005bc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bc6:	f000 fe91 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005bca:	69fb      	ldr	r3, [r7, #28]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000eb0 	.word	0x20000eb0
 8005bd8:	20000ec4 	.word	0x20000ec4

08005bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005be0:	4b03      	ldr	r3, [pc, #12]	@ (8005bf0 <vTaskMissedYield+0x14>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000ec0 	.word	0x20000ec0

08005bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bfc:	f000 f852 	bl	8005ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <prvIdleTask+0x28>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d9f9      	bls.n	8005bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <prvIdleTask+0x2c>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c18:	e7f0      	b.n	8005bfc <prvIdleTask+0x8>
 8005c1a:	bf00      	nop
 8005c1c:	200009dc 	.word	0x200009dc
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	e00c      	b.n	8005c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a12      	ldr	r2, [pc, #72]	@ (8005c84 <prvInitialiseTaskLists+0x60>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fcae 	bl	80045a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3301      	adds	r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b37      	cmp	r3, #55	@ 0x37
 8005c4e:	d9ef      	bls.n	8005c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c50:	480d      	ldr	r0, [pc, #52]	@ (8005c88 <prvInitialiseTaskLists+0x64>)
 8005c52:	f7fe fca5 	bl	80045a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c56:	480d      	ldr	r0, [pc, #52]	@ (8005c8c <prvInitialiseTaskLists+0x68>)
 8005c58:	f7fe fca2 	bl	80045a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c5c:	480c      	ldr	r0, [pc, #48]	@ (8005c90 <prvInitialiseTaskLists+0x6c>)
 8005c5e:	f7fe fc9f 	bl	80045a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c62:	480c      	ldr	r0, [pc, #48]	@ (8005c94 <prvInitialiseTaskLists+0x70>)
 8005c64:	f7fe fc9c 	bl	80045a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c68:	480b      	ldr	r0, [pc, #44]	@ (8005c98 <prvInitialiseTaskLists+0x74>)
 8005c6a:	f7fe fc99 	bl	80045a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <prvInitialiseTaskLists+0x78>)
 8005c70:	4a05      	ldr	r2, [pc, #20]	@ (8005c88 <prvInitialiseTaskLists+0x64>)
 8005c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <prvInitialiseTaskLists+0x7c>)
 8005c76:	4a05      	ldr	r2, [pc, #20]	@ (8005c8c <prvInitialiseTaskLists+0x68>)
 8005c78:	601a      	str	r2, [r3, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200009dc 	.word	0x200009dc
 8005c88:	20000e3c 	.word	0x20000e3c
 8005c8c:	20000e50 	.word	0x20000e50
 8005c90:	20000e6c 	.word	0x20000e6c
 8005c94:	20000e80 	.word	0x20000e80
 8005c98:	20000e98 	.word	0x20000e98
 8005c9c:	20000e64 	.word	0x20000e64
 8005ca0:	20000e68 	.word	0x20000e68

08005ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005caa:	e019      	b.n	8005ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cac:	f000 fdec 	bl	8006888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <prvCheckTasksWaitingTermination+0x50>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fcf9 	bl	80046b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <prvCheckTasksWaitingTermination+0x54>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8005cf8 <prvCheckTasksWaitingTermination+0x54>)
 8005cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <prvCheckTasksWaitingTermination+0x58>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005cfc <prvCheckTasksWaitingTermination+0x58>)
 8005cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cd6:	f000 fe09 	bl	80068ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f810 	bl	8005d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce0:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <prvCheckTasksWaitingTermination+0x58>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e1      	bne.n	8005cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000e80 	.word	0x20000e80
 8005cf8:	20000eac 	.word	0x20000eac
 8005cfc:	20000e94 	.word	0x20000e94

08005d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3354      	adds	r3, #84	@ 0x54
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 faed 	bl	80072ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 ffa1 	bl	8006c68 <vPortFree>
				vPortFree( pxTCB );
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 ff9e 	bl	8006c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d2c:	e019      	b.n	8005d62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d103      	bne.n	8005d40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 ff95 	bl	8006c68 <vPortFree>
	}
 8005d3e:	e010      	b.n	8005d62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d00b      	beq.n	8005d62 <prvDeleteTCB+0x62>
	__asm volatile
 8005d4a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60fb      	str	r3, [r7, #12]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <prvDeleteTCB+0x5e>
	}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d84:	e008      	b.n	8005d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <prvResetNextTaskUnblockTime+0x38>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a04      	ldr	r2, [pc, #16]	@ (8005da8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20000e64 	.word	0x20000e64
 8005da8:	20000ecc 	.word	0x20000ecc

08005dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <xTaskGetSchedulerState+0x34>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e008      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc0:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <xTaskGetSchedulerState+0x38>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e001      	b.n	8005dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd2:	687b      	ldr	r3, [r7, #4]
	}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000eb8 	.word	0x20000eb8
 8005de4:	20000ed4 	.word	0x20000ed4

08005de8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d058      	beq.n	8005eb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005ebc <xTaskPriorityDisinherit+0xd4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d00b      	beq.n	8005e20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e08:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e28:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60bb      	str	r3, [r7, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d02c      	beq.n	8005eb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d128      	bne.n	8005eb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fc26 	bl	80046b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec0 <xTaskPriorityDisinherit+0xd8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <xTaskPriorityDisinherit+0xa8>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec0 <xTaskPriorityDisinherit+0xd8>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4a09      	ldr	r2, [pc, #36]	@ (8005ec4 <xTaskPriorityDisinherit+0xdc>)
 8005e9e:	441a      	add	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fe fba7 	bl	80045fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
	}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200009d8 	.word	0x200009d8
 8005ec0:	20000eb4 	.word	0x20000eb4
 8005ec4:	200009dc 	.word	0x200009dc

08005ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b21      	ldr	r3, [pc, #132]	@ (8005f58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed8:	4b20      	ldr	r3, [pc, #128]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fbe8 	bl	80046b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d10a      	bne.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4819      	ldr	r0, [pc, #100]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005efc:	f7fe fb7d 	bl	80045fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f00:	e026      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0a:	4b14      	ldr	r3, [pc, #80]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d209      	bcs.n	8005f2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fe fb8b 	bl	8004642 <vListInsert>
}
 8005f2c:	e010      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe fb81 	bl	8004642 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f40:	4b0a      	ldr	r3, [pc, #40]	@ (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d202      	bcs.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f4a:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000eb0 	.word	0x20000eb0
 8005f5c:	200009d8 	.word	0x200009d8
 8005f60:	20000e98 	.word	0x20000e98
 8005f64:	20000e68 	.word	0x20000e68
 8005f68:	20000e64 	.word	0x20000e64
 8005f6c:	20000ecc 	.word	0x20000ecc

08005f70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	@ 0x28
 8005f74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f7a:	f000 fb13 	bl	80065a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <xTimerCreateTimerTask+0x84>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d021      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f8e:	1d3a      	adds	r2, r7, #4
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fae7 	bl	800456c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	2302      	movs	r3, #2
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4911      	ldr	r1, [pc, #68]	@ (8005ff8 <xTimerCreateTimerTask+0x88>)
 8005fb2:	4812      	ldr	r0, [pc, #72]	@ (8005ffc <xTimerCreateTimerTask+0x8c>)
 8005fb4:	f7ff f8a2 	bl	80050fc <xTaskCreateStatic>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4a11      	ldr	r2, [pc, #68]	@ (8006000 <xTimerCreateTimerTask+0x90>)
 8005fbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fbe:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <xTimerCreateTimerTask+0x90>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005fd0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fe8:	697b      	ldr	r3, [r7, #20]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000f08 	.word	0x20000f08
 8005ff8:	08007ef8 	.word	0x08007ef8
 8005ffc:	0800613d 	.word	0x0800613d
 8006000:	20000f0c 	.word	0x20000f0c

08006004 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006012:	2300      	movs	r3, #0
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xTimerGenericCommand+0x30>
	__asm volatile
 800601c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	623b      	str	r3, [r7, #32]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006034:	4b19      	ldr	r3, [pc, #100]	@ (800609c <xTimerGenericCommand+0x98>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d02a      	beq.n	8006092 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b05      	cmp	r3, #5
 800604c:	dc18      	bgt.n	8006080 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800604e:	f7ff fead 	bl	8005dac <xTaskGetSchedulerState>
 8006052:	4603      	mov	r3, r0
 8006054:	2b02      	cmp	r3, #2
 8006056:	d109      	bne.n	800606c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006058:	4b10      	ldr	r3, [pc, #64]	@ (800609c <xTimerGenericCommand+0x98>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	f107 0110 	add.w	r1, r7, #16
 8006060:	2300      	movs	r3, #0
 8006062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006064:	f7fe fc5a 	bl	800491c <xQueueGenericSend>
 8006068:	6278      	str	r0, [r7, #36]	@ 0x24
 800606a:	e012      	b.n	8006092 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800606c:	4b0b      	ldr	r3, [pc, #44]	@ (800609c <xTimerGenericCommand+0x98>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	f107 0110 	add.w	r1, r7, #16
 8006074:	2300      	movs	r3, #0
 8006076:	2200      	movs	r2, #0
 8006078:	f7fe fc50 	bl	800491c <xQueueGenericSend>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24
 800607e:	e008      	b.n	8006092 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <xTimerGenericCommand+0x98>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	f107 0110 	add.w	r1, r7, #16
 8006088:	2300      	movs	r3, #0
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	f7fe fd48 	bl	8004b20 <xQueueGenericSendFromISR>
 8006090:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	@ 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000f08 	.word	0x20000f08

080060a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b23      	ldr	r3, [pc, #140]	@ (8006138 <prvProcessExpiredTimer+0x98>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fafb 	bl	80046b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d023      	beq.n	8006114 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	18d1      	adds	r1, r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	6978      	ldr	r0, [r7, #20]
 80060da:	f000 f8d5 	bl	8006288 <prvInsertTimerInActiveList>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	2100      	movs	r1, #0
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f7ff ff88 	bl	8006004 <xTimerGenericCommand>
 80060f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d114      	bne.n	8006126 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80060fc:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	6978      	ldr	r0, [r7, #20]
 800612c:	4798      	blx	r3
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000f00 	.word	0x20000f00

0800613c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f859 	bl	8006200 <prvGetNextExpireTime>
 800614e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f805 	bl	8006164 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800615a:	f000 f8d7 	bl	800630c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800615e:	bf00      	nop
 8006160:	e7f0      	b.n	8006144 <prvTimerTask+0x8>
	...

08006164 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800616e:	f7ff fa29 	bl	80055c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f866 	bl	8006248 <prvSampleTimeNow>
 800617c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d130      	bne.n	80061e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <prvProcessTimerOrBlockTask+0x3c>
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d806      	bhi.n	80061a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006192:	f7ff fa25 	bl	80055e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ff81 	bl	80060a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800619e:	e024      	b.n	80061ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061a6:	4b13      	ldr	r3, [pc, #76]	@ (80061f4 <prvProcessTimerOrBlockTask+0x90>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <prvProcessTimerOrBlockTask+0x50>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <prvProcessTimerOrBlockTask+0x52>
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061b8:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <prvProcessTimerOrBlockTask+0x94>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fe ff65 	bl	8005094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ca:	f7ff fa09 	bl	80055e0 <xTaskResumeAll>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <prvProcessTimerOrBlockTask+0x98>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
}
 80061e4:	e001      	b.n	80061ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061e6:	f7ff f9fb 	bl	80055e0 <xTaskResumeAll>
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000f04 	.word	0x20000f04
 80061f8:	20000f08 	.word	0x20000f08
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006208:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <prvGetNextExpireTime+0x44>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <prvGetNextExpireTime+0x16>
 8006212:	2201      	movs	r2, #1
 8006214:	e000      	b.n	8006218 <prvGetNextExpireTime+0x18>
 8006216:	2200      	movs	r2, #0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006224:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <prvGetNextExpireTime+0x44>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e001      	b.n	8006234 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000f00 	.word	0x20000f00

08006248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006250:	f7ff fa64 	bl	800571c <xTaskGetTickCount>
 8006254:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <prvSampleTimeNow+0x3c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d205      	bcs.n	800626c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006260:	f000 f93a 	bl	80064d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e002      	b.n	8006272 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006272:	4a04      	ldr	r2, [pc, #16]	@ (8006284 <prvSampleTimeNow+0x3c>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006278:	68fb      	ldr	r3, [r7, #12]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000f10 	.word	0x20000f10

08006288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d812      	bhi.n	80062d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e01b      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <prvInsertTimerInActiveList+0x7c>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f7fe f9b8 	bl	8004642 <vListInsert>
 80062d2:	e012      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d206      	bcs.n	80062ea <prvInsertTimerInActiveList+0x62>
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d302      	bcc.n	80062ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e007      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <prvInsertTimerInActiveList+0x80>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f7fe f9a4 	bl	8004642 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062fa:	697b      	ldr	r3, [r7, #20]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000f04 	.word	0x20000f04
 8006308:	20000f00 	.word	0x20000f00

0800630c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	@ 0x38
 8006310:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006312:	e0ce      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da19      	bge.n	800634e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	3304      	adds	r3, #4
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006326:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61fb      	str	r3, [r7, #28]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006344:	6850      	ldr	r0, [r2, #4]
 8006346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	4611      	mov	r1, r2
 800634c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f2c0 80ae 	blt.w	80064b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe f9a4 	bl	80046b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800636c:	463b      	mov	r3, r7
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff ff6a 	bl	8006248 <prvSampleTimeNow>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b09      	cmp	r3, #9
 800637a:	f200 8097 	bhi.w	80064ac <prvProcessReceivedCommands+0x1a0>
 800637e:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <prvProcessReceivedCommands+0x78>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063ad 	.word	0x080063ad
 8006390:	08006423 	.word	0x08006423
 8006394:	08006437 	.word	0x08006437
 8006398:	08006483 	.word	0x08006483
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063ad 	.word	0x080063ad
 80063a4:	08006423 	.word	0x08006423
 80063a8:	08006437 	.word	0x08006437
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	18d1      	adds	r1, r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063cc:	f7ff ff5c 	bl	8006288 <prvInsertTimerInActiveList>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d06c      	beq.n	80064b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d061      	beq.n	80064b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	441a      	add	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2300      	movs	r3, #0
 80063fa:	2100      	movs	r1, #0
 80063fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063fe:	f7ff fe01 	bl	8006004 <xTimerGenericCommand>
 8006402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d152      	bne.n	80064b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800640a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	61bb      	str	r3, [r7, #24]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006430:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006434:	e03d      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	b2da      	uxtb	r2, r3
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006456:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	617b      	str	r3, [r7, #20]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	18d1      	adds	r1, r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800647a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800647c:	f7ff ff04 	bl	8006288 <prvInsertTimerInActiveList>
					break;
 8006480:	e017      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006492:	f000 fbe9 	bl	8006c68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006496:	e00c      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80064aa:	e002      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80064b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064b2:	4b08      	ldr	r3, [pc, #32]	@ (80064d4 <prvProcessReceivedCommands+0x1c8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	1d39      	adds	r1, r7, #4
 80064b8:	2200      	movs	r2, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fbce 	bl	8004c5c <xQueueReceive>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f47f af26 	bne.w	8006314 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	3730      	adds	r7, #48	@ 0x30
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000f08 	.word	0x20000f08

080064d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064de:	e049      	b.n	8006574 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064e0:	4b2e      	ldr	r3, [pc, #184]	@ (800659c <prvSwitchTimerLists+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ea:	4b2c      	ldr	r3, [pc, #176]	@ (800659c <prvSwitchTimerLists+0xc4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe f8db 	bl	80046b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d02f      	beq.n	8006574 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d90e      	bls.n	8006544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006532:	4b1a      	ldr	r3, [pc, #104]	@ (800659c <prvSwitchTimerLists+0xc4>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fe f880 	bl	8004642 <vListInsert>
 8006542:	e017      	b.n	8006574 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006544:	2300      	movs	r3, #0
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	2100      	movs	r1, #0
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fd58 	bl	8006004 <xTimerGenericCommand>
 8006554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800655c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	603b      	str	r3, [r7, #0]
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <prvSwitchTimerLists+0xc4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1b0      	bne.n	80064e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <prvSwitchTimerLists+0xc4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006584:	4b06      	ldr	r3, [pc, #24]	@ (80065a0 <prvSwitchTimerLists+0xc8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a04      	ldr	r2, [pc, #16]	@ (800659c <prvSwitchTimerLists+0xc4>)
 800658a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800658c:	4a04      	ldr	r2, [pc, #16]	@ (80065a0 <prvSwitchTimerLists+0xc8>)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6013      	str	r3, [r2, #0]
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000f00 	.word	0x20000f00
 80065a0:	20000f04 	.word	0x20000f04

080065a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065aa:	f000 f96d 	bl	8006888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065ae:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <prvCheckForValidListAndQueue+0x60>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d120      	bne.n	80065f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065b6:	4814      	ldr	r0, [pc, #80]	@ (8006608 <prvCheckForValidListAndQueue+0x64>)
 80065b8:	f7fd fff2 	bl	80045a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065bc:	4813      	ldr	r0, [pc, #76]	@ (800660c <prvCheckForValidListAndQueue+0x68>)
 80065be:	f7fd ffef 	bl	80045a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065c2:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <prvCheckForValidListAndQueue+0x6c>)
 80065c4:	4a10      	ldr	r2, [pc, #64]	@ (8006608 <prvCheckForValidListAndQueue+0x64>)
 80065c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065c8:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <prvCheckForValidListAndQueue+0x70>)
 80065ca:	4a10      	ldr	r2, [pc, #64]	@ (800660c <prvCheckForValidListAndQueue+0x68>)
 80065cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065ce:	2300      	movs	r3, #0
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <prvCheckForValidListAndQueue+0x74>)
 80065d4:	4a11      	ldr	r2, [pc, #68]	@ (800661c <prvCheckForValidListAndQueue+0x78>)
 80065d6:	2110      	movs	r1, #16
 80065d8:	200a      	movs	r0, #10
 80065da:	f7fe f8ff 	bl	80047dc <xQueueGenericCreateStatic>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a08      	ldr	r2, [pc, #32]	@ (8006604 <prvCheckForValidListAndQueue+0x60>)
 80065e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065e4:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <prvCheckForValidListAndQueue+0x60>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065ec:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <prvCheckForValidListAndQueue+0x60>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	490b      	ldr	r1, [pc, #44]	@ (8006620 <prvCheckForValidListAndQueue+0x7c>)
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fd24 	bl	8005040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065f8:	f000 f978 	bl	80068ec <vPortExitCritical>
}
 80065fc:	bf00      	nop
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000f08 	.word	0x20000f08
 8006608:	20000ed8 	.word	0x20000ed8
 800660c:	20000eec 	.word	0x20000eec
 8006610:	20000f00 	.word	0x20000f00
 8006614:	20000f04 	.word	0x20000f04
 8006618:	20000fb4 	.word	0x20000fb4
 800661c:	20000f14 	.word	0x20000f14
 8006620:	08007f00 	.word	0x08007f00

08006624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3b04      	subs	r3, #4
 8006634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800663c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b04      	subs	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b04      	subs	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006654:	4a0c      	ldr	r2, [pc, #48]	@ (8006688 <pxPortInitialiseStack+0x64>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3b14      	subs	r3, #20
 800665e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b04      	subs	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f06f 0202 	mvn.w	r2, #2
 8006672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b20      	subs	r3, #32
 8006678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	0800668d 	.word	0x0800668d

0800668c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006696:	4b13      	ldr	r3, [pc, #76]	@ (80066e4 <prvTaskExitError+0x58>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d00b      	beq.n	80066b8 <prvTaskExitError+0x2c>
	__asm volatile
 80066a0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <prvTaskExitError+0x28>
	__asm volatile
 80066b8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60bb      	str	r3, [r7, #8]
}
 80066ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066cc:	bf00      	nop
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0fc      	beq.n	80066ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	2000000c 	.word	0x2000000c
	...

080066f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <pxCurrentTCBConst2>)
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	f380 8809 	msr	PSP, r0
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	4770      	bx	lr
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst2>:
 8006710:	200009d8 	.word	0x200009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006718:	4808      	ldr	r0, [pc, #32]	@ (800673c <prvPortStartFirstTask+0x24>)
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f380 8808 	msr	MSP, r0
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8814 	msr	CONTROL, r0
 800672a:	b662      	cpsie	i
 800672c:	b661      	cpsie	f
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	df00      	svc	0
 8006738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800673a:	bf00      	nop
 800673c:	e000ed08 	.word	0xe000ed08

08006740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006746:	4b47      	ldr	r3, [pc, #284]	@ (8006864 <xPortStartScheduler+0x124>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a47      	ldr	r2, [pc, #284]	@ (8006868 <xPortStartScheduler+0x128>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10b      	bne.n	8006768 <xPortStartScheduler+0x28>
	__asm volatile
 8006750:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006768:	4b3e      	ldr	r3, [pc, #248]	@ (8006864 <xPortStartScheduler+0x124>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a3f      	ldr	r2, [pc, #252]	@ (800686c <xPortStartScheduler+0x12c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10b      	bne.n	800678a <xPortStartScheduler+0x4a>
	__asm volatile
 8006772:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	613b      	str	r3, [r7, #16]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800678a:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <xPortStartScheduler+0x130>)
 800678c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	22ff      	movs	r2, #255	@ 0xff
 800679a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b31      	ldr	r3, [pc, #196]	@ (8006874 <xPortStartScheduler+0x134>)
 80067b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067b2:	4b31      	ldr	r3, [pc, #196]	@ (8006878 <xPortStartScheduler+0x138>)
 80067b4:	2207      	movs	r2, #7
 80067b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067b8:	e009      	b.n	80067ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80067ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006878 <xPortStartScheduler+0x138>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006878 <xPortStartScheduler+0x138>)
 80067c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d6:	2b80      	cmp	r3, #128	@ 0x80
 80067d8:	d0ef      	beq.n	80067ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <xPortStartScheduler+0x138>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f1c3 0307 	rsb	r3, r3, #7
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d00b      	beq.n	80067fe <xPortStartScheduler+0xbe>
	__asm volatile
 80067e6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60bb      	str	r3, [r7, #8]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006878 <xPortStartScheduler+0x138>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4a1c      	ldr	r2, [pc, #112]	@ (8006878 <xPortStartScheduler+0x138>)
 8006806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006808:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <xPortStartScheduler+0x138>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006810:	4a19      	ldr	r2, [pc, #100]	@ (8006878 <xPortStartScheduler+0x138>)
 8006812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <xPortStartScheduler+0x13c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	@ (800687c <xPortStartScheduler+0x13c>)
 8006822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006828:	4b14      	ldr	r3, [pc, #80]	@ (800687c <xPortStartScheduler+0x13c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a13      	ldr	r2, [pc, #76]	@ (800687c <xPortStartScheduler+0x13c>)
 800682e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006834:	f000 f8da 	bl	80069ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006838:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <xPortStartScheduler+0x140>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800683e:	f000 f8f9 	bl	8006a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <xPortStartScheduler+0x144>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0f      	ldr	r2, [pc, #60]	@ (8006884 <xPortStartScheduler+0x144>)
 8006848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800684c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800684e:	f7ff ff63 	bl	8006718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006852:	f7ff f82d 	bl	80058b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006856:	f7ff ff19 	bl	800668c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e000ed00 	.word	0xe000ed00
 8006868:	410fc271 	.word	0x410fc271
 800686c:	410fc270 	.word	0x410fc270
 8006870:	e000e400 	.word	0xe000e400
 8006874:	20001004 	.word	0x20001004
 8006878:	20001008 	.word	0x20001008
 800687c:	e000ed20 	.word	0xe000ed20
 8006880:	2000000c 	.word	0x2000000c
 8006884:	e000ef34 	.word	0xe000ef34

08006888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	4a0e      	ldr	r2, [pc, #56]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068ac:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068b4:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <vPortEnterCritical+0x60>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80068be:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	603b      	str	r3, [r7, #0]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <vPortEnterCritical+0x4a>
	}
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068f2:	4b12      	ldr	r3, [pc, #72]	@ (800693c <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <vPortExitCritical+0x26>
	__asm volatile
 80068fa:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	e7fd      	b.n	800690e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <vPortExitCritical+0x50>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a08      	ldr	r2, [pc, #32]	@ (800693c <vPortExitCritical+0x50>)
 800691a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <vPortExitCritical+0x50>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <vPortExitCritical+0x44>
 8006924:	2300      	movs	r3, #0
 8006926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f383 8811 	msr	BASEPRI, r3
}
 800692e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	2000000c 	.word	0x2000000c

08006940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006940:	f3ef 8009 	mrs	r0, PSP
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <pxCurrentTCBConst>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f01e 0f10 	tst.w	lr, #16
 8006950:	bf08      	it	eq
 8006952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	6010      	str	r0, [r2, #0]
 800695c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006960:	f04f 0030 	mov.w	r0, #48	@ 0x30
 8006964:	f380 8811 	msr	BASEPRI, r0
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f7fe ff9e 	bl	80058b0 <vTaskSwitchContext>
 8006974:	f04f 0000 	mov.w	r0, #0
 8006978:	f380 8811 	msr	BASEPRI, r0
 800697c:	bc09      	pop	{r0, r3}
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6808      	ldr	r0, [r1, #0]
 8006982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006986:	f01e 0f10 	tst.w	lr, #16
 800698a:	bf08      	it	eq
 800698c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006990:	f380 8809 	msr	PSP, r0
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst>:
 80069a0:	200009d8 	.word	0x200009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	__asm volatile
 80069ae:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
}
 80069c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069c2:	f7fe febb 	bl	800573c <xTaskIncrementTick>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <xPortSysTickHandler+0x40>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
}
 80069de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <vPortSetupTimerInterrupt+0x34>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <vPortSetupTimerInterrupt+0x38>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <vPortSetupTimerInterrupt+0x3c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	@ (8006a2c <vPortSetupTimerInterrupt+0x40>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	4a09      	ldr	r2, [pc, #36]	@ (8006a30 <vPortSetupTimerInterrupt+0x44>)
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a0e:	4b04      	ldr	r3, [pc, #16]	@ (8006a20 <vPortSetupTimerInterrupt+0x34>)
 8006a10:	2207      	movs	r2, #7
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e010 	.word	0xe000e010
 8006a24:	e000e018 	.word	0xe000e018
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	10624dd3 	.word	0x10624dd3
 8006a30:	e000e014 	.word	0xe000e014

08006a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a44 <vPortEnableVFP+0x10>
 8006a38:	6801      	ldr	r1, [r0, #0]
 8006a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a3e:	6001      	str	r1, [r0, #0]
 8006a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a42:	bf00      	nop
 8006a44:	e000ed88 	.word	0xe000ed88

08006a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a4e:	f3ef 8305 	mrs	r3, IPSR
 8006a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d915      	bls.n	8006a86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a5a:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <vPortValidateInterruptPriority+0x74>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a64:	4b16      	ldr	r3, [pc, #88]	@ (8006ac0 <vPortValidateInterruptPriority+0x78>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	7afa      	ldrb	r2, [r7, #11]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d20b      	bcs.n	8006a86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a6e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac4 <vPortValidateInterruptPriority+0x7c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <vPortValidateInterruptPriority+0x80>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d90b      	bls.n	8006aae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a96:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	603b      	str	r3, [r7, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <vPortValidateInterruptPriority+0x62>
	}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000e3f0 	.word	0xe000e3f0
 8006ac0:	20001004 	.word	0x20001004
 8006ac4:	e000ed0c 	.word	0xe000ed0c
 8006ac8:	20001008 	.word	0x20001008

08006acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	@ 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ad8:	f7fe fd74 	bl	80055c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006adc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c50 <pvPortMalloc+0x184>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ae4:	f000 f924 	bl	8006d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c54 <pvPortMalloc+0x188>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8095 	bne.w	8006c20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01e      	beq.n	8006b3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006afc:	2208      	movs	r2, #8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f023 0307 	bic.w	r3, r3, #7
 8006b14:	3308      	adds	r3, #8
 8006b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <pvPortMalloc+0x6e>
	__asm volatile
 8006b22:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	617b      	str	r3, [r7, #20]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d06f      	beq.n	8006c20 <pvPortMalloc+0x154>
 8006b40:	4b45      	ldr	r3, [pc, #276]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d86a      	bhi.n	8006c20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b4a:	4b44      	ldr	r3, [pc, #272]	@ (8006c5c <pvPortMalloc+0x190>)
 8006b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b4e:	4b43      	ldr	r3, [pc, #268]	@ (8006c5c <pvPortMalloc+0x190>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b54:	e004      	b.n	8006b60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d903      	bls.n	8006b72 <pvPortMalloc+0xa6>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f1      	bne.n	8006b56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b72:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <pvPortMalloc+0x184>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d051      	beq.n	8006c20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4413      	add	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	2308      	movs	r3, #8
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d920      	bls.n	8006be0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <pvPortMalloc+0xfc>
	__asm volatile
 8006bb0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	613b      	str	r3, [r7, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	e7fd      	b.n	8006bc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bda:	69b8      	ldr	r0, [r7, #24]
 8006bdc:	f000 f90a 	bl	8006df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006be0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bee:	4b1a      	ldr	r3, [pc, #104]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <pvPortMalloc+0x194>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d203      	bcs.n	8006c02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bfa:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a18      	ldr	r2, [pc, #96]	@ (8006c60 <pvPortMalloc+0x194>)
 8006c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <pvPortMalloc+0x188>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c16:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <pvPortMalloc+0x198>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a11      	ldr	r2, [pc, #68]	@ (8006c64 <pvPortMalloc+0x198>)
 8006c1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c20:	f7fe fcde 	bl	80055e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <pvPortMalloc+0x17a>
	__asm volatile
 8006c2e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	60fb      	str	r3, [r7, #12]
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	e7fd      	b.n	8006c42 <pvPortMalloc+0x176>
	return pvReturn;
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	@ 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20008544 	.word	0x20008544
 8006c54:	20008558 	.word	0x20008558
 8006c58:	20008548 	.word	0x20008548
 8006c5c:	2000853c 	.word	0x2000853c
 8006c60:	2000854c 	.word	0x2000854c
 8006c64:	20008550 	.word	0x20008550

08006c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d04f      	beq.n	8006d1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4413      	add	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	4b25      	ldr	r3, [pc, #148]	@ (8006d24 <vPortFree+0xbc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <vPortFree+0x46>
	__asm volatile
 8006c96:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60fb      	str	r3, [r7, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <vPortFree+0x66>
	__asm volatile
 8006cb6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <vPortFree+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01e      	beq.n	8006d1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11a      	bne.n	8006d1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <vPortFree+0xbc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cf4:	f7fe fc66 	bl	80055c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <vPortFree+0xc0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	4a09      	ldr	r2, [pc, #36]	@ (8006d28 <vPortFree+0xc0>)
 8006d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f000 f874 	bl	8006df4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <vPortFree+0xc4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a06      	ldr	r2, [pc, #24]	@ (8006d2c <vPortFree+0xc4>)
 8006d14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d16:	f7fe fc63 	bl	80055e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20008558 	.word	0x20008558
 8006d28:	20008548 	.word	0x20008548
 8006d2c:	20008554 	.word	0x20008554

08006d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d36:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d3c:	4b27      	ldr	r3, [pc, #156]	@ (8006ddc <prvHeapInit+0xac>)
 8006d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <prvHeapInit+0xac>)
 8006d60:	4413      	add	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d68:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <prvHeapInit+0xb0>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <prvHeapInit+0xb0>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d92:	4b14      	ldr	r3, [pc, #80]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9a:	4b12      	ldr	r3, [pc, #72]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <prvHeapInit+0xb4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006de8 <prvHeapInit+0xb8>)
 8006dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a09      	ldr	r2, [pc, #36]	@ (8006dec <prvHeapInit+0xbc>)
 8006dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <prvHeapInit+0xc0>)
 8006dca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dce:	601a      	str	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	2000100c 	.word	0x2000100c
 8006de0:	2000853c 	.word	0x2000853c
 8006de4:	20008544 	.word	0x20008544
 8006de8:	2000854c 	.word	0x2000854c
 8006dec:	20008548 	.word	0x20008548
 8006df0:	20008558 	.word	0x20008558

08006df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dfc:	4b28      	ldr	r3, [pc, #160]	@ (8006ea0 <prvInsertBlockIntoFreeList+0xac>)
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x14>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d8f7      	bhi.n	8006e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d108      	bne.n	8006e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d118      	bne.n	8006e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d00d      	beq.n	8006e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e008      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e003      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d002      	beq.n	8006e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2000853c 	.word	0x2000853c
 8006ea4:	20008544 	.word	0x20008544

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6083      	str	r3, [r0, #8]
 8006eb8:	8181      	strh	r1, [r0, #12]
 8006eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ebc:	81c2      	strh	r2, [r0, #14]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	@ 0x5c
 8006ec6:	f000 f9f9 	bl	80072bc <memset>
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <std+0x58>)
 8006ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ece:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <std+0x5c>)
 8006ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <std+0x60>)
 8006ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x64>)
 8006ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <std+0x68>)
 8006edc:	6224      	str	r4, [r4, #32]
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d006      	beq.n	8006ef0 <std+0x48>
 8006ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ee6:	4294      	cmp	r4, r2
 8006ee8:	d002      	beq.n	8006ef0 <std+0x48>
 8006eea:	33d0      	adds	r3, #208	@ 0xd0
 8006eec:	429c      	cmp	r4, r3
 8006eee:	d105      	bne.n	8006efc <std+0x54>
 8006ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f000 bab6 	b.w	8007468 <__retarget_lock_init_recursive>
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	0800710d 	.word	0x0800710d
 8006f04:	0800712f 	.word	0x0800712f
 8006f08:	08007167 	.word	0x08007167
 8006f0c:	0800718b 	.word	0x0800718b
 8006f10:	2000855c 	.word	0x2000855c

08006f14 <stdio_exit_handler>:
 8006f14:	4a02      	ldr	r2, [pc, #8]	@ (8006f20 <stdio_exit_handler+0xc>)
 8006f16:	4903      	ldr	r1, [pc, #12]	@ (8006f24 <stdio_exit_handler+0x10>)
 8006f18:	4803      	ldr	r0, [pc, #12]	@ (8006f28 <stdio_exit_handler+0x14>)
 8006f1a:	f000 b869 	b.w	8006ff0 <_fwalk_sglue>
 8006f1e:	bf00      	nop
 8006f20:	20000010 	.word	0x20000010
 8006f24:	08007d21 	.word	0x08007d21
 8006f28:	20000020 	.word	0x20000020

08006f2c <cleanup_stdio>:
 8006f2c:	6841      	ldr	r1, [r0, #4]
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <cleanup_stdio+0x34>)
 8006f30:	4299      	cmp	r1, r3
 8006f32:	b510      	push	{r4, lr}
 8006f34:	4604      	mov	r4, r0
 8006f36:	d001      	beq.n	8006f3c <cleanup_stdio+0x10>
 8006f38:	f000 fef2 	bl	8007d20 <_fflush_r>
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <cleanup_stdio+0x38>)
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <cleanup_stdio+0x1e>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 feeb 	bl	8007d20 <_fflush_r>
 8006f4a:	68e1      	ldr	r1, [r4, #12]
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <cleanup_stdio+0x3c>)
 8006f4e:	4299      	cmp	r1, r3
 8006f50:	d004      	beq.n	8006f5c <cleanup_stdio+0x30>
 8006f52:	4620      	mov	r0, r4
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f000 bee2 	b.w	8007d20 <_fflush_r>
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	bf00      	nop
 8006f60:	2000855c 	.word	0x2000855c
 8006f64:	200085c4 	.word	0x200085c4
 8006f68:	2000862c 	.word	0x2000862c

08006f6c <global_stdio_init.part.0>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <global_stdio_init.part.0+0x30>)
 8006f70:	4c0b      	ldr	r4, [pc, #44]	@ (8006fa0 <global_stdio_init.part.0+0x34>)
 8006f72:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa4 <global_stdio_init.part.0+0x38>)
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	4620      	mov	r0, r4
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	f7ff ff94 	bl	8006ea8 <std>
 8006f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f84:	2201      	movs	r2, #1
 8006f86:	2109      	movs	r1, #9
 8006f88:	f7ff ff8e 	bl	8006ea8 <std>
 8006f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f90:	2202      	movs	r2, #2
 8006f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f96:	2112      	movs	r1, #18
 8006f98:	f7ff bf86 	b.w	8006ea8 <std>
 8006f9c:	20008694 	.word	0x20008694
 8006fa0:	2000855c 	.word	0x2000855c
 8006fa4:	08006f15 	.word	0x08006f15

08006fa8 <__sfp_lock_acquire>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	@ (8006fb0 <__sfp_lock_acquire+0x8>)
 8006faa:	f000 ba5e 	b.w	800746a <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	2000869d 	.word	0x2000869d

08006fb4 <__sfp_lock_release>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_release+0x8>)
 8006fb6:	f000 ba59 	b.w	800746c <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	2000869d 	.word	0x2000869d

08006fc0 <__sinit>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	f7ff fff0 	bl	8006fa8 <__sfp_lock_acquire>
 8006fc8:	6a23      	ldr	r3, [r4, #32]
 8006fca:	b11b      	cbz	r3, 8006fd4 <__sinit+0x14>
 8006fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd0:	f7ff bff0 	b.w	8006fb4 <__sfp_lock_release>
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <__sinit+0x28>)
 8006fd6:	6223      	str	r3, [r4, #32]
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <__sinit+0x2c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f5      	bne.n	8006fcc <__sinit+0xc>
 8006fe0:	f7ff ffc4 	bl	8006f6c <global_stdio_init.part.0>
 8006fe4:	e7f2      	b.n	8006fcc <__sinit+0xc>
 8006fe6:	bf00      	nop
 8006fe8:	08006f2d 	.word	0x08006f2d
 8006fec:	20008694 	.word	0x20008694

08006ff0 <_fwalk_sglue>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4688      	mov	r8, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007000:	f1b9 0901 	subs.w	r9, r9, #1
 8007004:	d505      	bpl.n	8007012 <_fwalk_sglue+0x22>
 8007006:	6824      	ldr	r4, [r4, #0]
 8007008:	2c00      	cmp	r4, #0
 800700a:	d1f7      	bne.n	8006ffc <_fwalk_sglue+0xc>
 800700c:	4630      	mov	r0, r6
 800700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d907      	bls.n	8007028 <_fwalk_sglue+0x38>
 8007018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800701c:	3301      	adds	r3, #1
 800701e:	d003      	beq.n	8007028 <_fwalk_sglue+0x38>
 8007020:	4629      	mov	r1, r5
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	4306      	orrs	r6, r0
 8007028:	3568      	adds	r5, #104	@ 0x68
 800702a:	e7e9      	b.n	8007000 <_fwalk_sglue+0x10>

0800702c <iprintf>:
 800702c:	b40f      	push	{r0, r1, r2, r3}
 800702e:	b507      	push	{r0, r1, r2, lr}
 8007030:	4906      	ldr	r1, [pc, #24]	@ (800704c <iprintf+0x20>)
 8007032:	ab04      	add	r3, sp, #16
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	f853 2b04 	ldr.w	r2, [r3], #4
 800703a:	6881      	ldr	r1, [r0, #8]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f000 fb47 	bl	80076d0 <_vfiprintf_r>
 8007042:	b003      	add	sp, #12
 8007044:	f85d eb04 	ldr.w	lr, [sp], #4
 8007048:	b004      	add	sp, #16
 800704a:	4770      	bx	lr
 800704c:	2000001c 	.word	0x2000001c

08007050 <_puts_r>:
 8007050:	6a03      	ldr	r3, [r0, #32]
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	6884      	ldr	r4, [r0, #8]
 8007056:	4605      	mov	r5, r0
 8007058:	460e      	mov	r6, r1
 800705a:	b90b      	cbnz	r3, 8007060 <_puts_r+0x10>
 800705c:	f7ff ffb0 	bl	8006fc0 <__sinit>
 8007060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007062:	07db      	lsls	r3, r3, #31
 8007064:	d405      	bmi.n	8007072 <_puts_r+0x22>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	0598      	lsls	r0, r3, #22
 800706a:	d402      	bmi.n	8007072 <_puts_r+0x22>
 800706c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800706e:	f000 f9fc 	bl	800746a <__retarget_lock_acquire_recursive>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	0719      	lsls	r1, r3, #28
 8007076:	d502      	bpl.n	800707e <_puts_r+0x2e>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d135      	bne.n	80070ea <_puts_r+0x9a>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f8c5 	bl	8007210 <__swsetup_r>
 8007086:	b380      	cbz	r0, 80070ea <_puts_r+0x9a>
 8007088:	f04f 35ff 	mov.w	r5, #4294967295
 800708c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800708e:	07da      	lsls	r2, r3, #31
 8007090:	d405      	bmi.n	800709e <_puts_r+0x4e>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	059b      	lsls	r3, r3, #22
 8007096:	d402      	bmi.n	800709e <_puts_r+0x4e>
 8007098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709a:	f000 f9e7 	bl	800746c <__retarget_lock_release_recursive>
 800709e:	4628      	mov	r0, r5
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da04      	bge.n	80070b0 <_puts_r+0x60>
 80070a6:	69a2      	ldr	r2, [r4, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	dc17      	bgt.n	80070dc <_puts_r+0x8c>
 80070ac:	290a      	cmp	r1, #10
 80070ae:	d015      	beq.n	80070dc <_puts_r+0x8c>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	6022      	str	r2, [r4, #0]
 80070b6:	7019      	strb	r1, [r3, #0]
 80070b8:	68a3      	ldr	r3, [r4, #8]
 80070ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070be:	3b01      	subs	r3, #1
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	2900      	cmp	r1, #0
 80070c4:	d1ed      	bne.n	80070a2 <_puts_r+0x52>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da11      	bge.n	80070ee <_puts_r+0x9e>
 80070ca:	4622      	mov	r2, r4
 80070cc:	210a      	movs	r1, #10
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f85f 	bl	8007192 <__swbuf_r>
 80070d4:	3001      	adds	r0, #1
 80070d6:	d0d7      	beq.n	8007088 <_puts_r+0x38>
 80070d8:	250a      	movs	r5, #10
 80070da:	e7d7      	b.n	800708c <_puts_r+0x3c>
 80070dc:	4622      	mov	r2, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 f857 	bl	8007192 <__swbuf_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d1e7      	bne.n	80070b8 <_puts_r+0x68>
 80070e8:	e7ce      	b.n	8007088 <_puts_r+0x38>
 80070ea:	3e01      	subs	r6, #1
 80070ec:	e7e4      	b.n	80070b8 <_puts_r+0x68>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	220a      	movs	r2, #10
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e7ee      	b.n	80070d8 <_puts_r+0x88>
	...

080070fc <puts>:
 80070fc:	4b02      	ldr	r3, [pc, #8]	@ (8007108 <puts+0xc>)
 80070fe:	4601      	mov	r1, r0
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	f7ff bfa5 	b.w	8007050 <_puts_r>
 8007106:	bf00      	nop
 8007108:	2000001c 	.word	0x2000001c

0800710c <__sread>:
 800710c:	b510      	push	{r4, lr}
 800710e:	460c      	mov	r4, r1
 8007110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007114:	f000 f95a 	bl	80073cc <_read_r>
 8007118:	2800      	cmp	r0, #0
 800711a:	bfab      	itete	ge
 800711c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800711e:	89a3      	ldrhlt	r3, [r4, #12]
 8007120:	181b      	addge	r3, r3, r0
 8007122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007126:	bfac      	ite	ge
 8007128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800712a:	81a3      	strhlt	r3, [r4, #12]
 800712c:	bd10      	pop	{r4, pc}

0800712e <__swrite>:
 800712e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007132:	461f      	mov	r7, r3
 8007134:	898b      	ldrh	r3, [r1, #12]
 8007136:	05db      	lsls	r3, r3, #23
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	4616      	mov	r6, r2
 800713e:	d505      	bpl.n	800714c <__swrite+0x1e>
 8007140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007144:	2302      	movs	r3, #2
 8007146:	2200      	movs	r2, #0
 8007148:	f000 f92e 	bl	80073a8 <_lseek_r>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	4632      	mov	r2, r6
 800715a:	463b      	mov	r3, r7
 800715c:	4628      	mov	r0, r5
 800715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007162:	f000 b945 	b.w	80073f0 <_write_r>

08007166 <__sseek>:
 8007166:	b510      	push	{r4, lr}
 8007168:	460c      	mov	r4, r1
 800716a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716e:	f000 f91b 	bl	80073a8 <_lseek_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	bf15      	itete	ne
 8007178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800717a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800717e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007182:	81a3      	strheq	r3, [r4, #12]
 8007184:	bf18      	it	ne
 8007186:	81a3      	strhne	r3, [r4, #12]
 8007188:	bd10      	pop	{r4, pc}

0800718a <__sclose>:
 800718a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718e:	f000 b89d 	b.w	80072cc <_close_r>

08007192 <__swbuf_r>:
 8007192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007194:	460e      	mov	r6, r1
 8007196:	4614      	mov	r4, r2
 8007198:	4605      	mov	r5, r0
 800719a:	b118      	cbz	r0, 80071a4 <__swbuf_r+0x12>
 800719c:	6a03      	ldr	r3, [r0, #32]
 800719e:	b90b      	cbnz	r3, 80071a4 <__swbuf_r+0x12>
 80071a0:	f7ff ff0e 	bl	8006fc0 <__sinit>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	071a      	lsls	r2, r3, #28
 80071ac:	d501      	bpl.n	80071b2 <__swbuf_r+0x20>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	b943      	cbnz	r3, 80071c4 <__swbuf_r+0x32>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f82b 	bl	8007210 <__swsetup_r>
 80071ba:	b118      	cbz	r0, 80071c4 <__swbuf_r+0x32>
 80071bc:	f04f 37ff 	mov.w	r7, #4294967295
 80071c0:	4638      	mov	r0, r7
 80071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	6922      	ldr	r2, [r4, #16]
 80071c8:	1a98      	subs	r0, r3, r2
 80071ca:	6963      	ldr	r3, [r4, #20]
 80071cc:	b2f6      	uxtb	r6, r6
 80071ce:	4283      	cmp	r3, r0
 80071d0:	4637      	mov	r7, r6
 80071d2:	dc05      	bgt.n	80071e0 <__swbuf_r+0x4e>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 fda2 	bl	8007d20 <_fflush_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1ed      	bne.n	80071bc <__swbuf_r+0x2a>
 80071e0:	68a3      	ldr	r3, [r4, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	60a3      	str	r3, [r4, #8]
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	701e      	strb	r6, [r3, #0]
 80071ee:	6962      	ldr	r2, [r4, #20]
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d004      	beq.n	8007200 <__swbuf_r+0x6e>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d5e1      	bpl.n	80071c0 <__swbuf_r+0x2e>
 80071fc:	2e0a      	cmp	r6, #10
 80071fe:	d1df      	bne.n	80071c0 <__swbuf_r+0x2e>
 8007200:	4621      	mov	r1, r4
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fd8c 	bl	8007d20 <_fflush_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	d0d9      	beq.n	80071c0 <__swbuf_r+0x2e>
 800720c:	e7d6      	b.n	80071bc <__swbuf_r+0x2a>
	...

08007210 <__swsetup_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4b29      	ldr	r3, [pc, #164]	@ (80072b8 <__swsetup_r+0xa8>)
 8007214:	4605      	mov	r5, r0
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	460c      	mov	r4, r1
 800721a:	b118      	cbz	r0, 8007224 <__swsetup_r+0x14>
 800721c:	6a03      	ldr	r3, [r0, #32]
 800721e:	b90b      	cbnz	r3, 8007224 <__swsetup_r+0x14>
 8007220:	f7ff fece 	bl	8006fc0 <__sinit>
 8007224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	d422      	bmi.n	8007272 <__swsetup_r+0x62>
 800722c:	06da      	lsls	r2, r3, #27
 800722e:	d407      	bmi.n	8007240 <__swsetup_r+0x30>
 8007230:	2209      	movs	r2, #9
 8007232:	602a      	str	r2, [r5, #0]
 8007234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	e033      	b.n	80072a8 <__swsetup_r+0x98>
 8007240:	0758      	lsls	r0, r3, #29
 8007242:	d512      	bpl.n	800726a <__swsetup_r+0x5a>
 8007244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007246:	b141      	cbz	r1, 800725a <__swsetup_r+0x4a>
 8007248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800724c:	4299      	cmp	r1, r3
 800724e:	d002      	beq.n	8007256 <__swsetup_r+0x46>
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f91b 	bl	800748c <_free_r>
 8007256:	2300      	movs	r3, #0
 8007258:	6363      	str	r3, [r4, #52]	@ 0x34
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	2300      	movs	r3, #0
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f043 0308 	orr.w	r3, r3, #8
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	b94b      	cbnz	r3, 800728a <__swsetup_r+0x7a>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800727c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007280:	d003      	beq.n	800728a <__swsetup_r+0x7a>
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f000 fd99 	bl	8007dbc <__smakebuf_r>
 800728a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728e:	f013 0201 	ands.w	r2, r3, #1
 8007292:	d00a      	beq.n	80072aa <__swsetup_r+0x9a>
 8007294:	2200      	movs	r2, #0
 8007296:	60a2      	str	r2, [r4, #8]
 8007298:	6962      	ldr	r2, [r4, #20]
 800729a:	4252      	negs	r2, r2
 800729c:	61a2      	str	r2, [r4, #24]
 800729e:	6922      	ldr	r2, [r4, #16]
 80072a0:	b942      	cbnz	r2, 80072b4 <__swsetup_r+0xa4>
 80072a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072a6:	d1c5      	bne.n	8007234 <__swsetup_r+0x24>
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	0799      	lsls	r1, r3, #30
 80072ac:	bf58      	it	pl
 80072ae:	6962      	ldrpl	r2, [r4, #20]
 80072b0:	60a2      	str	r2, [r4, #8]
 80072b2:	e7f4      	b.n	800729e <__swsetup_r+0x8e>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7f7      	b.n	80072a8 <__swsetup_r+0x98>
 80072b8:	2000001c 	.word	0x2000001c

080072bc <memset>:
 80072bc:	4402      	add	r2, r0
 80072be:	4603      	mov	r3, r0
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d100      	bne.n	80072c6 <memset+0xa>
 80072c4:	4770      	bx	lr
 80072c6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ca:	e7f9      	b.n	80072c0 <memset+0x4>

080072cc <_close_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d06      	ldr	r5, [pc, #24]	@ (80072e8 <_close_r+0x1c>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7f9 fdd5 	bl	8000e86 <_close>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_close_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_close_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	20008698 	.word	0x20008698

080072ec <_reclaim_reent>:
 80072ec:	4b2d      	ldr	r3, [pc, #180]	@ (80073a4 <_reclaim_reent+0xb8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4283      	cmp	r3, r0
 80072f2:	b570      	push	{r4, r5, r6, lr}
 80072f4:	4604      	mov	r4, r0
 80072f6:	d053      	beq.n	80073a0 <_reclaim_reent+0xb4>
 80072f8:	69c3      	ldr	r3, [r0, #28]
 80072fa:	b31b      	cbz	r3, 8007344 <_reclaim_reent+0x58>
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	b163      	cbz	r3, 800731a <_reclaim_reent+0x2e>
 8007300:	2500      	movs	r5, #0
 8007302:	69e3      	ldr	r3, [r4, #28]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	5959      	ldr	r1, [r3, r5]
 8007308:	b9b1      	cbnz	r1, 8007338 <_reclaim_reent+0x4c>
 800730a:	3504      	adds	r5, #4
 800730c:	2d80      	cmp	r5, #128	@ 0x80
 800730e:	d1f8      	bne.n	8007302 <_reclaim_reent+0x16>
 8007310:	69e3      	ldr	r3, [r4, #28]
 8007312:	4620      	mov	r0, r4
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	f000 f8b9 	bl	800748c <_free_r>
 800731a:	69e3      	ldr	r3, [r4, #28]
 800731c:	6819      	ldr	r1, [r3, #0]
 800731e:	b111      	cbz	r1, 8007326 <_reclaim_reent+0x3a>
 8007320:	4620      	mov	r0, r4
 8007322:	f000 f8b3 	bl	800748c <_free_r>
 8007326:	69e3      	ldr	r3, [r4, #28]
 8007328:	689d      	ldr	r5, [r3, #8]
 800732a:	b15d      	cbz	r5, 8007344 <_reclaim_reent+0x58>
 800732c:	4629      	mov	r1, r5
 800732e:	4620      	mov	r0, r4
 8007330:	682d      	ldr	r5, [r5, #0]
 8007332:	f000 f8ab 	bl	800748c <_free_r>
 8007336:	e7f8      	b.n	800732a <_reclaim_reent+0x3e>
 8007338:	680e      	ldr	r6, [r1, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f8a6 	bl	800748c <_free_r>
 8007340:	4631      	mov	r1, r6
 8007342:	e7e1      	b.n	8007308 <_reclaim_reent+0x1c>
 8007344:	6961      	ldr	r1, [r4, #20]
 8007346:	b111      	cbz	r1, 800734e <_reclaim_reent+0x62>
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f89f 	bl	800748c <_free_r>
 800734e:	69e1      	ldr	r1, [r4, #28]
 8007350:	b111      	cbz	r1, 8007358 <_reclaim_reent+0x6c>
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f89a 	bl	800748c <_free_r>
 8007358:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800735a:	b111      	cbz	r1, 8007362 <_reclaim_reent+0x76>
 800735c:	4620      	mov	r0, r4
 800735e:	f000 f895 	bl	800748c <_free_r>
 8007362:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007364:	b111      	cbz	r1, 800736c <_reclaim_reent+0x80>
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f890 	bl	800748c <_free_r>
 800736c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800736e:	b111      	cbz	r1, 8007376 <_reclaim_reent+0x8a>
 8007370:	4620      	mov	r0, r4
 8007372:	f000 f88b 	bl	800748c <_free_r>
 8007376:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007378:	b111      	cbz	r1, 8007380 <_reclaim_reent+0x94>
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f886 	bl	800748c <_free_r>
 8007380:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007382:	b111      	cbz	r1, 800738a <_reclaim_reent+0x9e>
 8007384:	4620      	mov	r0, r4
 8007386:	f000 f881 	bl	800748c <_free_r>
 800738a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800738c:	b111      	cbz	r1, 8007394 <_reclaim_reent+0xa8>
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f87c 	bl	800748c <_free_r>
 8007394:	6a23      	ldr	r3, [r4, #32]
 8007396:	b11b      	cbz	r3, 80073a0 <_reclaim_reent+0xb4>
 8007398:	4620      	mov	r0, r4
 800739a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800739e:	4718      	bx	r3
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
 80073a2:	bf00      	nop
 80073a4:	2000001c 	.word	0x2000001c

080073a8 <_lseek_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d07      	ldr	r5, [pc, #28]	@ (80073c8 <_lseek_r+0x20>)
 80073ac:	4604      	mov	r4, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	2200      	movs	r2, #0
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7f9 fd8c 	bl	8000ed4 <_lseek>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_lseek_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_lseek_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20008698 	.word	0x20008698

080073cc <_read_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	@ (80073ec <_read_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 fd36 	bl	8000e4c <_read>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_read_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_read_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20008698 	.word	0x20008698

080073f0 <_write_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d07      	ldr	r5, [pc, #28]	@ (8007410 <_write_r+0x20>)
 80073f4:	4604      	mov	r4, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	602a      	str	r2, [r5, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7f9 fb96 	bl	8000b30 <_write>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_write_r+0x1e>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_write_r+0x1e>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20008698 	.word	0x20008698

08007414 <__errno>:
 8007414:	4b01      	ldr	r3, [pc, #4]	@ (800741c <__errno+0x8>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000001c 	.word	0x2000001c

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	@ (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	@ (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	@ (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	@ (8007464 <__libc_init_array+0x44>)
 8007434:	f000 fd30 	bl	8007e98 <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	08007f88 	.word	0x08007f88
 800745c:	08007f88 	.word	0x08007f88
 8007460:	08007f88 	.word	0x08007f88
 8007464:	08007f8c 	.word	0x08007f8c

08007468 <__retarget_lock_init_recursive>:
 8007468:	4770      	bx	lr

0800746a <__retarget_lock_acquire_recursive>:
 800746a:	4770      	bx	lr

0800746c <__retarget_lock_release_recursive>:
 800746c:	4770      	bx	lr

0800746e <memcpy>:
 800746e:	440a      	add	r2, r1
 8007470:	4291      	cmp	r1, r2
 8007472:	f100 33ff 	add.w	r3, r0, #4294967295
 8007476:	d100      	bne.n	800747a <memcpy+0xc>
 8007478:	4770      	bx	lr
 800747a:	b510      	push	{r4, lr}
 800747c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007484:	4291      	cmp	r1, r2
 8007486:	d1f9      	bne.n	800747c <memcpy+0xe>
 8007488:	bd10      	pop	{r4, pc}
	...

0800748c <_free_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4605      	mov	r5, r0
 8007490:	2900      	cmp	r1, #0
 8007492:	d041      	beq.n	8007518 <_free_r+0x8c>
 8007494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007498:	1f0c      	subs	r4, r1, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfb8      	it	lt
 800749e:	18e4      	addlt	r4, r4, r3
 80074a0:	f000 f8e0 	bl	8007664 <__malloc_lock>
 80074a4:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <_free_r+0x90>)
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	b933      	cbnz	r3, 80074b8 <_free_r+0x2c>
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	6014      	str	r4, [r2, #0]
 80074ae:	4628      	mov	r0, r5
 80074b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b4:	f000 b8dc 	b.w	8007670 <__malloc_unlock>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d908      	bls.n	80074ce <_free_r+0x42>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	e7ed      	b.n	80074aa <_free_r+0x1e>
 80074ce:	461a      	mov	r2, r3
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b10b      	cbz	r3, 80074d8 <_free_r+0x4c>
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x42>
 80074d8:	6811      	ldr	r1, [r2, #0]
 80074da:	1850      	adds	r0, r2, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x6c>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1850      	adds	r0, r2, r1
 80074e6:	4283      	cmp	r3, r0
 80074e8:	6011      	str	r1, [r2, #0]
 80074ea:	d1e0      	bne.n	80074ae <_free_r+0x22>
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	6053      	str	r3, [r2, #4]
 80074f2:	4408      	add	r0, r1
 80074f4:	6010      	str	r0, [r2, #0]
 80074f6:	e7da      	b.n	80074ae <_free_r+0x22>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x74>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d6      	b.n	80074ae <_free_r+0x22>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428b      	cmp	r3, r1
 8007506:	bf04      	itt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	6054      	str	r4, [r2, #4]
 8007516:	e7ca      	b.n	80074ae <_free_r+0x22>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	200086a4 	.word	0x200086a4

08007520 <sbrk_aligned>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4e0f      	ldr	r6, [pc, #60]	@ (8007560 <sbrk_aligned+0x40>)
 8007524:	460c      	mov	r4, r1
 8007526:	6831      	ldr	r1, [r6, #0]
 8007528:	4605      	mov	r5, r0
 800752a:	b911      	cbnz	r1, 8007532 <sbrk_aligned+0x12>
 800752c:	f000 fca4 	bl	8007e78 <_sbrk_r>
 8007530:	6030      	str	r0, [r6, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f000 fc9f 	bl	8007e78 <_sbrk_r>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d103      	bne.n	8007546 <sbrk_aligned+0x26>
 800753e:	f04f 34ff 	mov.w	r4, #4294967295
 8007542:	4620      	mov	r0, r4
 8007544:	bd70      	pop	{r4, r5, r6, pc}
 8007546:	1cc4      	adds	r4, r0, #3
 8007548:	f024 0403 	bic.w	r4, r4, #3
 800754c:	42a0      	cmp	r0, r4
 800754e:	d0f8      	beq.n	8007542 <sbrk_aligned+0x22>
 8007550:	1a21      	subs	r1, r4, r0
 8007552:	4628      	mov	r0, r5
 8007554:	f000 fc90 	bl	8007e78 <_sbrk_r>
 8007558:	3001      	adds	r0, #1
 800755a:	d1f2      	bne.n	8007542 <sbrk_aligned+0x22>
 800755c:	e7ef      	b.n	800753e <sbrk_aligned+0x1e>
 800755e:	bf00      	nop
 8007560:	200086a0 	.word	0x200086a0

08007564 <_malloc_r>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	1ccd      	adds	r5, r1, #3
 800756a:	f025 0503 	bic.w	r5, r5, #3
 800756e:	3508      	adds	r5, #8
 8007570:	2d0c      	cmp	r5, #12
 8007572:	bf38      	it	cc
 8007574:	250c      	movcc	r5, #12
 8007576:	2d00      	cmp	r5, #0
 8007578:	4606      	mov	r6, r0
 800757a:	db01      	blt.n	8007580 <_malloc_r+0x1c>
 800757c:	42a9      	cmp	r1, r5
 800757e:	d904      	bls.n	800758a <_malloc_r+0x26>
 8007580:	230c      	movs	r3, #12
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	2000      	movs	r0, #0
 8007586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007660 <_malloc_r+0xfc>
 800758e:	f000 f869 	bl	8007664 <__malloc_lock>
 8007592:	f8d8 3000 	ldr.w	r3, [r8]
 8007596:	461c      	mov	r4, r3
 8007598:	bb44      	cbnz	r4, 80075ec <_malloc_r+0x88>
 800759a:	4629      	mov	r1, r5
 800759c:	4630      	mov	r0, r6
 800759e:	f7ff ffbf 	bl	8007520 <sbrk_aligned>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	4604      	mov	r4, r0
 80075a6:	d158      	bne.n	800765a <_malloc_r+0xf6>
 80075a8:	f8d8 4000 	ldr.w	r4, [r8]
 80075ac:	4627      	mov	r7, r4
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	d143      	bne.n	800763a <_malloc_r+0xd6>
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d04b      	beq.n	800764e <_malloc_r+0xea>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	4639      	mov	r1, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	eb04 0903 	add.w	r9, r4, r3
 80075c0:	f000 fc5a 	bl	8007e78 <_sbrk_r>
 80075c4:	4581      	cmp	r9, r0
 80075c6:	d142      	bne.n	800764e <_malloc_r+0xea>
 80075c8:	6821      	ldr	r1, [r4, #0]
 80075ca:	1a6d      	subs	r5, r5, r1
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ffa6 	bl	8007520 <sbrk_aligned>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d03a      	beq.n	800764e <_malloc_r+0xea>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	442b      	add	r3, r5
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	f8d8 3000 	ldr.w	r3, [r8]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	bb62      	cbnz	r2, 8007640 <_malloc_r+0xdc>
 80075e6:	f8c8 7000 	str.w	r7, [r8]
 80075ea:	e00f      	b.n	800760c <_malloc_r+0xa8>
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	1b52      	subs	r2, r2, r5
 80075f0:	d420      	bmi.n	8007634 <_malloc_r+0xd0>
 80075f2:	2a0b      	cmp	r2, #11
 80075f4:	d917      	bls.n	8007626 <_malloc_r+0xc2>
 80075f6:	1961      	adds	r1, r4, r5
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	6025      	str	r5, [r4, #0]
 80075fc:	bf18      	it	ne
 80075fe:	6059      	strne	r1, [r3, #4]
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	bf08      	it	eq
 8007604:	f8c8 1000 	streq.w	r1, [r8]
 8007608:	5162      	str	r2, [r4, r5]
 800760a:	604b      	str	r3, [r1, #4]
 800760c:	4630      	mov	r0, r6
 800760e:	f000 f82f 	bl	8007670 <__malloc_unlock>
 8007612:	f104 000b 	add.w	r0, r4, #11
 8007616:	1d23      	adds	r3, r4, #4
 8007618:	f020 0007 	bic.w	r0, r0, #7
 800761c:	1ac2      	subs	r2, r0, r3
 800761e:	bf1c      	itt	ne
 8007620:	1a1b      	subne	r3, r3, r0
 8007622:	50a3      	strne	r3, [r4, r2]
 8007624:	e7af      	b.n	8007586 <_malloc_r+0x22>
 8007626:	6862      	ldr	r2, [r4, #4]
 8007628:	42a3      	cmp	r3, r4
 800762a:	bf0c      	ite	eq
 800762c:	f8c8 2000 	streq.w	r2, [r8]
 8007630:	605a      	strne	r2, [r3, #4]
 8007632:	e7eb      	b.n	800760c <_malloc_r+0xa8>
 8007634:	4623      	mov	r3, r4
 8007636:	6864      	ldr	r4, [r4, #4]
 8007638:	e7ae      	b.n	8007598 <_malloc_r+0x34>
 800763a:	463c      	mov	r4, r7
 800763c:	687f      	ldr	r7, [r7, #4]
 800763e:	e7b6      	b.n	80075ae <_malloc_r+0x4a>
 8007640:	461a      	mov	r2, r3
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	42a3      	cmp	r3, r4
 8007646:	d1fb      	bne.n	8007640 <_malloc_r+0xdc>
 8007648:	2300      	movs	r3, #0
 800764a:	6053      	str	r3, [r2, #4]
 800764c:	e7de      	b.n	800760c <_malloc_r+0xa8>
 800764e:	230c      	movs	r3, #12
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	4630      	mov	r0, r6
 8007654:	f000 f80c 	bl	8007670 <__malloc_unlock>
 8007658:	e794      	b.n	8007584 <_malloc_r+0x20>
 800765a:	6005      	str	r5, [r0, #0]
 800765c:	e7d6      	b.n	800760c <_malloc_r+0xa8>
 800765e:	bf00      	nop
 8007660:	200086a4 	.word	0x200086a4

08007664 <__malloc_lock>:
 8007664:	4801      	ldr	r0, [pc, #4]	@ (800766c <__malloc_lock+0x8>)
 8007666:	f7ff bf00 	b.w	800746a <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	2000869c 	.word	0x2000869c

08007670 <__malloc_unlock>:
 8007670:	4801      	ldr	r0, [pc, #4]	@ (8007678 <__malloc_unlock+0x8>)
 8007672:	f7ff befb 	b.w	800746c <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	2000869c 	.word	0x2000869c

0800767c <__sfputc_r>:
 800767c:	6893      	ldr	r3, [r2, #8]
 800767e:	3b01      	subs	r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	b410      	push	{r4}
 8007684:	6093      	str	r3, [r2, #8]
 8007686:	da08      	bge.n	800769a <__sfputc_r+0x1e>
 8007688:	6994      	ldr	r4, [r2, #24]
 800768a:	42a3      	cmp	r3, r4
 800768c:	db01      	blt.n	8007692 <__sfputc_r+0x16>
 800768e:	290a      	cmp	r1, #10
 8007690:	d103      	bne.n	800769a <__sfputc_r+0x1e>
 8007692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007696:	f7ff bd7c 	b.w	8007192 <__swbuf_r>
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	1c58      	adds	r0, r3, #1
 800769e:	6010      	str	r0, [r2, #0]
 80076a0:	7019      	strb	r1, [r3, #0]
 80076a2:	4608      	mov	r0, r1
 80076a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <__sfputs_r>:
 80076aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ac:	4606      	mov	r6, r0
 80076ae:	460f      	mov	r7, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	18d5      	adds	r5, r2, r3
 80076b4:	42ac      	cmp	r4, r5
 80076b6:	d101      	bne.n	80076bc <__sfputs_r+0x12>
 80076b8:	2000      	movs	r0, #0
 80076ba:	e007      	b.n	80076cc <__sfputs_r+0x22>
 80076bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c0:	463a      	mov	r2, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ffda 	bl	800767c <__sfputc_r>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d1f3      	bne.n	80076b4 <__sfputs_r+0xa>
 80076cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076d0 <_vfiprintf_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	460d      	mov	r5, r1
 80076d6:	b09d      	sub	sp, #116	@ 0x74
 80076d8:	4614      	mov	r4, r2
 80076da:	4698      	mov	r8, r3
 80076dc:	4606      	mov	r6, r0
 80076de:	b118      	cbz	r0, 80076e8 <_vfiprintf_r+0x18>
 80076e0:	6a03      	ldr	r3, [r0, #32]
 80076e2:	b90b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x18>
 80076e4:	f7ff fc6c 	bl	8006fc0 <__sinit>
 80076e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076f6:	f7ff feb8 	bl	800746a <__retarget_lock_acquire_recursive>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	d501      	bpl.n	8007704 <_vfiprintf_r+0x34>
 8007700:	692b      	ldr	r3, [r5, #16]
 8007702:	b99b      	cbnz	r3, 800772c <_vfiprintf_r+0x5c>
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff fd82 	bl	8007210 <__swsetup_r>
 800770c:	b170      	cbz	r0, 800772c <_vfiprintf_r+0x5c>
 800770e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007710:	07dc      	lsls	r4, r3, #31
 8007712:	d504      	bpl.n	800771e <_vfiprintf_r+0x4e>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	@ 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d4f7      	bmi.n	8007714 <_vfiprintf_r+0x44>
 8007724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007726:	f7ff fea1 	bl	800746c <__retarget_lock_release_recursive>
 800772a:	e7f3      	b.n	8007714 <_vfiprintf_r+0x44>
 800772c:	2300      	movs	r3, #0
 800772e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007730:	2320      	movs	r3, #32
 8007732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007736:	f8cd 800c 	str.w	r8, [sp, #12]
 800773a:	2330      	movs	r3, #48	@ 0x30
 800773c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078ec <_vfiprintf_r+0x21c>
 8007740:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007744:	f04f 0901 	mov.w	r9, #1
 8007748:	4623      	mov	r3, r4
 800774a:	469a      	mov	sl, r3
 800774c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007750:	b10a      	cbz	r2, 8007756 <_vfiprintf_r+0x86>
 8007752:	2a25      	cmp	r2, #37	@ 0x25
 8007754:	d1f9      	bne.n	800774a <_vfiprintf_r+0x7a>
 8007756:	ebba 0b04 	subs.w	fp, sl, r4
 800775a:	d00b      	beq.n	8007774 <_vfiprintf_r+0xa4>
 800775c:	465b      	mov	r3, fp
 800775e:	4622      	mov	r2, r4
 8007760:	4629      	mov	r1, r5
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ffa1 	bl	80076aa <__sfputs_r>
 8007768:	3001      	adds	r0, #1
 800776a:	f000 80a7 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800776e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007770:	445a      	add	r2, fp
 8007772:	9209      	str	r2, [sp, #36]	@ 0x24
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 809f 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800777e:	2300      	movs	r3, #0
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007788:	f10a 0a01 	add.w	sl, sl, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007794:	931a      	str	r3, [sp, #104]	@ 0x68
 8007796:	4654      	mov	r4, sl
 8007798:	2205      	movs	r2, #5
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4853      	ldr	r0, [pc, #332]	@ (80078ec <_vfiprintf_r+0x21c>)
 80077a0:	f7f8 fd16 	bl	80001d0 <memchr>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	b9d8      	cbnz	r0, 80077e0 <_vfiprintf_r+0x110>
 80077a8:	06d1      	lsls	r1, r2, #27
 80077aa:	bf44      	itt	mi
 80077ac:	2320      	movmi	r3, #32
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077b2:	0713      	lsls	r3, r2, #28
 80077b4:	bf44      	itt	mi
 80077b6:	232b      	movmi	r3, #43	@ 0x2b
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c2:	d015      	beq.n	80077f0 <_vfiprintf_r+0x120>
 80077c4:	9a07      	ldr	r2, [sp, #28]
 80077c6:	4654      	mov	r4, sl
 80077c8:	2000      	movs	r0, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d4:	3b30      	subs	r3, #48	@ 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d94b      	bls.n	8007872 <_vfiprintf_r+0x1a2>
 80077da:	b1b0      	cbz	r0, 800780a <_vfiprintf_r+0x13a>
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	e014      	b.n	800780a <_vfiprintf_r+0x13a>
 80077e0:	eba0 0308 	sub.w	r3, r0, r8
 80077e4:	fa09 f303 	lsl.w	r3, r9, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	46a2      	mov	sl, r4
 80077ee:	e7d2      	b.n	8007796 <_vfiprintf_r+0xc6>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d19      	adds	r1, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	425b      	neglt	r3, r3
 80077fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007802:	9307      	strge	r3, [sp, #28]
 8007804:	9307      	strlt	r3, [sp, #28]
 8007806:	bfb8      	it	lt
 8007808:	9204      	strlt	r2, [sp, #16]
 800780a:	7823      	ldrb	r3, [r4, #0]
 800780c:	2b2e      	cmp	r3, #46	@ 0x2e
 800780e:	d10a      	bne.n	8007826 <_vfiprintf_r+0x156>
 8007810:	7863      	ldrb	r3, [r4, #1]
 8007812:	2b2a      	cmp	r3, #42	@ 0x2a
 8007814:	d132      	bne.n	800787c <_vfiprintf_r+0x1ac>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9203      	str	r2, [sp, #12]
 800781e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007822:	3402      	adds	r4, #2
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078fc <_vfiprintf_r+0x22c>
 800782a:	7821      	ldrb	r1, [r4, #0]
 800782c:	2203      	movs	r2, #3
 800782e:	4650      	mov	r0, sl
 8007830:	f7f8 fcce 	bl	80001d0 <memchr>
 8007834:	b138      	cbz	r0, 8007846 <_vfiprintf_r+0x176>
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	eba0 000a 	sub.w	r0, r0, sl
 800783c:	2240      	movs	r2, #64	@ 0x40
 800783e:	4082      	lsls	r2, r0
 8007840:	4313      	orrs	r3, r2
 8007842:	3401      	adds	r4, #1
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784a:	4829      	ldr	r0, [pc, #164]	@ (80078f0 <_vfiprintf_r+0x220>)
 800784c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007850:	2206      	movs	r2, #6
 8007852:	f7f8 fcbd 	bl	80001d0 <memchr>
 8007856:	2800      	cmp	r0, #0
 8007858:	d03f      	beq.n	80078da <_vfiprintf_r+0x20a>
 800785a:	4b26      	ldr	r3, [pc, #152]	@ (80078f4 <_vfiprintf_r+0x224>)
 800785c:	bb1b      	cbnz	r3, 80078a6 <_vfiprintf_r+0x1d6>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	3308      	adds	r3, #8
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	443b      	add	r3, r7
 800786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007870:	e76a      	b.n	8007748 <_vfiprintf_r+0x78>
 8007872:	fb0c 3202 	mla	r2, ip, r2, r3
 8007876:	460c      	mov	r4, r1
 8007878:	2001      	movs	r0, #1
 800787a:	e7a8      	b.n	80077ce <_vfiprintf_r+0xfe>
 800787c:	2300      	movs	r3, #0
 800787e:	3401      	adds	r4, #1
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	4619      	mov	r1, r3
 8007884:	f04f 0c0a 	mov.w	ip, #10
 8007888:	4620      	mov	r0, r4
 800788a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788e:	3a30      	subs	r2, #48	@ 0x30
 8007890:	2a09      	cmp	r2, #9
 8007892:	d903      	bls.n	800789c <_vfiprintf_r+0x1cc>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0c6      	beq.n	8007826 <_vfiprintf_r+0x156>
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	e7c4      	b.n	8007826 <_vfiprintf_r+0x156>
 800789c:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a0:	4604      	mov	r4, r0
 80078a2:	2301      	movs	r3, #1
 80078a4:	e7f0      	b.n	8007888 <_vfiprintf_r+0x1b8>
 80078a6:	ab03      	add	r3, sp, #12
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	462a      	mov	r2, r5
 80078ac:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <_vfiprintf_r+0x228>)
 80078ae:	a904      	add	r1, sp, #16
 80078b0:	4630      	mov	r0, r6
 80078b2:	f3af 8000 	nop.w
 80078b6:	4607      	mov	r7, r0
 80078b8:	1c78      	adds	r0, r7, #1
 80078ba:	d1d6      	bne.n	800786a <_vfiprintf_r+0x19a>
 80078bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	059a      	lsls	r2, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ca:	f7ff fdcf 	bl	800746c <__retarget_lock_release_recursive>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	065b      	lsls	r3, r3, #25
 80078d2:	f53f af1f 	bmi.w	8007714 <_vfiprintf_r+0x44>
 80078d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d8:	e71e      	b.n	8007718 <_vfiprintf_r+0x48>
 80078da:	ab03      	add	r3, sp, #12
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	462a      	mov	r2, r5
 80078e0:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <_vfiprintf_r+0x228>)
 80078e2:	a904      	add	r1, sp, #16
 80078e4:	4630      	mov	r0, r6
 80078e6:	f000 f879 	bl	80079dc <_printf_i>
 80078ea:	e7e4      	b.n	80078b6 <_vfiprintf_r+0x1e6>
 80078ec:	08007f4c 	.word	0x08007f4c
 80078f0:	08007f56 	.word	0x08007f56
 80078f4:	00000000 	.word	0x00000000
 80078f8:	080076ab 	.word	0x080076ab
 80078fc:	08007f52 	.word	0x08007f52

08007900 <_printf_common>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	4616      	mov	r6, r2
 8007906:	4698      	mov	r8, r3
 8007908:	688a      	ldr	r2, [r1, #8]
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007910:	4293      	cmp	r3, r2
 8007912:	bfb8      	it	lt
 8007914:	4613      	movlt	r3, r2
 8007916:	6033      	str	r3, [r6, #0]
 8007918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800791c:	4607      	mov	r7, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b10a      	cbz	r2, 8007926 <_printf_common+0x26>
 8007922:	3301      	adds	r3, #1
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0699      	lsls	r1, r3, #26
 800792a:	bf42      	ittt	mi
 800792c:	6833      	ldrmi	r3, [r6, #0]
 800792e:	3302      	addmi	r3, #2
 8007930:	6033      	strmi	r3, [r6, #0]
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	f015 0506 	ands.w	r5, r5, #6
 8007938:	d106      	bne.n	8007948 <_printf_common+0x48>
 800793a:	f104 0a19 	add.w	sl, r4, #25
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc26      	bgt.n	8007996 <_printf_common+0x96>
 8007948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	3b00      	subs	r3, #0
 8007950:	bf18      	it	ne
 8007952:	2301      	movne	r3, #1
 8007954:	0692      	lsls	r2, r2, #26
 8007956:	d42b      	bmi.n	80079b0 <_printf_common+0xb0>
 8007958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800795c:	4641      	mov	r1, r8
 800795e:	4638      	mov	r0, r7
 8007960:	47c8      	blx	r9
 8007962:	3001      	adds	r0, #1
 8007964:	d01e      	beq.n	80079a4 <_printf_common+0xa4>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	f003 0306 	and.w	r3, r3, #6
 800796e:	2b04      	cmp	r3, #4
 8007970:	bf02      	ittt	eq
 8007972:	68e5      	ldreq	r5, [r4, #12]
 8007974:	6833      	ldreq	r3, [r6, #0]
 8007976:	1aed      	subeq	r5, r5, r3
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	bf0c      	ite	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	2500      	movne	r5, #0
 8007982:	4293      	cmp	r3, r2
 8007984:	bfc4      	itt	gt
 8007986:	1a9b      	subgt	r3, r3, r2
 8007988:	18ed      	addgt	r5, r5, r3
 800798a:	2600      	movs	r6, #0
 800798c:	341a      	adds	r4, #26
 800798e:	42b5      	cmp	r5, r6
 8007990:	d11a      	bne.n	80079c8 <_printf_common+0xc8>
 8007992:	2000      	movs	r0, #0
 8007994:	e008      	b.n	80079a8 <_printf_common+0xa8>
 8007996:	2301      	movs	r3, #1
 8007998:	4652      	mov	r2, sl
 800799a:	4641      	mov	r1, r8
 800799c:	4638      	mov	r0, r7
 800799e:	47c8      	blx	r9
 80079a0:	3001      	adds	r0, #1
 80079a2:	d103      	bne.n	80079ac <_printf_common+0xac>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	3501      	adds	r5, #1
 80079ae:	e7c6      	b.n	800793e <_printf_common+0x3e>
 80079b0:	18e1      	adds	r1, r4, r3
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	2030      	movs	r0, #48	@ 0x30
 80079b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079ba:	4422      	add	r2, r4
 80079bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079c4:	3302      	adds	r3, #2
 80079c6:	e7c7      	b.n	8007958 <_printf_common+0x58>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	4641      	mov	r1, r8
 80079ce:	4638      	mov	r0, r7
 80079d0:	47c8      	blx	r9
 80079d2:	3001      	adds	r0, #1
 80079d4:	d0e6      	beq.n	80079a4 <_printf_common+0xa4>
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7d9      	b.n	800798e <_printf_common+0x8e>
	...

080079dc <_printf_i>:
 80079dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	7e0f      	ldrb	r7, [r1, #24]
 80079e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079e4:	2f78      	cmp	r7, #120	@ 0x78
 80079e6:	4691      	mov	r9, r2
 80079e8:	4680      	mov	r8, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	469a      	mov	sl, r3
 80079ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079f2:	d807      	bhi.n	8007a04 <_printf_i+0x28>
 80079f4:	2f62      	cmp	r7, #98	@ 0x62
 80079f6:	d80a      	bhi.n	8007a0e <_printf_i+0x32>
 80079f8:	2f00      	cmp	r7, #0
 80079fa:	f000 80d1 	beq.w	8007ba0 <_printf_i+0x1c4>
 80079fe:	2f58      	cmp	r7, #88	@ 0x58
 8007a00:	f000 80b8 	beq.w	8007b74 <_printf_i+0x198>
 8007a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a0c:	e03a      	b.n	8007a84 <_printf_i+0xa8>
 8007a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a12:	2b15      	cmp	r3, #21
 8007a14:	d8f6      	bhi.n	8007a04 <_printf_i+0x28>
 8007a16:	a101      	add	r1, pc, #4	@ (adr r1, 8007a1c <_printf_i+0x40>)
 8007a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007a05 	.word	0x08007a05
 8007a28:	08007a05 	.word	0x08007a05
 8007a2c:	08007a05 	.word	0x08007a05
 8007a30:	08007a05 	.word	0x08007a05
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a05 	.word	0x08007a05
 8007a3c:	08007a05 	.word	0x08007a05
 8007a40:	08007a05 	.word	0x08007a05
 8007a44:	08007a05 	.word	0x08007a05
 8007a48:	08007b87 	.word	0x08007b87
 8007a4c:	08007ab3 	.word	0x08007ab3
 8007a50:	08007b41 	.word	0x08007b41
 8007a54:	08007a05 	.word	0x08007a05
 8007a58:	08007a05 	.word	0x08007a05
 8007a5c:	08007ba9 	.word	0x08007ba9
 8007a60:	08007a05 	.word	0x08007a05
 8007a64:	08007ab3 	.word	0x08007ab3
 8007a68:	08007a05 	.word	0x08007a05
 8007a6c:	08007a05 	.word	0x08007a05
 8007a70:	08007b49 	.word	0x08007b49
 8007a74:	6833      	ldr	r3, [r6, #0]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6032      	str	r2, [r6, #0]
 8007a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a84:	2301      	movs	r3, #1
 8007a86:	e09c      	b.n	8007bc2 <_printf_i+0x1e6>
 8007a88:	6833      	ldr	r3, [r6, #0]
 8007a8a:	6820      	ldr	r0, [r4, #0]
 8007a8c:	1d19      	adds	r1, r3, #4
 8007a8e:	6031      	str	r1, [r6, #0]
 8007a90:	0606      	lsls	r6, r0, #24
 8007a92:	d501      	bpl.n	8007a98 <_printf_i+0xbc>
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	e003      	b.n	8007aa0 <_printf_i+0xc4>
 8007a98:	0645      	lsls	r5, r0, #25
 8007a9a:	d5fb      	bpl.n	8007a94 <_printf_i+0xb8>
 8007a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	da03      	bge.n	8007aac <_printf_i+0xd0>
 8007aa4:	232d      	movs	r3, #45	@ 0x2d
 8007aa6:	426d      	negs	r5, r5
 8007aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aac:	4858      	ldr	r0, [pc, #352]	@ (8007c10 <_printf_i+0x234>)
 8007aae:	230a      	movs	r3, #10
 8007ab0:	e011      	b.n	8007ad6 <_printf_i+0xfa>
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	0608      	lsls	r0, r1, #24
 8007ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007abc:	d402      	bmi.n	8007ac4 <_printf_i+0xe8>
 8007abe:	0649      	lsls	r1, r1, #25
 8007ac0:	bf48      	it	mi
 8007ac2:	b2ad      	uxthmi	r5, r5
 8007ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ac6:	4852      	ldr	r0, [pc, #328]	@ (8007c10 <_printf_i+0x234>)
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	bf14      	ite	ne
 8007acc:	230a      	movne	r3, #10
 8007ace:	2308      	moveq	r3, #8
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ad6:	6866      	ldr	r6, [r4, #4]
 8007ad8:	60a6      	str	r6, [r4, #8]
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	db05      	blt.n	8007aea <_printf_i+0x10e>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	432e      	orrs	r6, r5
 8007ae2:	f021 0104 	bic.w	r1, r1, #4
 8007ae6:	6021      	str	r1, [r4, #0]
 8007ae8:	d04b      	beq.n	8007b82 <_printf_i+0x1a6>
 8007aea:	4616      	mov	r6, r2
 8007aec:	fbb5 f1f3 	udiv	r1, r5, r3
 8007af0:	fb03 5711 	mls	r7, r3, r1, r5
 8007af4:	5dc7      	ldrb	r7, [r0, r7]
 8007af6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007afa:	462f      	mov	r7, r5
 8007afc:	42bb      	cmp	r3, r7
 8007afe:	460d      	mov	r5, r1
 8007b00:	d9f4      	bls.n	8007aec <_printf_i+0x110>
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	d10b      	bne.n	8007b1e <_printf_i+0x142>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	07df      	lsls	r7, r3, #31
 8007b0a:	d508      	bpl.n	8007b1e <_printf_i+0x142>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	6861      	ldr	r1, [r4, #4]
 8007b10:	4299      	cmp	r1, r3
 8007b12:	bfde      	ittt	le
 8007b14:	2330      	movle	r3, #48	@ 0x30
 8007b16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b1e:	1b92      	subs	r2, r2, r6
 8007b20:	6122      	str	r2, [r4, #16]
 8007b22:	f8cd a000 	str.w	sl, [sp]
 8007b26:	464b      	mov	r3, r9
 8007b28:	aa03      	add	r2, sp, #12
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	f7ff fee7 	bl	8007900 <_printf_common>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d14a      	bne.n	8007bcc <_printf_i+0x1f0>
 8007b36:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3a:	b004      	add	sp, #16
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	f043 0320 	orr.w	r3, r3, #32
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	4832      	ldr	r0, [pc, #200]	@ (8007c14 <_printf_i+0x238>)
 8007b4a:	2778      	movs	r7, #120	@ 0x78
 8007b4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	6831      	ldr	r1, [r6, #0]
 8007b54:	061f      	lsls	r7, r3, #24
 8007b56:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b5a:	d402      	bmi.n	8007b62 <_printf_i+0x186>
 8007b5c:	065f      	lsls	r7, r3, #25
 8007b5e:	bf48      	it	mi
 8007b60:	b2ad      	uxthmi	r5, r5
 8007b62:	6031      	str	r1, [r6, #0]
 8007b64:	07d9      	lsls	r1, r3, #31
 8007b66:	bf44      	itt	mi
 8007b68:	f043 0320 	orrmi.w	r3, r3, #32
 8007b6c:	6023      	strmi	r3, [r4, #0]
 8007b6e:	b11d      	cbz	r5, 8007b78 <_printf_i+0x19c>
 8007b70:	2310      	movs	r3, #16
 8007b72:	e7ad      	b.n	8007ad0 <_printf_i+0xf4>
 8007b74:	4826      	ldr	r0, [pc, #152]	@ (8007c10 <_printf_i+0x234>)
 8007b76:	e7e9      	b.n	8007b4c <_printf_i+0x170>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	f023 0320 	bic.w	r3, r3, #32
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	e7f6      	b.n	8007b70 <_printf_i+0x194>
 8007b82:	4616      	mov	r6, r2
 8007b84:	e7bd      	b.n	8007b02 <_printf_i+0x126>
 8007b86:	6833      	ldr	r3, [r6, #0]
 8007b88:	6825      	ldr	r5, [r4, #0]
 8007b8a:	6961      	ldr	r1, [r4, #20]
 8007b8c:	1d18      	adds	r0, r3, #4
 8007b8e:	6030      	str	r0, [r6, #0]
 8007b90:	062e      	lsls	r6, r5, #24
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	d501      	bpl.n	8007b9a <_printf_i+0x1be>
 8007b96:	6019      	str	r1, [r3, #0]
 8007b98:	e002      	b.n	8007ba0 <_printf_i+0x1c4>
 8007b9a:	0668      	lsls	r0, r5, #25
 8007b9c:	d5fb      	bpl.n	8007b96 <_printf_i+0x1ba>
 8007b9e:	8019      	strh	r1, [r3, #0]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	e7bc      	b.n	8007b22 <_printf_i+0x146>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	1d1a      	adds	r2, r3, #4
 8007bac:	6032      	str	r2, [r6, #0]
 8007bae:	681e      	ldr	r6, [r3, #0]
 8007bb0:	6862      	ldr	r2, [r4, #4]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7f8 fb0b 	bl	80001d0 <memchr>
 8007bba:	b108      	cbz	r0, 8007bc0 <_printf_i+0x1e4>
 8007bbc:	1b80      	subs	r0, r0, r6
 8007bbe:	6060      	str	r0, [r4, #4]
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bca:	e7aa      	b.n	8007b22 <_printf_i+0x146>
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	47d0      	blx	sl
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d0ad      	beq.n	8007b36 <_printf_i+0x15a>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	079b      	lsls	r3, r3, #30
 8007bde:	d413      	bmi.n	8007c08 <_printf_i+0x22c>
 8007be0:	68e0      	ldr	r0, [r4, #12]
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	4298      	cmp	r0, r3
 8007be6:	bfb8      	it	lt
 8007be8:	4618      	movlt	r0, r3
 8007bea:	e7a6      	b.n	8007b3a <_printf_i+0x15e>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	47d0      	blx	sl
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	d09d      	beq.n	8007b36 <_printf_i+0x15a>
 8007bfa:	3501      	adds	r5, #1
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	1a5b      	subs	r3, r3, r1
 8007c02:	42ab      	cmp	r3, r5
 8007c04:	dcf2      	bgt.n	8007bec <_printf_i+0x210>
 8007c06:	e7eb      	b.n	8007be0 <_printf_i+0x204>
 8007c08:	2500      	movs	r5, #0
 8007c0a:	f104 0619 	add.w	r6, r4, #25
 8007c0e:	e7f5      	b.n	8007bfc <_printf_i+0x220>
 8007c10:	08007f5d 	.word	0x08007f5d
 8007c14:	08007f6e 	.word	0x08007f6e

08007c18 <__sflush_r>:
 8007c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c20:	0716      	lsls	r6, r2, #28
 8007c22:	4605      	mov	r5, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	d454      	bmi.n	8007cd2 <__sflush_r+0xba>
 8007c28:	684b      	ldr	r3, [r1, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	dc02      	bgt.n	8007c34 <__sflush_r+0x1c>
 8007c2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dd48      	ble.n	8007cc6 <__sflush_r+0xae>
 8007c34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	d045      	beq.n	8007cc6 <__sflush_r+0xae>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c40:	682f      	ldr	r7, [r5, #0]
 8007c42:	6a21      	ldr	r1, [r4, #32]
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	d030      	beq.n	8007caa <__sflush_r+0x92>
 8007c48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	0759      	lsls	r1, r3, #29
 8007c4e:	d505      	bpl.n	8007c5c <__sflush_r+0x44>
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c56:	b10b      	cbz	r3, 8007c5c <__sflush_r+0x44>
 8007c58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c60:	6a21      	ldr	r1, [r4, #32]
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b0      	blx	r6
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	d106      	bne.n	8007c7a <__sflush_r+0x62>
 8007c6c:	6829      	ldr	r1, [r5, #0]
 8007c6e:	291d      	cmp	r1, #29
 8007c70:	d82b      	bhi.n	8007cca <__sflush_r+0xb2>
 8007c72:	4a2a      	ldr	r2, [pc, #168]	@ (8007d1c <__sflush_r+0x104>)
 8007c74:	40ca      	lsrs	r2, r1
 8007c76:	07d6      	lsls	r6, r2, #31
 8007c78:	d527      	bpl.n	8007cca <__sflush_r+0xb2>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6062      	str	r2, [r4, #4]
 8007c7e:	04d9      	lsls	r1, r3, #19
 8007c80:	6922      	ldr	r2, [r4, #16]
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	d504      	bpl.n	8007c90 <__sflush_r+0x78>
 8007c86:	1c42      	adds	r2, r0, #1
 8007c88:	d101      	bne.n	8007c8e <__sflush_r+0x76>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	b903      	cbnz	r3, 8007c90 <__sflush_r+0x78>
 8007c8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c92:	602f      	str	r7, [r5, #0]
 8007c94:	b1b9      	cbz	r1, 8007cc6 <__sflush_r+0xae>
 8007c96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c9a:	4299      	cmp	r1, r3
 8007c9c:	d002      	beq.n	8007ca4 <__sflush_r+0x8c>
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f7ff fbf4 	bl	800748c <_free_r>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ca8:	e00d      	b.n	8007cc6 <__sflush_r+0xae>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b0      	blx	r6
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	1c50      	adds	r0, r2, #1
 8007cb4:	d1c9      	bne.n	8007c4a <__sflush_r+0x32>
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0c6      	beq.n	8007c4a <__sflush_r+0x32>
 8007cbc:	2b1d      	cmp	r3, #29
 8007cbe:	d001      	beq.n	8007cc4 <__sflush_r+0xac>
 8007cc0:	2b16      	cmp	r3, #22
 8007cc2:	d11e      	bne.n	8007d02 <__sflush_r+0xea>
 8007cc4:	602f      	str	r7, [r5, #0]
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e022      	b.n	8007d10 <__sflush_r+0xf8>
 8007cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cce:	b21b      	sxth	r3, r3
 8007cd0:	e01b      	b.n	8007d0a <__sflush_r+0xf2>
 8007cd2:	690f      	ldr	r7, [r1, #16]
 8007cd4:	2f00      	cmp	r7, #0
 8007cd6:	d0f6      	beq.n	8007cc6 <__sflush_r+0xae>
 8007cd8:	0793      	lsls	r3, r2, #30
 8007cda:	680e      	ldr	r6, [r1, #0]
 8007cdc:	bf08      	it	eq
 8007cde:	694b      	ldreq	r3, [r1, #20]
 8007ce0:	600f      	str	r7, [r1, #0]
 8007ce2:	bf18      	it	ne
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	eba6 0807 	sub.w	r8, r6, r7
 8007cea:	608b      	str	r3, [r1, #8]
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	dde9      	ble.n	8007cc6 <__sflush_r+0xae>
 8007cf2:	6a21      	ldr	r1, [r4, #32]
 8007cf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cf6:	4643      	mov	r3, r8
 8007cf8:	463a      	mov	r2, r7
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b0      	blx	r6
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	dc08      	bgt.n	8007d14 <__sflush_r+0xfc>
 8007d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	4407      	add	r7, r0
 8007d16:	eba8 0800 	sub.w	r8, r8, r0
 8007d1a:	e7e7      	b.n	8007cec <__sflush_r+0xd4>
 8007d1c:	20400001 	.word	0x20400001

08007d20 <_fflush_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	b913      	cbnz	r3, 8007d30 <_fflush_r+0x10>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	b118      	cbz	r0, 8007d3a <_fflush_r+0x1a>
 8007d32:	6a03      	ldr	r3, [r0, #32]
 8007d34:	b90b      	cbnz	r3, 8007d3a <_fflush_r+0x1a>
 8007d36:	f7ff f943 	bl	8006fc0 <__sinit>
 8007d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f3      	beq.n	8007d2a <_fflush_r+0xa>
 8007d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d44:	07d0      	lsls	r0, r2, #31
 8007d46:	d404      	bmi.n	8007d52 <_fflush_r+0x32>
 8007d48:	0599      	lsls	r1, r3, #22
 8007d4a:	d402      	bmi.n	8007d52 <_fflush_r+0x32>
 8007d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d4e:	f7ff fb8c 	bl	800746a <__retarget_lock_acquire_recursive>
 8007d52:	4628      	mov	r0, r5
 8007d54:	4621      	mov	r1, r4
 8007d56:	f7ff ff5f 	bl	8007c18 <__sflush_r>
 8007d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d5c:	07da      	lsls	r2, r3, #31
 8007d5e:	4605      	mov	r5, r0
 8007d60:	d4e4      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	059b      	lsls	r3, r3, #22
 8007d66:	d4e1      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d6a:	f7ff fb7f 	bl	800746c <__retarget_lock_release_recursive>
 8007d6e:	e7dd      	b.n	8007d2c <_fflush_r+0xc>

08007d70 <__swhatbuf_r>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	b096      	sub	sp, #88	@ 0x58
 8007d7c:	4615      	mov	r5, r2
 8007d7e:	461e      	mov	r6, r3
 8007d80:	da0d      	bge.n	8007d9e <__swhatbuf_r+0x2e>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d88:	f04f 0100 	mov.w	r1, #0
 8007d8c:	bf14      	ite	ne
 8007d8e:	2340      	movne	r3, #64	@ 0x40
 8007d90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d94:	2000      	movs	r0, #0
 8007d96:	6031      	str	r1, [r6, #0]
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	b016      	add	sp, #88	@ 0x58
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	466a      	mov	r2, sp
 8007da0:	f000 f848 	bl	8007e34 <_fstat_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	dbec      	blt.n	8007d82 <__swhatbuf_r+0x12>
 8007da8:	9901      	ldr	r1, [sp, #4]
 8007daa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007dae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007db2:	4259      	negs	r1, r3
 8007db4:	4159      	adcs	r1, r3
 8007db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dba:	e7eb      	b.n	8007d94 <__swhatbuf_r+0x24>

08007dbc <__smakebuf_r>:
 8007dbc:	898b      	ldrh	r3, [r1, #12]
 8007dbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc0:	079d      	lsls	r5, r3, #30
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	d507      	bpl.n	8007dd8 <__smakebuf_r+0x1c>
 8007dc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	6163      	str	r3, [r4, #20]
 8007dd4:	b003      	add	sp, #12
 8007dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd8:	ab01      	add	r3, sp, #4
 8007dda:	466a      	mov	r2, sp
 8007ddc:	f7ff ffc8 	bl	8007d70 <__swhatbuf_r>
 8007de0:	9f00      	ldr	r7, [sp, #0]
 8007de2:	4605      	mov	r5, r0
 8007de4:	4639      	mov	r1, r7
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff fbbc 	bl	8007564 <_malloc_r>
 8007dec:	b948      	cbnz	r0, 8007e02 <__smakebuf_r+0x46>
 8007dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df2:	059a      	lsls	r2, r3, #22
 8007df4:	d4ee      	bmi.n	8007dd4 <__smakebuf_r+0x18>
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	f043 0302 	orr.w	r3, r3, #2
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	e7e2      	b.n	8007dc8 <__smakebuf_r+0xc>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	6020      	str	r0, [r4, #0]
 8007e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e12:	b15b      	cbz	r3, 8007e2c <__smakebuf_r+0x70>
 8007e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 f81d 	bl	8007e58 <_isatty_r>
 8007e1e:	b128      	cbz	r0, 8007e2c <__smakebuf_r+0x70>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	431d      	orrs	r5, r3
 8007e30:	81a5      	strh	r5, [r4, #12]
 8007e32:	e7cf      	b.n	8007dd4 <__smakebuf_r+0x18>

08007e34 <_fstat_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	@ (8007e54 <_fstat_r+0x20>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	f7f9 f82c 	bl	8000e9e <_fstat>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	d102      	bne.n	8007e50 <_fstat_r+0x1c>
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	b103      	cbz	r3, 8007e50 <_fstat_r+0x1c>
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	bd38      	pop	{r3, r4, r5, pc}
 8007e52:	bf00      	nop
 8007e54:	20008698 	.word	0x20008698

08007e58 <_isatty_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	@ (8007e74 <_isatty_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f9 f82b 	bl	8000ebe <_isatty>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_isatty_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_isatty_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20008698 	.word	0x20008698

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	@ (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f9 f834 	bl	8000ef0 <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20008698 	.word	0x20008698

08007e98 <_init>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_fini>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr
