
stm32Microwave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  08008830  08008830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f0  080090f0  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f8  080090f8  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f8  080090f8  0000a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009100  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b068  2**0
                  CONTENTS
 10 .bss          00009114  20000068  20000068  0000b068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000917c  2000917c  0000b068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e53b  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b25  00000000  00000000  000295d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0002e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d3  00000000  00000000  0002fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062fb  00000000  00000000  00030e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f39d  00000000  00000000  00037136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7eb5  00000000  00000000  000564d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e388  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bd8  00000000  00000000  0012e3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00134fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008818 	.word	0x08008818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008818 	.word	0x08008818

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <systick_delay_us>:

/* ---------- SysTick fallback (busy-wait in core cycles) ----------
   Assumes SysTick clock source is HCLK (Cube/HAL default).          */

static void systick_delay_us(uint32_t us)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b089      	sub	sp, #36	@ 0x24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    const uint32_t need_cycles = (SystemCoreClock / 1000000U) * us;
 8000504:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <systick_delay_us+0x74>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1a      	ldr	r2, [pc, #104]	@ (8000574 <systick_delay_us+0x78>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	0c9a      	lsrs	r2, r3, #18
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
    const uint32_t load        = SysTick->LOAD + 1U;   /* counts per wrap */
 8000518:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <systick_delay_us+0x7c>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
    uint32_t acc   = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
    uint32_t prev  = SysTick->VAL;                     /* down-counting */
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <systick_delay_us+0x7c>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	61bb      	str	r3, [r7, #24]

    while (acc < need_cycles)
 800052a:	e016      	b.n	800055a <systick_delay_us+0x5e>
    {
        uint32_t now = SysTick->VAL;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <systick_delay_us+0x7c>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	60fb      	str	r3, [r7, #12]
        uint32_t delta = (prev >= now) ? (prev - now) : (prev + load - now);
 8000532:	69ba      	ldr	r2, [r7, #24]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	429a      	cmp	r2, r3
 8000538:	d303      	bcc.n	8000542 <systick_delay_us+0x46>
 800053a:	69ba      	ldr	r2, [r7, #24]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	e004      	b.n	800054c <systick_delay_us+0x50>
 8000542:	69ba      	ldr	r2, [r7, #24]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	441a      	add	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	60bb      	str	r3, [r7, #8]
        acc  += delta;
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4413      	add	r3, r2
 8000554:	61fb      	str	r3, [r7, #28]
        prev  = now;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	61bb      	str	r3, [r7, #24]
    while (acc < need_cycles)
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	429a      	cmp	r2, r3
 8000560:	d3e4      	bcc.n	800052c <systick_delay_us+0x30>
    }
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	3724      	adds	r7, #36	@ 0x24
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000008 	.word	0x20000008
 8000574:	431bde83 	.word	0x431bde83
 8000578:	e000e010 	.word	0xe000e010

0800057c <delay_us>:
    s_dwt_ok = dwt_try_init();
    return s_dwt_ok;
}

void delay_us(uint32_t us)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    if (us == 0U) return;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d01a      	beq.n	80005c0 <delay_us+0x44>

    if (s_dwt_ok)
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <delay_us+0x4c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d012      	beq.n	80005b8 <delay_us+0x3c>
    {
        const uint32_t start  = DWT->CYCCNT;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <delay_us+0x50>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
        const uint32_t target = s_cycles_per_us * us;
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <delay_us+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
        while ((DWT->CYCCNT - start) < target) { __NOP(); }
 80005a4:	e000      	b.n	80005a8 <delay_us+0x2c>
 80005a6:	bf00      	nop
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <delay_us+0x50>)
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d8f7      	bhi.n	80005a6 <delay_us+0x2a>
 80005b6:	e004      	b.n	80005c2 <delay_us+0x46>
    }
    else
    {
        /* SysTick-based busy wait */
        systick_delay_us(us);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ff9f 	bl	80004fc <systick_delay_us>
 80005be:	e000      	b.n	80005c2 <delay_us+0x46>
    if (us == 0U) return;
 80005c0:	bf00      	nop
    }
}
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000084 	.word	0x20000084
 80005cc:	e0001000 	.word	0xe0001000
 80005d0:	20000088 	.word	0x20000088

080005d4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    if (ms == 0U) return;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d012      	beq.n	8000608 <delay_ms+0x34>

    if (s_dwt_ok)
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <delay_ms+0x3c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00a      	beq.n	8000600 <delay_ms+0x2c>
    {
        /* Loop in 1 ms chunks to avoid overflow */
        while (ms--) delay_us(1000U);
 80005ea:	e003      	b.n	80005f4 <delay_ms+0x20>
 80005ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f0:	f7ff ffc4 	bl	800057c <delay_us>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f6      	bne.n	80005ec <delay_ms+0x18>
 80005fe:	e004      	b.n	800060a <delay_ms+0x36>
    }
    else
    {
        /* Use HAL’s 1 kHz tick for accuracy & power friendliness */
        HAL_Delay(ms);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f001 fcd5 	bl	8001fb0 <HAL_Delay>
 8000606:	e000      	b.n	800060a <delay_ms+0x36>
    if (ms == 0U) return;
 8000608:	bf00      	nop
    }
}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000084 	.word	0x20000084

08000614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_DMA_Init+0x3c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <MX_DMA_Init+0x3c>)
 8000624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_DMA_Init+0x3c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 4, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	2010      	movs	r0, #16
 800063c:	f001 fd94 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000640:	2010      	movs	r0, #16
 8000642:	f001 fdad 	bl	80021a0 <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <is_printable_ascii>:
//const uint32_t tfont16_count = (uint32_t)(sizeof(tfont16)/sizeof(tfont16[0]));
const uint32_t tfont24_count = (uint32_t)(sizeof(tfont24)/sizeof(tfont24[0]));
const uint32_t tfont32_count = (uint32_t)(sizeof(tfont32)/sizeof(tfont32[0]));

/* ---- helpers ---- */
static inline int is_printable_ascii(char c) { return (c >= 32 && c <= 126); }
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b1f      	cmp	r3, #31
 8000662:	d904      	bls.n	800066e <is_printable_ascii+0x1a>
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b7e      	cmp	r3, #126	@ 0x7e
 8000668:	d801      	bhi.n	800066e <is_printable_ascii+0x1a>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <is_printable_ascii+0x1c>
 800066e:	2300      	movs	r3, #0
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <idx_from_ascii>:
static inline int idx_from_ascii(char c)    { return (int)(c - 32); }
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3b20      	subs	r3, #32
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <Font_Init>:

/* ---- build tables from master 8x16 ---- */
void Font_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
    /* 8x16 subset for ASCII ' '..'~' */
    for (int c = 32; c <= 126; ++c) {
 800069e:	2320      	movs	r3, #32
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e01d      	b.n	80006e0 <Font_Init+0x48>
        for (int row = 0; row < 16; ++row) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	e014      	b.n	80006d4 <Font_Init+0x3c>
            asc2_1608[c - 32][row] = font8x16[(uint8_t)c][row];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3b20      	subs	r3, #32
 80006b4:	4924      	ldr	r1, [pc, #144]	@ (8000748 <Font_Init+0xb0>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	4411      	add	r1, r2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	440a      	add	r2, r1
 80006be:	7811      	ldrb	r1, [r2, #0]
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <Font_Init+0xb4>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	441a      	add	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	460a      	mov	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
        for (int row = 0; row < 16; ++row) {
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	dde7      	ble.n	80006aa <Font_Init+0x12>
    for (int c = 32; c <= 126; ++c) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80006e4:	ddde      	ble.n	80006a4 <Font_Init+0xc>
        }
    }

    /* 6x12 derived from 8x16 (top 12 rows, left 6 columns; MSB-first) */
    for (int c = 32; c <= 126; ++c) {
 80006e6:	2320      	movs	r3, #32
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	e022      	b.n	8000732 <Font_Init+0x9a>
        for (int row = 0; row < 12; ++row) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	e019      	b.n	8000726 <Font_Init+0x8e>
            /* keep left 6 bits (7..2), clear rightmost 2 bits for 6px width */
            asc2_1206[c - 32][row] = (uint8_t)(font8x16[(uint8_t)c][row] & 0xFC);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <Font_Init+0xb0>)
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	441a      	add	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	3a20      	subs	r2, #32
 8000706:	f023 0303 	bic.w	r3, r3, #3
 800070a:	b2d8      	uxtb	r0, r3
 800070c:	4910      	ldr	r1, [pc, #64]	@ (8000750 <Font_Init+0xb8>)
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	18ca      	adds	r2, r1, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4602      	mov	r2, r0
 800071e:	701a      	strb	r2, [r3, #0]
        for (int row = 0; row < 12; ++row) {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b0b      	cmp	r3, #11
 800072a:	dde2      	ble.n	80006f2 <Font_Init+0x5a>
    for (int c = 32; c <= 126; ++c) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b7e      	cmp	r3, #126	@ 0x7e
 8000736:	ddd9      	ble.n	80006ec <Font_Init+0x54>
        }
    }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	080088ac 	.word	0x080088ac
 800074c:	20000500 	.word	0x20000500
 8000750:	2000008c 	.word	0x2000008c

08000754 <FONT_GetASCIIFont6x12>:

/* ---- getters for GUI ---- */
const uint8_t* FONT_GetASCIIFont6x12(char c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    if (!is_printable_ascii(c)) return NULL;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff77 	bl	8000654 <is_printable_ascii>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <FONT_GetASCIIFont6x12+0x1c>
 800076c:	2300      	movs	r3, #0
 800076e:	e00a      	b.n	8000786 <FONT_GetASCIIFont6x12+0x32>
    return asc2_1206[idx_from_ascii(c)];
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff82 	bl	800067c <idx_from_ascii>
 8000778:	4602      	mov	r2, r0
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <FONT_GetASCIIFont6x12+0x3c>)
 8000784:	4413      	add	r3, r2
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000008c 	.word	0x2000008c

08000794 <FONT_GetASCIIFont8x16>:
const uint8_t* FONT_GetASCIIFont8x16(char c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
    if (!is_printable_ascii(c)) return NULL;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff57 	bl	8000654 <is_printable_ascii>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <FONT_GetASCIIFont8x16+0x1c>
 80007ac:	2300      	movs	r3, #0
 80007ae:	e007      	b.n	80007c0 <FONT_GetASCIIFont8x16+0x2c>
    return asc2_1608[idx_from_ascii(c)];
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff62 	bl	800067c <idx_from_ascii>
 80007b8:	4603      	mov	r3, r0
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	4a02      	ldr	r2, [pc, #8]	@ (80007c8 <FONT_GetASCIIFont8x16+0x34>)
 80007be:	4413      	add	r3, r2
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000500 	.word	0x20000500

080007cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <MX_FREERTOS_Init+0x18>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_FREERTOS_Init+0x1c>)
 80007d6:	f005 f9c9 	bl	8005b6c <osThreadNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a03      	ldr	r2, [pc, #12]	@ (80007ec <MX_FREERTOS_Init+0x20>)
 80007de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	080090ac 	.word	0x080090ac
 80007e8:	080007f1 	.word	0x080007f1
 80007ec:	20000af0 	.word	0x20000af0

080007f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f005 fa49 	bl	8005c90 <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartDefaultTask+0x8>

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a35      	ldr	r2, [pc, #212]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b33      	ldr	r3, [pc, #204]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a20      	ldr	r2, [pc, #128]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_GPIO_Init+0xf4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800088c:	481a      	ldr	r0, [pc, #104]	@ (80008f8 <MX_GPIO_Init+0xf8>)
 800088e:	f002 f9ad 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000892:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <MX_GPIO_Init+0xf8>)
 80008aa:	f002 f803 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80008ae:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_GPIO_Init+0xf8>)
 80008c8:	f001 fff4 	bl	80028b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2106      	movs	r1, #6
 80008d0:	2007      	movs	r0, #7
 80008d2:	f001 fc49 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008d6:	2007      	movs	r0, #7
 80008d8:	f001 fc62 	bl	80021a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2107      	movs	r1, #7
 80008e0:	2028      	movs	r0, #40	@ 0x28
 80008e2:	f001 fc41 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e6:	2028      	movs	r0, #40	@ 0x28
 80008e8:	f001 fc5a 	bl	80021a0 <HAL_NVIC_EnableIRQ>

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	@ 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400

080008fc <mypow10>:
}

/* ===== Helpers ===== */

static uint32_t mypow10(uint8_t n)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    uint32_t r = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
    while (n--) r *= 10U;
 800090a:	e005      	b.n	8000918 <mypow10+0x1c>
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	71fa      	strb	r2, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f4      	bne.n	800090c <mypow10+0x10>
    return r;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LCD_ShowChar>:
 * mode: 0 opaque (draw BACK_COLOR on 0 bits), 1 transparent
 */
void LCD_ShowChar(uint16_t x, uint16_t y,
                  uint16_t fc, uint16_t bc,
                  uint8_t ch, uint8_t size, uint8_t mode)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	4604      	mov	r4, r0
 8000938:	4608      	mov	r0, r1
 800093a:	4611      	mov	r1, r2
 800093c:	461a      	mov	r2, r3
 800093e:	4623      	mov	r3, r4
 8000940:	80fb      	strh	r3, [r7, #6]
 8000942:	4603      	mov	r3, r0
 8000944:	80bb      	strh	r3, [r7, #4]
 8000946:	460b      	mov	r3, r1
 8000948:	807b      	strh	r3, [r7, #2]
 800094a:	4613      	mov	r3, r2
 800094c:	803b      	strh	r3, [r7, #0]
    const uint8_t *rowptr = NULL;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
    uint8_t w = (size == 12) ? 6 : 8;
 8000952:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000956:	2b0c      	cmp	r3, #12
 8000958:	d101      	bne.n	800095e <LCD_ShowChar+0x2e>
 800095a:	2306      	movs	r3, #6
 800095c:	e000      	b.n	8000960 <LCD_ShowChar+0x30>
 800095e:	2308      	movs	r3, #8
 8000960:	73fb      	strb	r3, [r7, #15]
    uint8_t h = (size == 12) ? 12 : 16;
 8000962:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000966:	2b0c      	cmp	r3, #12
 8000968:	d101      	bne.n	800096e <LCD_ShowChar+0x3e>
 800096a:	230c      	movs	r3, #12
 800096c:	e000      	b.n	8000970 <LCD_ShowChar+0x40>
 800096e:	2310      	movs	r3, #16
 8000970:	73bb      	strb	r3, [r7, #14]

    /* only printable ASCII */
    if (ch < 32 || ch > 126) return;
 8000972:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000976:	2b1f      	cmp	r3, #31
 8000978:	f240 8083 	bls.w	8000a82 <LCD_ShowChar+0x152>
 800097c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000980:	2b7e      	cmp	r3, #126	@ 0x7e
 8000982:	d87e      	bhi.n	8000a82 <LCD_ShowChar+0x152>

    /* fetch glyph rows */
    rowptr = (size == 12) ? FONT_GetASCIIFont6x12((char)ch)
                          : FONT_GetASCIIFont8x16((char)ch);
 8000984:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000988:	2b0c      	cmp	r3, #12
 800098a:	d106      	bne.n	800099a <LCD_ShowChar+0x6a>
    rowptr = (size == 12) ? FONT_GetASCIIFont6x12((char)ch)
 800098c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fedf 	bl	8000754 <FONT_GetASCIIFont6x12>
 8000996:	4603      	mov	r3, r0
 8000998:	e005      	b.n	80009a6 <LCD_ShowChar+0x76>
                          : FONT_GetASCIIFont8x16((char)ch);
 800099a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fef8 	bl	8000794 <FONT_GetASCIIFont8x16>
 80009a4:	4603      	mov	r3, r0
    rowptr = (size == 12) ? FONT_GetASCIIFont6x12((char)ch)
 80009a6:	613b      	str	r3, [r7, #16]
    if (!rowptr) return;
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d06b      	beq.n	8000a86 <LCD_ShowChar+0x156>

    /* quick reject if completely outside */
    if (x >= LCD_Width() || y >= LCD_Height()) return;
 80009ae:	f000 facb 	bl	8000f48 <LCD_Width>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d266      	bcs.n	8000a8a <LCD_ShowChar+0x15a>
 80009bc:	f000 fad0 	bl	8000f60 <LCD_Height>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d25f      	bcs.n	8000a8a <LCD_ShowChar+0x15a>

    /* per-pixel clipped draw (safe even near edges) */
    for (uint8_t row = 0; row < h; row++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	75fb      	strb	r3, [r7, #23]
 80009ce:	e053      	b.n	8000a78 <LCD_ShowChar+0x148>
        if ((uint16_t)(y + row) >= LCD_Height()) break;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	b29c      	uxth	r4, r3
 80009da:	f000 fac1 	bl	8000f60 <LCD_Height>
 80009de:	4603      	mov	r3, r0
 80009e0:	429c      	cmp	r4, r3
 80009e2:	d254      	bcs.n	8000a8e <LCD_ShowChar+0x15e>

        uint8_t bits = rowptr[row];          /* MSB-left */
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	737b      	strb	r3, [r7, #13]
        for (uint8_t col = 0; col < w; col++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	75bb      	strb	r3, [r7, #22]
 80009f2:	e038      	b.n	8000a66 <LCD_ShowChar+0x136>
            if ((uint16_t)(x + col) >= LCD_Width()) break;
 80009f4:	7dbb      	ldrb	r3, [r7, #22]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4413      	add	r3, r2
 80009fc:	b29c      	uxth	r4, r3
 80009fe:	f000 faa3 	bl	8000f48 <LCD_Width>
 8000a02:	4603      	mov	r3, r0
 8000a04:	429c      	cmp	r4, r3
 8000a06:	d233      	bcs.n	8000a70 <LCD_ShowChar+0x140>

            uint8_t mask = (uint8_t)(0x80u >> col);
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	733b      	strb	r3, [r7, #12]
            if (bits & mask) {
 8000a12:	7b7a      	ldrb	r2, [r7, #13]
 8000a14:	7b3b      	ldrb	r3, [r7, #12]
 8000a16:	4013      	ands	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00e      	beq.n	8000a3c <LCD_ShowChar+0x10c>
                LCD_DrawPixel((uint16_t)(x + col), (uint16_t)(y + row), fc);
 8000a1e:	7dbb      	ldrb	r3, [r7, #22]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4413      	add	r3, r2
 8000a26:	b298      	uxth	r0, r3
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	887a      	ldrh	r2, [r7, #2]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f000 fbcb 	bl	80011d0 <LCD_DrawPixel>
 8000a3a:	e011      	b.n	8000a60 <LCD_ShowChar+0x130>
            } else if (!mode) {
 8000a3c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10d      	bne.n	8000a60 <LCD_ShowChar+0x130>
                LCD_DrawPixel((uint16_t)(x + col), (uint16_t)(y + row), bc);
 8000a44:	7dbb      	ldrb	r3, [r7, #22]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b298      	uxth	r0, r3
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	883a      	ldrh	r2, [r7, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f000 fbb8 	bl	80011d0 <LCD_DrawPixel>
        for (uint8_t col = 0; col < w; col++) {
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	3301      	adds	r3, #1
 8000a64:	75bb      	strb	r3, [r7, #22]
 8000a66:	7dba      	ldrb	r2, [r7, #22]
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3c2      	bcc.n	80009f4 <LCD_ShowChar+0xc4>
 8000a6e:	e000      	b.n	8000a72 <LCD_ShowChar+0x142>
            if ((uint16_t)(x + col) >= LCD_Width()) break;
 8000a70:	bf00      	nop
    for (uint8_t row = 0; row < h; row++) {
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	3301      	adds	r3, #1
 8000a76:	75fb      	strb	r3, [r7, #23]
 8000a78:	7dfa      	ldrb	r2, [r7, #23]
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3a7      	bcc.n	80009d0 <LCD_ShowChar+0xa0>
 8000a80:	e006      	b.n	8000a90 <LCD_ShowChar+0x160>
    if (ch < 32 || ch > 126) return;
 8000a82:	bf00      	nop
 8000a84:	e004      	b.n	8000a90 <LCD_ShowChar+0x160>
    if (!rowptr) return;
 8000a86:	bf00      	nop
 8000a88:	e002      	b.n	8000a90 <LCD_ShowChar+0x160>
    if (x >= LCD_Width() || y >= LCD_Height()) return;
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <LCD_ShowChar+0x160>
        if ((uint16_t)(y + row) >= LCD_Height()) break;
 8000a8e:	bf00      	nop
            }
        }
    }
}
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
	...

08000a98 <LCD_ShowNum>:
        p++;
    }
}

void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af04      	add	r7, sp, #16
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	81fb      	strh	r3, [r7, #14]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	81bb      	strh	r3, [r7, #12]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	71fb      	strb	r3, [r7, #7]
    uint8_t w = (size == 12) ? 6 : 8;
 8000aae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ab2:	2b0c      	cmp	r3, #12
 8000ab4:	d101      	bne.n	8000aba <LCD_ShowNum+0x22>
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	e000      	b.n	8000abc <LCD_ShowNum+0x24>
 8000aba:	2308      	movs	r3, #8
 8000abc:	757b      	strb	r3, [r7, #21]
    uint8_t t, temp;
    uint8_t shown = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75bb      	strb	r3, [r7, #22]
    for (t = 0; t < len; t++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	75fb      	strb	r3, [r7, #23]
 8000ac6:	e05d      	b.n	8000b84 <LCD_ShowNum+0xec>
        temp = (uint8_t)((num / mypow10((uint8_t)(len - t - 1))) % 10U);
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff11 	bl	80008fc <mypow10>
 8000ada:	4602      	mov	r2, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <LCD_ShowNum+0x100>)
 8000ae4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	1aca      	subs	r2, r1, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	753b      	strb	r3, [r7, #20]
        if (!shown && t < (len - 1)) {
 8000af8:	7dbb      	ldrb	r3, [r7, #22]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d123      	bne.n	8000b46 <LCD_ShowNum+0xae>
 8000afe:	7dfa      	ldrb	r2, [r7, #23]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	429a      	cmp	r2, r3
 8000b06:	da1e      	bge.n	8000b46 <LCD_ShowNum+0xae>
            if (temp == 0) {
 8000b08:	7d3b      	ldrb	r3, [r7, #20]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d119      	bne.n	8000b42 <LCD_ShowNum+0xaa>
                LCD_ShowChar((uint16_t)(x + w*t), y, POINT_COLOR, BACK_COLOR, ' ', size, 0);
 8000b0e:	7d7b      	ldrb	r3, [r7, #21]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	fb12 f303 	smulbb	r3, r2, r3
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	4413      	add	r3, r2
 8000b20:	b298      	uxth	r0, r3
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <LCD_ShowNum+0x104>)
 8000b24:	881a      	ldrh	r2, [r3, #0]
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <LCD_ShowNum+0x108>)
 8000b28:	881c      	ldrh	r4, [r3, #0]
 8000b2a:	89b9      	ldrh	r1, [r7, #12]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2320      	movs	r3, #32
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	f7ff fef8 	bl	8000930 <LCD_ShowChar>
                continue;
 8000b40:	e01d      	b.n	8000b7e <LCD_ShowNum+0xe6>
            } else {
                shown = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	75bb      	strb	r3, [r7, #22]
            }
        }
        LCD_ShowChar((uint16_t)(x + w*t), y, POINT_COLOR, BACK_COLOR, (uint8_t)(temp + '0'), size, 0);
 8000b46:	7d7b      	ldrb	r3, [r7, #21]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	fb12 f303 	smulbb	r3, r2, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	4413      	add	r3, r2
 8000b58:	b298      	uxth	r0, r3
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <LCD_ShowNum+0x104>)
 8000b5c:	881c      	ldrh	r4, [r3, #0]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <LCD_ShowNum+0x108>)
 8000b60:	881d      	ldrh	r5, [r3, #0]
 8000b62:	7d3b      	ldrb	r3, [r7, #20]
 8000b64:	3330      	adds	r3, #48	@ 0x30
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	89b9      	ldrh	r1, [r7, #12]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	9202      	str	r2, [sp, #8]
 8000b6e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000b72:	9201      	str	r2, [sp, #4]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	462b      	mov	r3, r5
 8000b78:	4622      	mov	r2, r4
 8000b7a:	f7ff fed9 	bl	8000930 <LCD_ShowChar>
    for (t = 0; t < len; t++) {
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	3301      	adds	r3, #1
 8000b82:	75fb      	strb	r3, [r7, #23]
 8000b84:	7dfa      	ldrb	r2, [r7, #23]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d39d      	bcc.n	8000ac8 <LCD_ShowNum+0x30>
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bdb0      	pop	{r4, r5, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	cccccccd 	.word	0xcccccccd
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000af4 	.word	0x20000af4

08000ba4 <Show_Str>:
}

/* ===== Mixed strings (ASCII + Chinese) ===== */

void Show_Str(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str,uint8_t size,uint8_t mode)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	807b      	strh	r3, [r7, #2]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	803b      	strh	r3, [r7, #0]
    uint16_t x0 = x;
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	81fb      	strh	r3, [r7, #14]
    uint8_t ascii_w = (size == 12) ? 6 : 8;
 8000bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bca:	2b0c      	cmp	r3, #12
 8000bcc:	d101      	bne.n	8000bd2 <Show_Str+0x2e>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e000      	b.n	8000bd4 <Show_Str+0x30>
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	737b      	strb	r3, [r7, #13]

    while (*str != 0) {
 8000bd6:	e065      	b.n	8000ca4 <Show_Str+0x100>
        if ((uint8_t)*str > 0x80) { /* Chinese: 2 bytes */
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b80      	cmp	r3, #128	@ 0x80
 8000bde:	d921      	bls.n	8000c24 <Show_Str+0x80>
            if (x > (uint16_t)(LCD_Width() - size) || y > (uint16_t)(LCD_Height() - size)) return;
 8000be0:	f000 f9b2 	bl	8000f48 <LCD_Width>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d85a      	bhi.n	8000cae <Show_Str+0x10a>
 8000bf8:	f000 f9b2 	bl	8000f60 <LCD_Height>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	88ba      	ldrh	r2, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d84e      	bhi.n	8000cae <Show_Str+0x10a>
#if defined(HAVE_TFONT32) || defined(HAVE_TFONT24) || defined(HAVE_TFONT16)
            if      (size == 32) GUI_DrawFont32(x,y,fc,bc,str,mode);
            else if (size == 24) GUI_DrawFont24(x,y,fc,bc,str,mode);
            else                 GUI_DrawFont16(x,y,fc,bc,str,mode);
#endif
            str += 2;
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	3302      	adds	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
            x = (uint16_t)(x + size);
 8000c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4413      	add	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]
 8000c22:	e03f      	b.n	8000ca4 <Show_Str+0x100>
        } else {
            if (*str == '\r') { y = (uint16_t)(y + size); x = x0; str++; continue; }
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b0d      	cmp	r3, #13
 8000c2a:	d10b      	bne.n	8000c44 <Show_Str+0xa0>
 8000c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	80bb      	strh	r3, [r7, #4]
 8000c38:	89fb      	ldrh	r3, [r7, #14]
 8000c3a:	80fb      	strh	r3, [r7, #6]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
 8000c42:	e02f      	b.n	8000ca4 <Show_Str+0x100>
            if (x > (uint16_t)(LCD_Width() - ascii_w) || y > (uint16_t)(LCD_Height() - size)) return;
 8000c44:	f000 f980 	bl	8000f48 <LCD_Width>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	7b7b      	ldrb	r3, [r7, #13]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	88fa      	ldrh	r2, [r7, #6]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d82b      	bhi.n	8000cb2 <Show_Str+0x10e>
 8000c5a:	f000 f981 	bl	8000f60 <LCD_Height>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d81f      	bhi.n	8000cb2 <Show_Str+0x10e>
            LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	883d      	ldrh	r5, [r7, #0]
 8000c78:	887c      	ldrh	r4, [r7, #2]
 8000c7a:	88b9      	ldrh	r1, [r7, #4]
 8000c7c:	88f8      	ldrh	r0, [r7, #6]
 8000c7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000c88:	9201      	str	r2, [sp, #4]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462b      	mov	r3, r5
 8000c8e:	4622      	mov	r2, r4
 8000c90:	f7ff fe4e 	bl	8000930 <LCD_ShowChar>
            x = (uint16_t)(x + ascii_w);
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	80fb      	strh	r3, [r7, #6]
            str++;
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
    while (*str != 0) {
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d195      	bne.n	8000bd8 <Show_Str+0x34>
 8000cac:	e002      	b.n	8000cb4 <Show_Str+0x110>
            if (x > (uint16_t)(LCD_Width() - size) || y > (uint16_t)(LCD_Height() - size)) return;
 8000cae:	bf00      	nop
 8000cb0:	e000      	b.n	8000cb4 <Show_Str+0x110>
            if (x > (uint16_t)(LCD_Width() - ascii_w) || y > (uint16_t)(LCD_Height() - size)) return;
 8000cb2:	bf00      	nop
        }
    }
}
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000cbc <wr8>:
#endif

/* ====== SPI helpers ====== */
extern SPI_HandleTypeDef hspi1;

static inline void wr8(uint8_t d) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 8000cc6:	1df9      	adds	r1, r7, #7
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4803      	ldr	r0, [pc, #12]	@ (8000cdc <wr8+0x20>)
 8000cd0:	f002 fd1d 	bl	800370e <HAL_SPI_Transmit>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000b00 	.word	0x20000b00

08000ce0 <wr16>:
static inline void wr16(uint16_t d) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t b[2] = { (uint8_t)(d >> 8), (uint8_t)(d & 0xFF) };
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	733b      	strb	r3, [r7, #12]
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&hspi1, b, 2, HAL_MAX_DELAY);
 8000cfa:	f107 010c 	add.w	r1, r7, #12
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	2202      	movs	r2, #2
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <wr16+0x34>)
 8000d06:	f002 fd02 	bl	800370e <HAL_SPI_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000b00 	.word	0x20000b00

08000d18 <cmd>:
static inline void cmd(uint8_t c) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  DC_LO(); CS_LO(); wr8(c); CS_HI();
 8000d22:	2200      	movs	r2, #0
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	480a      	ldr	r0, [pc, #40]	@ (8000d50 <cmd+0x38>)
 8000d28:	f001 ff60 	bl	8002bec <HAL_GPIO_WritePin>
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2140      	movs	r1, #64	@ 0x40
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <cmd+0x38>)
 8000d32:	f001 ff5b 	bl	8002bec <HAL_GPIO_WritePin>
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffbf 	bl	8000cbc <wr8>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2140      	movs	r1, #64	@ 0x40
 8000d42:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <cmd+0x38>)
 8000d44:	f001 ff52 	bl	8002bec <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020400 	.word	0x40020400

08000d54 <data8>:
static inline void data8(uint8_t d) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  DC_HI(); CS_LO(); wr8(d); CS_HI();
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <data8+0x38>)
 8000d64:	f001 ff42 	bl	8002bec <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	@ 0x40
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <data8+0x38>)
 8000d6e:	f001 ff3d 	bl	8002bec <HAL_GPIO_WritePin>
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffa1 	bl	8000cbc <wr8>
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	@ 0x40
 8000d7e:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <data8+0x38>)
 8000d80:	f001 ff34 	bl	8002bec <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020400 	.word	0x40020400

08000d90 <data16_rep>:
static inline void data16_rep(uint16_t color, uint32_t count) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
  DC_HI(); CS_LO();
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2180      	movs	r1, #128	@ 0x80
 8000da0:	4813      	ldr	r0, [pc, #76]	@ (8000df0 <data16_rep+0x60>)
 8000da2:	f001 ff23 	bl	8002bec <HAL_GPIO_WritePin>
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	@ 0x40
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <data16_rep+0x60>)
 8000dac:	f001 ff1e 	bl	8002bec <HAL_GPIO_WritePin>
  uint8_t b[2] = { (uint8_t)(color>>8), (uint8_t)color };
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	733b      	strb	r3, [r7, #12]
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	737b      	strb	r3, [r7, #13]
  while (count--) HAL_SPI_Transmit(&hspi1, b, 2, HAL_MAX_DELAY);
 8000dc0:	e007      	b.n	8000dd2 <data16_rep+0x42>
 8000dc2:	f107 010c 	add.w	r1, r7, #12
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <data16_rep+0x64>)
 8000dce:	f002 fc9e 	bl	800370e <HAL_SPI_Transmit>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	603a      	str	r2, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f2      	bne.n	8000dc2 <data16_rep+0x32>
  CS_HI();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2140      	movs	r1, #64	@ 0x40
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <data16_rep+0x60>)
 8000de2:	f001 ff03 	bl	8002bec <HAL_GPIO_WritePin>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020400 	.word	0x40020400
 8000df4:	20000b00 	.word	0x20000b00

08000df8 <hw_reset>:

static void hw_reset(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  RST_LO(); HAL_Delay(50);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e02:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <hw_reset+0x2c>)
 8000e04:	f001 fef2 	bl	8002bec <HAL_GPIO_WritePin>
 8000e08:	2032      	movs	r0, #50	@ 0x32
 8000e0a:	f001 f8d1 	bl	8001fb0 <HAL_Delay>
  RST_HI(); HAL_Delay(120);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e14:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <hw_reset+0x2c>)
 8000e16:	f001 fee9 	bl	8002bec <HAL_GPIO_WritePin>
 8000e1a:	2078      	movs	r0, #120	@ 0x78
 8000e1c:	f001 f8c8 	bl	8001fb0 <HAL_Delay>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40020400 	.word	0x40020400

08000e28 <set_window>:

/* ====== Address window ====== */
static void set_window(uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye) {
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
 8000e42:	4613      	mov	r3, r2
 8000e44:	803b      	strh	r3, [r7, #0]
  xs += ST7735_XSTART; xe += ST7735_XSTART;
  ys += ST7735_YSTART; ye += ST7735_YSTART;

  cmd(0x2A);
 8000e46:	202a      	movs	r0, #42	@ 0x2a
 8000e48:	f7ff ff66 	bl	8000d18 <cmd>
  data8(xs >> 8); data8(xs & 0xFF);
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff7d 	bl	8000d54 <data8>
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff78 	bl	8000d54 <data8>
  data8(xe >> 8); data8(xe & 0xFF);
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff71 	bl	8000d54 <data8>
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff6c 	bl	8000d54 <data8>

  cmd(0x2B);
 8000e7c:	202b      	movs	r0, #43	@ 0x2b
 8000e7e:	f7ff ff4b 	bl	8000d18 <cmd>
  data8(ys >> 8); data8(ys & 0xFF);
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff62 	bl	8000d54 <data8>
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <data8>
  data8(ye >> 8); data8(ye & 0xFF);
 8000e9a:	883b      	ldrh	r3, [r7, #0]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff56 	bl	8000d54 <data8>
 8000ea8:	883b      	ldrh	r3, [r7, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff51 	bl	8000d54 <data8>

  cmd(0x2C);
 8000eb2:	202c      	movs	r0, #44	@ 0x2c
 8000eb4:	f7ff ff30 	bl	8000d18 <cmd>
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}

08000ec0 <set_madctl_by_rot>:

/* ====== MADCTL (orientation) ====== */
static void set_madctl_by_rot(uint8_t rot) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t madctl;
  switch (rot & 3) {
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d018      	beq.n	8000f06 <set_madctl_by_rot+0x46>
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	dc1f      	bgt.n	8000f18 <set_madctl_by_rot+0x58>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <set_madctl_by_rot+0x22>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d009      	beq.n	8000ef4 <set_madctl_by_rot+0x34>
 8000ee0:	e01a      	b.n	8000f18 <set_madctl_by_rot+0x58>
    case 0: madctl = 0xC0; _w = ST7735_WIDTH;  _h = ST7735_HEIGHT;  break; // MX|MY|BGR
 8000ee2:	23c0      	movs	r3, #192	@ 0xc0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <set_madctl_by_rot+0x80>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	801a      	strh	r2, [r3, #0]
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <set_madctl_by_rot+0x84>)
 8000eee:	22a0      	movs	r2, #160	@ 0xa0
 8000ef0:	801a      	strh	r2, [r3, #0]
 8000ef2:	e01a      	b.n	8000f2a <set_madctl_by_rot+0x6a>
    case 1: madctl = 0xA0; _w = ST7735_HEIGHT; _h = ST7735_WIDTH;   break; // MV|MY|BGR
 8000ef4:	23a0      	movs	r3, #160	@ 0xa0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <set_madctl_by_rot+0x80>)
 8000efa:	22a0      	movs	r2, #160	@ 0xa0
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <set_madctl_by_rot+0x84>)
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	801a      	strh	r2, [r3, #0]
 8000f04:	e011      	b.n	8000f2a <set_madctl_by_rot+0x6a>
    case 2: madctl = 0x00; _w = ST7735_WIDTH;  _h = ST7735_HEIGHT;  break;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <set_madctl_by_rot+0x80>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	801a      	strh	r2, [r3, #0]
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <set_madctl_by_rot+0x84>)
 8000f12:	22a0      	movs	r2, #160	@ 0xa0
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	e008      	b.n	8000f2a <set_madctl_by_rot+0x6a>
    default:madctl = 0x60; _w = ST7735_HEIGHT; _h = ST7735_WIDTH;   break; // MV|MX
 8000f18:	2360      	movs	r3, #96	@ 0x60
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <set_madctl_by_rot+0x80>)
 8000f1e:	22a0      	movs	r2, #160	@ 0xa0
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <set_madctl_by_rot+0x84>)
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	bf00      	nop
  }
  cmd(0x36); data8(madctl);
 8000f2a:	2036      	movs	r0, #54	@ 0x36
 8000f2c:	f7ff fef4 	bl	8000d18 <cmd>
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff0e 	bl	8000d54 <data8>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000002 	.word	0x20000002
 8000f44:	20000004 	.word	0x20000004

08000f48 <LCD_Width>:
/* ====== Public API ====== */

void LCD_Backlight_On(void)  { BL_ON();  }
void LCD_Backlight_Off(void) { BL_OFF(); }

uint16_t LCD_Width(void)  { return _w; }
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <LCD_Width+0x14>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000002 	.word	0x20000002

08000f60 <LCD_Height>:
uint16_t LCD_Height(void) { return _h; }
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <LCD_Height+0x14>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000004 	.word	0x20000004

08000f78 <LCD_Init>:

void LCD_SetRotation(uint8_t r) {
  set_madctl_by_rot((uint8_t)(r & 3));
}

void LCD_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  BL_OFF();
  hw_reset();
 8000f7c:	f7ff ff3c 	bl	8000df8 <hw_reset>

  cmd(0x11);                     // Sleep out
 8000f80:	2011      	movs	r0, #17
 8000f82:	f7ff fec9 	bl	8000d18 <cmd>
  HAL_Delay(120);
 8000f86:	2078      	movs	r0, #120	@ 0x78
 8000f88:	f001 f812 	bl	8001fb0 <HAL_Delay>

  // Frame rate control
  cmd(0xB1); data8(0x01); data8(0x2C); data8(0x2D);
 8000f8c:	20b1      	movs	r0, #177	@ 0xb1
 8000f8e:	f7ff fec3 	bl	8000d18 <cmd>
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fede 	bl	8000d54 <data8>
 8000f98:	202c      	movs	r0, #44	@ 0x2c
 8000f9a:	f7ff fedb 	bl	8000d54 <data8>
 8000f9e:	202d      	movs	r0, #45	@ 0x2d
 8000fa0:	f7ff fed8 	bl	8000d54 <data8>
  cmd(0xB2); data8(0x01); data8(0x2C); data8(0x2D);
 8000fa4:	20b2      	movs	r0, #178	@ 0xb2
 8000fa6:	f7ff feb7 	bl	8000d18 <cmd>
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fed2 	bl	8000d54 <data8>
 8000fb0:	202c      	movs	r0, #44	@ 0x2c
 8000fb2:	f7ff fecf 	bl	8000d54 <data8>
 8000fb6:	202d      	movs	r0, #45	@ 0x2d
 8000fb8:	f7ff fecc 	bl	8000d54 <data8>
  cmd(0xB3); data8(0x01); data8(0x2C); data8(0x2D);
 8000fbc:	20b3      	movs	r0, #179	@ 0xb3
 8000fbe:	f7ff feab 	bl	8000d18 <cmd>
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff fec6 	bl	8000d54 <data8>
 8000fc8:	202c      	movs	r0, #44	@ 0x2c
 8000fca:	f7ff fec3 	bl	8000d54 <data8>
 8000fce:	202d      	movs	r0, #45	@ 0x2d
 8000fd0:	f7ff fec0 	bl	8000d54 <data8>
             data8(0x01); data8(0x2C); data8(0x2D);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff febd 	bl	8000d54 <data8>
 8000fda:	202c      	movs	r0, #44	@ 0x2c
 8000fdc:	f7ff feba 	bl	8000d54 <data8>
 8000fe0:	202d      	movs	r0, #45	@ 0x2d
 8000fe2:	f7ff feb7 	bl	8000d54 <data8>

  cmd(0xB4); data8(0x07);        // Inversion
 8000fe6:	20b4      	movs	r0, #180	@ 0xb4
 8000fe8:	f7ff fe96 	bl	8000d18 <cmd>
 8000fec:	2007      	movs	r0, #7
 8000fee:	f7ff feb1 	bl	8000d54 <data8>

  // Power sequence
  cmd(0xC0); data8(0xA2); data8(0x02); data8(0x84);
 8000ff2:	20c0      	movs	r0, #192	@ 0xc0
 8000ff4:	f7ff fe90 	bl	8000d18 <cmd>
 8000ff8:	20a2      	movs	r0, #162	@ 0xa2
 8000ffa:	f7ff feab 	bl	8000d54 <data8>
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fea8 	bl	8000d54 <data8>
 8001004:	2084      	movs	r0, #132	@ 0x84
 8001006:	f7ff fea5 	bl	8000d54 <data8>
  cmd(0xC1); data8(0xC5);
 800100a:	20c1      	movs	r0, #193	@ 0xc1
 800100c:	f7ff fe84 	bl	8000d18 <cmd>
 8001010:	20c5      	movs	r0, #197	@ 0xc5
 8001012:	f7ff fe9f 	bl	8000d54 <data8>
  cmd(0xC2); data8(0x0A); data8(0x00);
 8001016:	20c2      	movs	r0, #194	@ 0xc2
 8001018:	f7ff fe7e 	bl	8000d18 <cmd>
 800101c:	200a      	movs	r0, #10
 800101e:	f7ff fe99 	bl	8000d54 <data8>
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fe96 	bl	8000d54 <data8>
  cmd(0xC3); data8(0x8A); data8(0x2A);
 8001028:	20c3      	movs	r0, #195	@ 0xc3
 800102a:	f7ff fe75 	bl	8000d18 <cmd>
 800102e:	208a      	movs	r0, #138	@ 0x8a
 8001030:	f7ff fe90 	bl	8000d54 <data8>
 8001034:	202a      	movs	r0, #42	@ 0x2a
 8001036:	f7ff fe8d 	bl	8000d54 <data8>
  cmd(0xC4); data8(0x8A); data8(0xEE);
 800103a:	20c4      	movs	r0, #196	@ 0xc4
 800103c:	f7ff fe6c 	bl	8000d18 <cmd>
 8001040:	208a      	movs	r0, #138	@ 0x8a
 8001042:	f7ff fe87 	bl	8000d54 <data8>
 8001046:	20ee      	movs	r0, #238	@ 0xee
 8001048:	f7ff fe84 	bl	8000d54 <data8>
  cmd(0xC5); data8(0x0E);        // VCOM
 800104c:	20c5      	movs	r0, #197	@ 0xc5
 800104e:	f7ff fe63 	bl	8000d18 <cmd>
 8001052:	200e      	movs	r0, #14
 8001054:	f7ff fe7e 	bl	8000d54 <data8>

  // Orientation (rotation 0 by default)
  set_madctl_by_rot(0);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff ff31 	bl	8000ec0 <set_madctl_by_rot>

  // Gamma
  cmd(0xE0);
 800105e:	20e0      	movs	r0, #224	@ 0xe0
 8001060:	f7ff fe5a 	bl	8000d18 <cmd>
  data8(0x0F); data8(0x1A); data8(0x0F); data8(0x18);
 8001064:	200f      	movs	r0, #15
 8001066:	f7ff fe75 	bl	8000d54 <data8>
 800106a:	201a      	movs	r0, #26
 800106c:	f7ff fe72 	bl	8000d54 <data8>
 8001070:	200f      	movs	r0, #15
 8001072:	f7ff fe6f 	bl	8000d54 <data8>
 8001076:	2018      	movs	r0, #24
 8001078:	f7ff fe6c 	bl	8000d54 <data8>
  data8(0x2F); data8(0x28); data8(0x20); data8(0x22);
 800107c:	202f      	movs	r0, #47	@ 0x2f
 800107e:	f7ff fe69 	bl	8000d54 <data8>
 8001082:	2028      	movs	r0, #40	@ 0x28
 8001084:	f7ff fe66 	bl	8000d54 <data8>
 8001088:	2020      	movs	r0, #32
 800108a:	f7ff fe63 	bl	8000d54 <data8>
 800108e:	2022      	movs	r0, #34	@ 0x22
 8001090:	f7ff fe60 	bl	8000d54 <data8>
  data8(0x1F); data8(0x1B); data8(0x23); data8(0x37);
 8001094:	201f      	movs	r0, #31
 8001096:	f7ff fe5d 	bl	8000d54 <data8>
 800109a:	201b      	movs	r0, #27
 800109c:	f7ff fe5a 	bl	8000d54 <data8>
 80010a0:	2023      	movs	r0, #35	@ 0x23
 80010a2:	f7ff fe57 	bl	8000d54 <data8>
 80010a6:	2037      	movs	r0, #55	@ 0x37
 80010a8:	f7ff fe54 	bl	8000d54 <data8>
  data8(0x00); data8(0x07); data8(0x02); data8(0x10);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fe51 	bl	8000d54 <data8>
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff fe4e 	bl	8000d54 <data8>
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff fe4b 	bl	8000d54 <data8>
 80010be:	2010      	movs	r0, #16
 80010c0:	f7ff fe48 	bl	8000d54 <data8>

  cmd(0xE1);
 80010c4:	20e1      	movs	r0, #225	@ 0xe1
 80010c6:	f7ff fe27 	bl	8000d18 <cmd>
  data8(0x0F); data8(0x1B); data8(0x0F); data8(0x17);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fe42 	bl	8000d54 <data8>
 80010d0:	201b      	movs	r0, #27
 80010d2:	f7ff fe3f 	bl	8000d54 <data8>
 80010d6:	200f      	movs	r0, #15
 80010d8:	f7ff fe3c 	bl	8000d54 <data8>
 80010dc:	2017      	movs	r0, #23
 80010de:	f7ff fe39 	bl	8000d54 <data8>
  data8(0x33); data8(0x2C); data8(0x29); data8(0x2E);
 80010e2:	2033      	movs	r0, #51	@ 0x33
 80010e4:	f7ff fe36 	bl	8000d54 <data8>
 80010e8:	202c      	movs	r0, #44	@ 0x2c
 80010ea:	f7ff fe33 	bl	8000d54 <data8>
 80010ee:	2029      	movs	r0, #41	@ 0x29
 80010f0:	f7ff fe30 	bl	8000d54 <data8>
 80010f4:	202e      	movs	r0, #46	@ 0x2e
 80010f6:	f7ff fe2d 	bl	8000d54 <data8>
  data8(0x30); data8(0x30); data8(0x39); data8(0x3F);
 80010fa:	2030      	movs	r0, #48	@ 0x30
 80010fc:	f7ff fe2a 	bl	8000d54 <data8>
 8001100:	2030      	movs	r0, #48	@ 0x30
 8001102:	f7ff fe27 	bl	8000d54 <data8>
 8001106:	2039      	movs	r0, #57	@ 0x39
 8001108:	f7ff fe24 	bl	8000d54 <data8>
 800110c:	203f      	movs	r0, #63	@ 0x3f
 800110e:	f7ff fe21 	bl	8000d54 <data8>
  data8(0x00); data8(0x07); data8(0x03); data8(0x10);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe1e 	bl	8000d54 <data8>
 8001118:	2007      	movs	r0, #7
 800111a:	f7ff fe1b 	bl	8000d54 <data8>
 800111e:	2003      	movs	r0, #3
 8001120:	f7ff fe18 	bl	8000d54 <data8>
 8001124:	2010      	movs	r0, #16
 8001126:	f7ff fe15 	bl	8000d54 <data8>

  // Column/Row range to full
  cmd(0x2A); data8(0x00); data8(0x00); data8(0x00); data8(0x7F); // X: 0..127
 800112a:	202a      	movs	r0, #42	@ 0x2a
 800112c:	f7ff fdf4 	bl	8000d18 <cmd>
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fe0f 	bl	8000d54 <data8>
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fe0c 	bl	8000d54 <data8>
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe09 	bl	8000d54 <data8>
 8001142:	207f      	movs	r0, #127	@ 0x7f
 8001144:	f7ff fe06 	bl	8000d54 <data8>
  cmd(0x2B); data8(0x00); data8(0x00); data8(0x00); data8(0x9F); // Y: 0..159
 8001148:	202b      	movs	r0, #43	@ 0x2b
 800114a:	f7ff fde5 	bl	8000d18 <cmd>
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fe00 	bl	8000d54 <data8>
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fdfd 	bl	8000d54 <data8>
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fdfa 	bl	8000d54 <data8>
 8001160:	209f      	movs	r0, #159	@ 0x9f
 8001162:	f7ff fdf7 	bl	8000d54 <data8>

  // Pixel format: 16-bit
  cmd(0x3A); data8(0x05);
 8001166:	203a      	movs	r0, #58	@ 0x3a
 8001168:	f7ff fdd6 	bl	8000d18 <cmd>
 800116c:	2005      	movs	r0, #5
 800116e:	f7ff fdf1 	bl	8000d54 <data8>

  cmd(0x29);                     // Display on
 8001172:	2029      	movs	r0, #41	@ 0x29
 8001174:	f7ff fdd0 	bl	8000d18 <cmd>

  BL_ON();
  LCD_Clear(BLACK);
 8001178:	2000      	movs	r0, #0
 800117a:	f000 f803 	bl	8001184 <LCD_Clear>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <LCD_Clear>:

void LCD_Clear(uint16_t color) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  set_window(0, 0, _w - 1, _h - 1);
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <LCD_Clear+0x44>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <LCD_Clear+0x48>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	b29b      	uxth	r3, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fe41 	bl	8000e28 <set_window>
  data16_rep(color, (uint32_t)_w * _h);
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <LCD_Clear+0x44>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <LCD_Clear+0x48>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	fb03 f202 	mul.w	r2, r3, r2
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fde9 	bl	8000d90 <data16_rep>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000002 	.word	0x20000002
 80011cc:	20000004 	.word	0x20000004

080011d0 <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	460b      	mov	r3, r1
 80011dc:	80bb      	strh	r3, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	807b      	strh	r3, [r7, #2]
  if (x >= _w || y >= _h) return;
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <LCD_DrawPixel+0x64>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d21e      	bcs.n	800122a <LCD_DrawPixel+0x5a>
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <LCD_DrawPixel+0x68>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d219      	bcs.n	800122a <LCD_DrawPixel+0x5a>
  set_window(x, y, x, y);
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	88b9      	ldrh	r1, [r7, #4]
 80011fc:	88f8      	ldrh	r0, [r7, #6]
 80011fe:	f7ff fe13 	bl	8000e28 <set_window>
  DC_HI(); CS_LO(); wr16(color); CS_HI();
 8001202:	2201      	movs	r2, #1
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	480d      	ldr	r0, [pc, #52]	@ (800123c <LCD_DrawPixel+0x6c>)
 8001208:	f001 fcf0 	bl	8002bec <HAL_GPIO_WritePin>
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	@ 0x40
 8001210:	480a      	ldr	r0, [pc, #40]	@ (800123c <LCD_DrawPixel+0x6c>)
 8001212:	f001 fceb 	bl	8002bec <HAL_GPIO_WritePin>
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd61 	bl	8000ce0 <wr16>
 800121e:	2201      	movs	r2, #1
 8001220:	2140      	movs	r1, #64	@ 0x40
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <LCD_DrawPixel+0x6c>)
 8001224:	f001 fce2 	bl	8002bec <HAL_GPIO_WritePin>
 8001228:	e000      	b.n	800122c <LCD_DrawPixel+0x5c>
  if (x >= _w || y >= _h) return;
 800122a:	bf00      	nop
}
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000002 	.word	0x20000002
 8001238:	20000004 	.word	0x20000004
 800123c:	40020400 	.word	0x40020400

08001240 <LCD_FillRect>:

void LCD_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	80fb      	strh	r3, [r7, #6]
 8001252:	4603      	mov	r3, r0
 8001254:	80bb      	strh	r3, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]
 800125a:	4613      	mov	r3, r2
 800125c:	803b      	strh	r3, [r7, #0]
  if (x >= _w || y >= _h) return;
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <LCD_FillRect+0xa0>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	88fa      	ldrh	r2, [r7, #6]
 8001264:	429a      	cmp	r2, r3
 8001266:	d237      	bcs.n	80012d8 <LCD_FillRect+0x98>
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <LCD_FillRect+0xa4>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d232      	bcs.n	80012d8 <LCD_FillRect+0x98>
  if (x + w > _w) w = _w - x;
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4413      	add	r3, r2
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <LCD_FillRect+0xa0>)
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	dd04      	ble.n	800128a <LCD_FillRect+0x4a>
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <LCD_FillRect+0xa0>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	807b      	strh	r3, [r7, #2]
  if (y + h > _h) h = _h - y;
 800128a:	88ba      	ldrh	r2, [r7, #4]
 800128c:	883b      	ldrh	r3, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <LCD_FillRect+0xa4>)
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	4293      	cmp	r3, r2
 8001296:	dd04      	ble.n	80012a2 <LCD_FillRect+0x62>
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <LCD_FillRect+0xa4>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	803b      	strh	r3, [r7, #0]
  set_window(x, y, x + w - 1, y + h - 1);
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4413      	add	r3, r2
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29c      	uxth	r4, r3
 80012ae:	88ba      	ldrh	r2, [r7, #4]
 80012b0:	883b      	ldrh	r3, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	88b9      	ldrh	r1, [r7, #4]
 80012bc:	88f8      	ldrh	r0, [r7, #6]
 80012be:	4622      	mov	r2, r4
 80012c0:	f7ff fdb2 	bl	8000e28 <set_window>
  data16_rep(color, (uint32_t)w * h);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	883a      	ldrh	r2, [r7, #0]
 80012c8:	fb03 f202 	mul.w	r2, r3, r2
 80012cc:	8b3b      	ldrh	r3, [r7, #24]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fd5d 	bl	8000d90 <data16_rep>
 80012d6:	e000      	b.n	80012da <LCD_FillRect+0x9a>
  if (x >= _w || y >= _h) return;
 80012d8:	bf00      	nop
}
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	20000002 	.word	0x20000002
 80012e4:	20000004 	.word	0x20000004

080012e8 <led_on>:
    /* Default state: off */
    led_off(led);
}

void led_on(led_d *led)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    if (!led) return;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <led_on+0x20>
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f001 fc73 	bl	8002bec <HAL_GPIO_WritePin>
 8001306:	e000      	b.n	800130a <led_on+0x22>
    if (!led) return;
 8001308:	bf00      	nop
}
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fe09 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f81f 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f7ff fa6f 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f7ff f977 	bl	8000614 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001326:	f000 fd29 	bl	8001d7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800132a:	f000 f997 	bl	800165c <MX_SPI1_Init>
  MX_TIM4_Init();
 800132e:	f000 fbf9 	bl	8001b24 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001332:	f000 fb1d 	bl	8001970 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001336:	f000 fb91 	bl	8001a5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 4, 0);  // override it, make DMA=4

  LCD_Init();
 800133a:	f7ff fe1d 	bl	8000f78 <LCD_Init>
  //LCD_SetRotation(0);
  //LCD_Backlight_On();

  Font_Init();     // builds asc2_1206 / asc2_1608 from font8x16.h
 800133e:	f7ff f9ab 	bl	8000698 <Font_Init>
  //run_text_ascii();
  //HAL_Delay(1500);


  MicrowaveCtrl mw1;
  micro_wave_init(&mw1);
 8001342:	463b      	mov	r3, r7
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f8e1 	bl	800150c <micro_wave_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800134a:	f004 fbc5 	bl	8005ad8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800134e:	f7ff fa3d 	bl	80007cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001352:	f004 fbe5 	bl	8005b20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001356:	bf00      	nop
 8001358:	e7fd      	b.n	8001356 <main+0x46>
	...

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	@ 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	@ 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f007 f964 	bl	8008638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <SystemClock_Config+0xc8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <SystemClock_Config+0xc8>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <SystemClock_Config+0xc8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <SystemClock_Config+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <SystemClock_Config+0xcc>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <SystemClock_Config+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2310      	movs	r3, #16
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013cc:	2308      	movs	r3, #8
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013d0:	2340      	movs	r3, #64	@ 0x40
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fc41 	bl	8002c68 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 f830 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80013f8:	2390      	movs	r3, #144	@ 0x90
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fea4 	bl	8003158 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001416:	f000 f81b 	bl	8001450 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	@ 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800143e:	f000 fd97 	bl	8001f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40001000 	.word	0x40001000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <servo_write_us>:
******************************************************/

/* --- local helpers ------------------------------------------------------- */

static inline void servo_write_us(uint16_t us)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
    if (us < 900u)  us = 900u;     /* safe guard */
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800146c:	d202      	bcs.n	8001474 <servo_write_us+0x18>
 800146e:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8001472:	80fb      	strh	r3, [r7, #6]
    if (us > 2100u) us = 2100u;
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	f640 0234 	movw	r2, #2100	@ 0x834
 800147a:	4293      	cmp	r3, r2
 800147c:	d902      	bls.n	8001484 <servo_write_us+0x28>
 800147e:	f640 0334 	movw	r3, #2100	@ 0x834
 8001482:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(MW_DOOR_TIM, MW_DOOR_CH, us);
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <servo_write_us+0x3c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20000ba0 	.word	0x20000ba0

0800149c <power_display>:
    }
}

/* --- UI: show power string ---------------------------------------------- */
void power_display(MicrowaveCtrl *mw)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	6078      	str	r0, [r7, #4]
    const char *txt = "Medium";
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <power_display+0x64>)
 80014a6:	60fb      	str	r3, [r7, #12]
    if (mw) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00c      	beq.n	80014c8 <power_display+0x2c>
        if      (mw->power == POWER_LOW)    txt = "Low";
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <power_display+0x20>
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <power_display+0x68>)
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e005      	b.n	80014c8 <power_display+0x2c>
        else if (mw->power == POWER_HIGH)   txt = "High";
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d101      	bne.n	80014c8 <power_display+0x2c>
 80014c4:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <power_display+0x6c>)
 80014c6:	60fb      	str	r3, [r7, #12]
    }
    /* Clear small area (x:48..127, y:60..74) -> w=80, h=15 */
    LCD_FillRect(48, 60, 80, 15, WHITE);
 80014c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	230f      	movs	r3, #15
 80014d0:	2250      	movs	r2, #80	@ 0x50
 80014d2:	213c      	movs	r1, #60	@ 0x3c
 80014d4:	2030      	movs	r0, #48	@ 0x30
 80014d6:	f7ff feb3 	bl	8001240 <LCD_FillRect>
    Show_Str(6*8, 60, RED, WHITE, (uint8_t*)txt, 16, 0);
 80014da:	2300      	movs	r3, #0
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2310      	movs	r3, #16
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014ee:	213c      	movs	r1, #60	@ 0x3c
 80014f0:	2030      	movs	r0, #48	@ 0x30
 80014f2:	f7ff fb57 	bl	8000ba4 <Show_Str>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	0800883c 	.word	0x0800883c
 8001504:	08008844 	.word	0x08008844
 8001508:	08008848 	.word	0x08008848

0800150c <micro_wave_init>:

/* --- Initialization ------------------------------------------------------ */
void micro_wave_init(MicrowaveCtrl *mw)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
    /* ----- Screen setup ----- */
    LCD_Clear(WHITE);   /* full-screen clear */
 8001514:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001518:	f7ff fe34 	bl	8001184 <LCD_Clear>
    POINT_COLOR = BLUE; /* set globals to match your UI theme */
 800151c:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <micro_wave_init+0x12c>)
 800151e:	221f      	movs	r2, #31
 8001520:	801a      	strh	r2, [r3, #0]
    BACK_COLOR  = WHITE;
 8001522:	4b46      	ldr	r3, [pc, #280]	@ (800163c <micro_wave_init+0x130>)
 8001524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001528:	801a      	strh	r2, [r3, #0]

    /* ----- Defaults ----- */
    mw->state        = STATE_STANDBY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    mw->cooking_time = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	805a      	strh	r2, [r3, #2]
    mw->power        = POWER_MEDIUM;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	711a      	strb	r2, [r3, #4]
    mw->heating      = HEATING_OFF;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	719a      	strb	r2, [r3, #6]
    mw->door         = DOOR_OPEN;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	715a      	strb	r2, [r3, #5]

    /* Panel LED on */
    led_on(&led1);
 8001548:	483d      	ldr	r0, [pc, #244]	@ (8001640 <micro_wave_init+0x134>)
 800154a:	f7ff fecd 	bl	80012e8 <led_on>

    /* ----- Splash ----- */
    Show_Str(0, 20, BLUE, WHITE, (uint8_t*)"Microwave Demo V1.1", 16, 0);
 800154e:	2300      	movs	r3, #0
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2310      	movs	r3, #16
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <micro_wave_init+0x138>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800155e:	221f      	movs	r2, #31
 8001560:	2114      	movs	r1, #20
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fb1e 	bl	8000ba4 <Show_Str>
    delay_ms(1000);
 8001568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156c:	f7ff f832 	bl	80005d4 <delay_ms>
    /* clear the top strip after splash: w=128, h=35 */
    LCD_FillRect(0, 0, 128, 35, WHITE);
 8001570:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2323      	movs	r3, #35	@ 0x23
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	2100      	movs	r1, #0
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fe5f 	bl	8001240 <LCD_FillRect>

    /* ----- Static labels & initial values ----- */
    Show_Str(0, 40, BLUE, WHITE, (uint8_t*)"Time:    s", 16, 0);
 8001582:	2300      	movs	r3, #0
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2310      	movs	r3, #16
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <micro_wave_init+0x13c>)
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001592:	221f      	movs	r2, #31
 8001594:	2128      	movs	r1, #40	@ 0x28
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fb04 	bl	8000ba4 <Show_Str>

    /* Numbers use POINT_COLOR/BACK_COLOR */
    POINT_COLOR = BLUE;
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <micro_wave_init+0x12c>)
 800159e:	221f      	movs	r2, #31
 80015a0:	801a      	strh	r2, [r3, #0]
    BACK_COLOR  = WHITE;
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <micro_wave_init+0x130>)
 80015a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a8:	801a      	strh	r2, [r3, #0]
    LCD_ShowNum(5*8, 40, mw->cooking_time, 3, 16);  /* shows 000..999 */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	2310      	movs	r3, #16
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2303      	movs	r3, #3
 80015b6:	2128      	movs	r1, #40	@ 0x28
 80015b8:	2028      	movs	r0, #40	@ 0x28
 80015ba:	f7ff fa6d 	bl	8000a98 <LCD_ShowNum>

    Show_Str(0, 60, BLUE, WHITE, (uint8_t*)"Power:0000", 16, 0);
 80015be:	2300      	movs	r3, #0
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2310      	movs	r3, #16
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <micro_wave_init+0x140>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ce:	221f      	movs	r2, #31
 80015d0:	213c      	movs	r1, #60	@ 0x3c
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fae6 	bl	8000ba4 <Show_Str>
    power_display(mw);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff5f 	bl	800149c <power_display>

    /* ----- Start PWM outputs (idempotent) ----- */
    HAL_TIM_PWM_Start(MW_DOOR_TIM,      MW_DOOR_CH);      /* servo */
 80015de:	2104      	movs	r1, #4
 80015e0:	481b      	ldr	r0, [pc, #108]	@ (8001650 <micro_wave_init+0x144>)
 80015e2:	f002 fbf3 	bl	8003dcc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(MW_HEATER_TIM,    MW_HEATER_CH);    /* heater */
 80015e6:	2108      	movs	r1, #8
 80015e8:	481a      	ldr	r0, [pc, #104]	@ (8001654 <micro_wave_init+0x148>)
 80015ea:	f002 fbef 	bl	8003dcc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(MW_TURNTABLE_TIM, MW_TURNTABLE_CH); /* turntable */
 80015ee:	210c      	movs	r1, #12
 80015f0:	4818      	ldr	r0, [pc, #96]	@ (8001654 <micro_wave_init+0x148>)
 80015f2:	f002 fbeb 	bl	8003dcc <HAL_TIM_PWM_Start>

    /* Neutral servo, ensure outputs off */
    servo_write_us(DOOR_NEUTRAL_US);
 80015f6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80015fa:	f7ff ff2f 	bl	800145c <servo_write_us>
    __HAL_TIM_SET_COMPARE(MW_HEATER_TIM,    MW_HEATER_CH,    0);
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <micro_wave_init+0x148>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(MW_TURNTABLE_TIM, MW_TURNTABLE_CH, 0);
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <micro_wave_init+0x148>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Ensure countdown timer stopped */
    HAL_TIM_Base_Stop_IT(&htim4);
 800160e:	4812      	ldr	r0, [pc, #72]	@ (8001658 <micro_wave_init+0x14c>)
 8001610:	f002 fb5e 	bl	8003cd0 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <micro_wave_init+0x14c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <micro_wave_init+0x14c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	60da      	str	r2, [r3, #12]
    __HAL_TIM_CLEAR_IT(&htim4,   TIM_IT_UPDATE);
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <micro_wave_init+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0201 	mvn.w	r2, #1
 800162c:	611a      	str	r2, [r3, #16]
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	20000af4 	.word	0x20000af4
 8001640:	20000af8 	.word	0x20000af8
 8001644:	08008850 	.word	0x08008850
 8001648:	08008864 	.word	0x08008864
 800164c:	08008870 	.word	0x08008870
 8001650:	20000ba0 	.word	0x20000ba0
 8001654:	20000be8 	.word	0x20000be8
 8001658:	20000c30 	.word	0x20000c30

0800165c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <MX_SPI1_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800168c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_SPI1_Init+0x64>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_SPI1_Init+0x64>)
 80016ae:	f001 ffa5 	bl	80035fc <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b8:	f7ff feca 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000b00 	.word	0x20000b00
 80016c4:	40013000 	.word	0x40013000

080016c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_SPI_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001722:	23e0      	movs	r3, #224	@ 0xe0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_SPI_MspInit+0x8c>)
 800173e:	f001 f8b9 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x54>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a11      	ldr	r2, [pc, #68]	@ (80017ac <HAL_MspInit+0x54>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x54>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_MspInit+0x54>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_MspInit+0x54>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_MspInit+0x54>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	210f      	movs	r1, #15
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f000 fce3 	bl	8002168 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	@ 0x38
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b33      	ldr	r3, [pc, #204]	@ (8001894 <HAL_InitTick+0xe4>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a32      	ldr	r2, [pc, #200]	@ (8001894 <HAL_InitTick+0xe4>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <HAL_InitTick+0xe4>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017dc:	f107 0210 	add.w	r2, r7, #16
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fed6 	bl	8003598 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017f6:	f001 fea7 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 80017fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80017fc:	e004      	b.n	8001808 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017fe:	f001 fea3 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8001802:	4603      	mov	r3, r0
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_InitTick+0xe8>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	3b01      	subs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <HAL_InitTick+0xec>)
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_InitTick+0xf0>)
 800181a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_InitTick+0xec>)
 800181e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001822:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_InitTick+0xec>)
 8001826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001828:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_InitTick+0xec>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_InitTick+0xec>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_InitTick+0xec>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800183c:	4817      	ldr	r0, [pc, #92]	@ (800189c <HAL_InitTick+0xec>)
 800183e:	f002 f987 	bl	8003b50 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800184c:	2b00      	cmp	r3, #0
 800184e:	d11b      	bne.n	8001888 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001850:	4812      	ldr	r0, [pc, #72]	@ (800189c <HAL_InitTick+0xec>)
 8001852:	f002 f9cd 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800185c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001860:	2b00      	cmp	r3, #0
 8001862:	d111      	bne.n	8001888 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001864:	2036      	movs	r0, #54	@ 0x36
 8001866:	f000 fc9b 	bl	80021a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d808      	bhi.n	8001882 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	2036      	movs	r0, #54	@ 0x36
 8001876:	f000 fc77 	bl	8002168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_InitTick+0xf4>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e002      	b.n	8001888 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001888:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800188c:	4618      	mov	r0, r3
 800188e:	3738      	adds	r7, #56	@ 0x38
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	431bde83 	.word	0x431bde83
 800189c:	20000b58 	.word	0x20000b58
 80018a0:	40001000 	.word	0x40001000
 80018a4:	2000000c 	.word	0x2000000c

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80018e2:	2002      	movs	r0, #2
 80018e4:	f001 f99c 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <DMA1_Stream5_IRQHandler+0x10>)
 80018f2:	f000 fda3 	bl	800243c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000cc0 	.word	0x20000cc0

08001900 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <TIM4_IRQHandler+0x10>)
 8001906:	f002 fb29 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000c30 	.word	0x20000c30

08001914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <USART2_IRQHandler+0x10>)
 800191a:	f003 f9b7 	bl	8004c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000c78 	.word	0x20000c78

08001928 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800192c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001930:	f001 f976 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM6_DAC_IRQHandler+0x10>)
 800193e:	f002 fb0d 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000b58 	.word	0x20000b58

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	@ 0x38
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019aa:	229f      	movs	r2, #159	@ 0x9f
 80019ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019b4:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019b6:	2263      	movs	r2, #99	@ 0x63
 80019b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c6:	4824      	ldr	r0, [pc, #144]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019c8:	f002 f8c2 	bl	8003b50 <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80019d2:	f7ff fd3d 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e0:	4619      	mov	r1, r3
 80019e2:	481d      	ldr	r0, [pc, #116]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019e4:	f002 fc6c 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80019ee:	f7ff fd2f 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019f2:	4819      	ldr	r0, [pc, #100]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 80019f4:	f002 f99b 	bl	8003d2e <HAL_TIM_PWM_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80019fe:	f7ff fd27 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 8001a12:	f003 f85b 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a1c:	f7ff fd18 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a20:	2360      	movs	r3, #96	@ 0x60
 8001a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001a24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2204      	movs	r2, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 8001a3a:	f002 fb7f 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a44:	f7ff fd04 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <MX_TIM2_Init+0xe8>)
 8001a4a:	f000 f917 	bl	8001c7c <HAL_TIM_MspPostInit>

}
 8001a4e:	bf00      	nop
 8001a50:	3738      	adds	r7, #56	@ 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000ba0 	.word	0x20000ba0

08001a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a80:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <MX_TIM3_Init+0xc4>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a86:	229f      	movs	r2, #159	@ 0x9f
 8001a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a92:	2263      	movs	r2, #99	@ 0x63
 8001a94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aa2:	481e      	ldr	r0, [pc, #120]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001aa4:	f002 f943 	bl	8003d2e <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001aae:	f7ff fccf 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4816      	ldr	r0, [pc, #88]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001ac2:	f003 f803 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001acc:	f7ff fcc0 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad0:	2360      	movs	r3, #96	@ 0x60
 8001ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001ae8:	f002 fb28 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001af2:	f7ff fcad 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	220c      	movs	r2, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001afe:	f002 fb1d 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b08:	f7ff fca2 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <MX_TIM3_Init+0xc0>)
 8001b0e:	f000 f8b5 	bl	8001c7c <HAL_TIM_MspPostInit>

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000be8 	.word	0x20000be8
 8001b20:	40000400 	.word	0x40000400

08001b24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <MX_TIM4_Init+0x98>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b48:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001b4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b68:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b6a:	f001 fff1 	bl	8003b50 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b74:	f7ff fc6c 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001b86:	f002 fb9b 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b90:	f7ff fc5e 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b94:	2320      	movs	r3, #32
 8001b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_TIM4_Init+0x94>)
 8001ba2:	f002 ff93 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001bac:	f7ff fc50 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000c30 	.word	0x20000c30
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bee:	e01a      	b.n	8001c26 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d115      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2105      	movs	r1, #5
 8001c1a:	201e      	movs	r0, #30
 8001c1c:	f000 faa4 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c20:	201e      	movs	r0, #30
 8001c22:	f000 fabd 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40000800 	.word	0x40000800

08001c38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10d      	bne.n	8001c66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x40>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x40>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x40>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9c:	d11e      	bne.n	8001cdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4825      	ldr	r0, [pc, #148]	@ (8001d6c <HAL_TIM_MspPostInit+0xf0>)
 8001cd6:	f000 fded 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cda:	e041      	b.n	8001d60 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <HAL_TIM_MspPostInit+0xf4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d13c      	bne.n	8001d60 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_TIM_MspPostInit+0xec>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480e      	ldr	r0, [pc, #56]	@ (8001d74 <HAL_TIM_MspPostInit+0xf8>)
 8001d3a:	f000 fdbb 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d50:	2302      	movs	r3, #2
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <HAL_TIM_MspPostInit+0xfc>)
 8001d5c:	f000 fdaa 	bl	80028b4 <HAL_GPIO_Init>
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800

08001d7c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <MX_USART2_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001db4:	f002 ff1a 	bl	8004bec <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f7ff fb47 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000c78 	.word	0x20000c78
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a35      	ldr	r2, [pc, #212]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d163      	bne.n	8001eba <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a33      	ldr	r2, [pc, #204]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4821      	ldr	r0, [pc, #132]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e46:	f000 fd35 	bl	80028b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <HAL_UART_MspInit+0x104>)
 8001e4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e86:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e8e:	4810      	ldr	r0, [pc, #64]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e90:	f000 f994 	bl	80021bc <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e9a:	f7ff fad9 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2103      	movs	r1, #3
 8001eae:	2026      	movs	r0, #38	@ 0x26
 8001eb0:	f000 f95a 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb4:	2026      	movs	r0, #38	@ 0x26
 8001eb6:	f000 f973 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40004400 	.word	0x40004400
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	20000cc0 	.word	0x20000cc0
 8001ed4:	40026088 	.word	0x40026088

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001edc:	f7ff fd36 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480c      	ldr	r0, [pc, #48]	@ (8001f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee2:	490d      	ldr	r1, [pc, #52]	@ (8001f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f006 fbfd 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7ff fa01 	bl	8001310 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f1c:	08009100 	.word	0x08009100
  ldr r2, =_sbss
 8001f20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f24:	2000917c 	.word	0x2000917c

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	@ (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f8fc 	bl	8002152 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f7ff fc28 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fbfa 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000010 	.word	0x20000010
 8001f94:	20000d20 	.word	0x20000d20

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000d20 	.word	0x20000d20

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000010 	.word	0x20000010

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	@ (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	@ (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff4c 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217a:	f7ff ff61 	bl	8002040 <__NVIC_GetPriorityGrouping>
 800217e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	6978      	ldr	r0, [r7, #20]
 8002186:	f7ff ffb1 	bl	80020ec <NVIC_EncodePriority>
 800218a:	4602      	mov	r2, r0
 800218c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff80 	bl	8002098 <__NVIC_SetPriority>
}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff54 	bl	800205c <__NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff fee6 	bl	8001f98 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e099      	b.n	800230c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	e00f      	b.n	800221a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7ff fecd 	bl	8001f98 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d908      	bls.n	800221a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e078      	b.n	800230c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e8      	bne.n	80021fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <HAL_DMA_Init+0x158>)
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	2b04      	cmp	r3, #4
 8002272:	d107      	bne.n	8002284 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	4313      	orrs	r3, r2
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f023 0307 	bic.w	r3, r3, #7
 800229a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d117      	bne.n	80022de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fa7b 	bl	80027bc <DMA_CheckFifoParam>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2240      	movs	r2, #64	@ 0x40
 80022d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022da:	2301      	movs	r3, #1
 80022dc:	e016      	b.n	800230c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa32 	bl	8002750 <DMA_CalcBaseAndBitshift>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	223f      	movs	r2, #63	@ 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	f010803f 	.word	0xf010803f

08002318 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002326:	f7ff fe37 	bl	8001f98 <HAL_GetTick>
 800232a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d008      	beq.n	800234a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2280      	movs	r2, #128	@ 0x80
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e052      	b.n	80023f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0216 	bic.w	r2, r2, #22
 8002358:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002368:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_DMA_Abort+0x62>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0208 	bic.w	r2, r2, #8
 8002388:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	e013      	b.n	80023c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239c:	f7ff fdfc 	bl	8001f98 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d90c      	bls.n	80023c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2203      	movs	r2, #3
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e015      	b.n	80023f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e4      	bne.n	800239c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	223f      	movs	r2, #63	@ 0x3f
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2280      	movs	r2, #128	@ 0x80
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00c      	b.n	8002430 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002448:	4b8e      	ldr	r3, [pc, #568]	@ (8002684 <HAL_DMA_IRQHandler+0x248>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a8e      	ldr	r2, [pc, #568]	@ (8002688 <HAL_DMA_IRQHandler+0x24c>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	2208      	movs	r2, #8
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01a      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2208      	movs	r2, #8
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	2201      	movs	r2, #1
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	f043 0202 	orr.w	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e2:	2204      	movs	r2, #4
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	2204      	movs	r2, #4
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	f043 0204 	orr.w	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	2210      	movs	r2, #16
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d043      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d03c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	2210      	movs	r2, #16
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d018      	beq.n	800257e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d108      	bne.n	800256c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d024      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
 800256a:	e01f      	b.n	80025ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e016      	b.n	80025ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	2220      	movs	r2, #32
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 808f 	beq.w	80026dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8087 	beq.w	80026dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d2:	2220      	movs	r2, #32
 80025d4:	409a      	lsls	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d136      	bne.n	8002654 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0216 	bic.w	r2, r2, #22
 80025f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002604:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_DMA_IRQHandler+0x1da>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	223f      	movs	r2, #63	@ 0x3f
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07e      	beq.n	8002748 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
        }
        return;
 8002652:	e079      	b.n	8002748 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01d      	beq.n	800269e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	2b00      	cmp	r3, #0
 8002676:	d031      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
 8002680:	e02c      	b.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
 8002682:	bf00      	nop
 8002684:	20000008 	.word	0x20000008
 8002688:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e01e      	b.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0210 	bic.w	r2, r2, #16
 80026ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2205      	movs	r2, #5
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3301      	adds	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	d307      	bcc.n	8002724 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f2      	bne.n	8002708 <HAL_DMA_IRQHandler+0x2cc>
 8002722:	e000      	b.n	8002726 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002724:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
 8002746:	e000      	b.n	800274a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002748:	bf00      	nop
    }
  }
}
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3b10      	subs	r3, #16
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800276a:	4a13      	ldr	r2, [pc, #76]	@ (80027b8 <DMA_CalcBaseAndBitshift+0x68>)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d909      	bls.n	8002792 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002790:	e007      	b.n	80027a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	aaaaaaab 	.word	0xaaaaaaab
 80027b8:	080090e8 	.word	0x080090e8

080027bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11f      	bne.n	8002816 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d856      	bhi.n	800288a <DMA_CheckFifoParam+0xce>
 80027dc:	a201      	add	r2, pc, #4	@ (adr r2, 80027e4 <DMA_CheckFifoParam+0x28>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	08002807 	.word	0x08002807
 80027ec:	080027f5 	.word	0x080027f5
 80027f0:	0800288b 	.word	0x0800288b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d046      	beq.n	800288e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e043      	b.n	800288e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800280e:	d140      	bne.n	8002892 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e03d      	b.n	8002892 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281e:	d121      	bne.n	8002864 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d837      	bhi.n	8002896 <DMA_CheckFifoParam+0xda>
 8002826:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <DMA_CheckFifoParam+0x70>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	0800283d 	.word	0x0800283d
 8002830:	08002843 	.word	0x08002843
 8002834:	0800283d 	.word	0x0800283d
 8002838:	08002855 	.word	0x08002855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e030      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d025      	beq.n	800289a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002852:	e022      	b.n	800289a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800285c:	d11f      	bne.n	800289e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002862:	e01c      	b.n	800289e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d903      	bls.n	8002872 <DMA_CheckFifoParam+0xb6>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d003      	beq.n	8002878 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002870:	e018      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      break;
 8002876:	e015      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e00b      	b.n	80028a2 <DMA_CheckFifoParam+0xe6>
      break;
 800288a:	bf00      	nop
 800288c:	e00a      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
 8002890:	e008      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e006      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002896:	bf00      	nop
 8002898:	e004      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
      break;
 80028a2:	bf00      	nop
    }
  } 
  
  return status; 
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e16b      	b.n	8002ba8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 815a 	bne.w	8002ba2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d005      	beq.n	8002906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	2b02      	cmp	r3, #2
 8002904:	d130      	bne.n	8002968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0201 	and.w	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d017      	beq.n	80029a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80b4 	beq.w	8002ba2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b60      	ldr	r3, [pc, #384]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a56:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc4 <HAL_GPIO_Init+0x310>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	@ (8002bc8 <HAL_GPIO_Init+0x314>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02b      	beq.n	8002ada <HAL_GPIO_Init+0x226>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a51      	ldr	r2, [pc, #324]	@ (8002bcc <HAL_GPIO_Init+0x318>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d025      	beq.n	8002ad6 <HAL_GPIO_Init+0x222>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a50      	ldr	r2, [pc, #320]	@ (8002bd0 <HAL_GPIO_Init+0x31c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01f      	beq.n	8002ad2 <HAL_GPIO_Init+0x21e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd4 <HAL_GPIO_Init+0x320>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x21a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x216>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8002bdc <HAL_GPIO_Init+0x328>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4c      	ldr	r2, [pc, #304]	@ (8002be0 <HAL_GPIO_Init+0x32c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8002be4 <HAL_GPIO_Init+0x330>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x20a>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e00e      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	e00c      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	e00a      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e008      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e004      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ada:	2300      	movs	r3, #0
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f002 0203 	and.w	r2, r2, #3
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aec:	4935      	ldr	r1, [pc, #212]	@ (8002bc4 <HAL_GPIO_Init+0x310>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1e:	4a32      	ldr	r2, [pc, #200]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b24:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b48:	4a27      	ldr	r2, [pc, #156]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	f67f ae90 	bls.w	80028d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40021400 	.word	0x40021400
 8002be0:	40021800 	.word	0x40021800
 8002be4:	40021c00 	.word	0x40021c00
 8002be8:	40013c00 	.word	0x40013c00

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c08:	e003      	b.n	8002c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	041a      	lsls	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c36:	4a05      	ldr	r2, [pc, #20]	@ (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f806 	bl	8002c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e267      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d075      	beq.n	8002d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c86:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b85      	ldr	r3, [pc, #532]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b82      	ldr	r3, [pc, #520]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b7e      	ldr	r3, [pc, #504]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x108>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e242      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x74>
 8002cce:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x98>
 8002ce6:	4b70      	ldr	r3, [pc, #448]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6f      	ldr	r2, [pc, #444]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6c      	ldr	r2, [pc, #432]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002d00:	4b69      	ldr	r3, [pc, #420]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a68      	ldr	r2, [pc, #416]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a65      	ldr	r2, [pc, #404]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f93a 	bl	8001f98 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7ff f936 	bl	8001f98 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e207      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xc0>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff f926 	bl	8001f98 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7ff f922 	bl	8001f98 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1f3      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0xe8>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d063      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b44      	ldr	r3, [pc, #272]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1c7      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4937      	ldr	r1, [pc, #220]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e03a      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_RCC_OscConfig+0x244>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7ff f8db 	bl	8001f98 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7ff f8d7 	bl	8001f98 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1a8      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4925      	ldr	r1, [pc, #148]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_OscConfig+0x244>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7ff f8ba 	bl	8001f98 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7ff f8b6 	bl	8001f98 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e187      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d036      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_RCC_OscConfig+0x248>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7ff f89a 	bl	8001f98 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7ff f896 	bl	8001f98 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e167      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x200>
 8002e86:	e01b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_OscConfig+0x248>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff f883 	bl	8001f98 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	e00e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7ff f87f 	bl	8001f98 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d907      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e150      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470000 	.word	0x42470000
 8002eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	4b88      	ldr	r3, [pc, #544]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ea      	bne.n	8002e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8097 	beq.w	8002ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b81      	ldr	r3, [pc, #516]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eee:	4b7a      	ldr	r3, [pc, #488]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b77      	ldr	r3, [pc, #476]	@ (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0a:	4b74      	ldr	r3, [pc, #464]	@ (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a73      	ldr	r2, [pc, #460]	@ (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7ff f83f 	bl	8001f98 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7ff f83b 	bl	8001f98 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e10c      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b6a      	ldr	r3, [pc, #424]	@ (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2ea>
 8002f44:	4b64      	ldr	r3, [pc, #400]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f48:	4a63      	ldr	r2, [pc, #396]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f50:	e01c      	b.n	8002f8c <HAL_RCC_OscConfig+0x324>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x30c>
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f66:	4b5c      	ldr	r3, [pc, #368]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x324>
 8002f74:	4b58      	ldr	r3, [pc, #352]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a57      	ldr	r2, [pc, #348]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f80:	4b55      	ldr	r3, [pc, #340]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a54      	ldr	r2, [pc, #336]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7ff f800 	bl	8001f98 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fffc 	bl	8001f98 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0cb      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	4b49      	ldr	r3, [pc, #292]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RCC_OscConfig+0x334>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe ffea 	bl	8001f98 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe ffe6 	bl	8001f98 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0b5      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ee      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	4a38      	ldr	r2, [pc, #224]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a1 	beq.w	8003148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003006:	4b34      	ldr	r3, [pc, #208]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d05c      	beq.n	80030cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d141      	bne.n	800309e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <HAL_RCC_OscConfig+0x478>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe ffba 	bl	8001f98 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe ffb6 	bl	8001f98 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e087      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	491b      	ldr	r1, [pc, #108]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x478>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe ff8f 	bl	8001f98 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe ff8b 	bl	8001f98 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e05c      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x416>
 800309c:	e054      	b.n	8003148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <HAL_RCC_OscConfig+0x478>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff78 	bl	8001f98 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe ff74 	bl	8001f98 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e045      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_RCC_OscConfig+0x470>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x444>
 80030ca:	e03d      	b.n	8003148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e038      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x4ec>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d028      	beq.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d121      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800311a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d111      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	3b01      	subs	r3, #1
 800312e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b68      	ldr	r3, [pc, #416]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90c      	bls.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e067      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4934      	ldr	r1, [pc, #208]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fe fea6 	bl	8001f98 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fea2 	bl	8001f98 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b25      	ldr	r3, [pc, #148]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d20c      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b22      	ldr	r3, [pc, #136]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	@ (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fa56 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	080090d0 	.word	0x080090d0
 800331c:	20000008 	.word	0x20000008
 8003320:	2000000c 	.word	0x2000000c

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b094      	sub	sp, #80	@ 0x50
 800332a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333c:	4b79      	ldr	r3, [pc, #484]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d00d      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x40>
 8003348:	2b08      	cmp	r3, #8
 800334a:	f200 80e1 	bhi.w	8003510 <HAL_RCC_GetSysClockFreq+0x1ec>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x34>
 8003352:	2b04      	cmp	r3, #4
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x3a>
 8003356:	e0db      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b73      	ldr	r3, [pc, #460]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x204>)
 800335a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800335c:	e0db      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800335e:	4b73      	ldr	r3, [pc, #460]	@ (800352c <HAL_RCC_GetSysClockFreq+0x208>)
 8003360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003362:	e0d8      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003364:	4b6f      	ldr	r3, [pc, #444]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800336c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336e:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337a:	4b6a      	ldr	r3, [pc, #424]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	2200      	movs	r2, #0
 8003382:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003384:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	633b      	str	r3, [r7, #48]	@ 0x30
 800338e:	2300      	movs	r3, #0
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
 8003392:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	0159      	lsls	r1, r3, #5
 80033a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a8:	0150      	lsls	r0, r2, #5
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4621      	mov	r1, r4
 80033b0:	1a51      	subs	r1, r2, r1
 80033b2:	6139      	str	r1, [r7, #16]
 80033b4:	4629      	mov	r1, r5
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c8:	4659      	mov	r1, fp
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d2:	4651      	mov	r1, sl
 80033d4:	018a      	lsls	r2, r1, #6
 80033d6:	4651      	mov	r1, sl
 80033d8:	ebb2 0801 	subs.w	r8, r2, r1
 80033dc:	4659      	mov	r1, fp
 80033de:	eb63 0901 	sbc.w	r9, r3, r1
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033f6:	4690      	mov	r8, r2
 80033f8:	4699      	mov	r9, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	eb18 0303 	adds.w	r3, r8, r3
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	462b      	mov	r3, r5
 8003404:	eb49 0303 	adc.w	r3, r9, r3
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003416:	4629      	mov	r1, r5
 8003418:	024b      	lsls	r3, r1, #9
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003420:	4621      	mov	r1, r4
 8003422:	024a      	lsls	r2, r1, #9
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003434:	f7fc fecc 	bl	80001d0 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003440:	e058      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b38      	ldr	r3, [pc, #224]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	2200      	movs	r2, #0
 800344a:	4618      	mov	r0, r3
 800344c:	4611      	mov	r1, r2
 800344e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
 8003458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800345c:	4642      	mov	r2, r8
 800345e:	464b      	mov	r3, r9
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0159      	lsls	r1, r3, #5
 800346a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346e:	0150      	lsls	r0, r2, #5
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4641      	mov	r1, r8
 8003476:	ebb2 0a01 	subs.w	sl, r2, r1
 800347a:	4649      	mov	r1, r9
 800347c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800348c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003494:	ebb2 040a 	subs.w	r4, r2, sl
 8003498:	eb63 050b 	sbc.w	r5, r3, fp
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	464b      	mov	r3, r9
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ca:	4629      	mov	r1, r5
 80034cc:	028b      	lsls	r3, r1, #10
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d4:	4621      	mov	r1, r4
 80034d6:	028a      	lsls	r2, r1, #10
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	61fa      	str	r2, [r7, #28]
 80034e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e8:	f7fc fe72 	bl	80001d0 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003518:	4618      	mov	r0, r3
 800351a:	3750      	adds	r7, #80	@ 0x50
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000008 	.word	0x20000008

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a9b      	lsrs	r3, r3, #10
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	080090e0 	.word	0x080090e0

08003570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003574:	f7ff ffdc 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	0b5b      	lsrs	r3, r3, #13
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4903      	ldr	r1, [pc, #12]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	080090e0 	.word	0x080090e0

08003598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	220f      	movs	r2, #15
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCC_GetClockConfig+0x60>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0207 	and.w	r2, r3, #7
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40023c00 	.word	0x40023c00

080035fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07b      	b.n	8003706 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d108      	bne.n	8003628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800361e:	d009      	beq.n	8003634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
 8003626:	e005      	b.n	8003634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe f83a 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800366a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	ea42 0103 	orr.w	r1, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0104 	and.w	r1, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	f003 0210 	and.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b088      	sub	sp, #32
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371e:	f7fe fc3b 	bl	8001f98 <HAL_GetTick>
 8003722:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	e12a      	b.n	800398e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x36>
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e122      	b.n	800398e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Transmit+0x48>
 8003752:	2302      	movs	r3, #2
 8003754:	e11b      	b.n	800398e <HAL_SPI_Transmit+0x280>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2203      	movs	r2, #3
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a4:	d10f      	bne.n	80037c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d007      	beq.n	80037e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ec:	d152      	bne.n	8003894 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_SPI_Transmit+0xee>
 80037f6:	8b7b      	ldrh	r3, [r7, #26]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d145      	bne.n	8003888 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	1c9a      	adds	r2, r3, #2
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003820:	e032      	b.n	8003888 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003854:	e018      	b.n	8003888 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003856:	f7fe fb9f 	bl	8001f98 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d803      	bhi.n	800386e <HAL_SPI_Transmit+0x160>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x166>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e082      	b.n	800398e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1c7      	bne.n	8003822 <HAL_SPI_Transmit+0x114>
 8003892:	e053      	b.n	800393c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_Transmit+0x194>
 800389c:	8b7b      	ldrh	r3, [r7, #26]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d147      	bne.n	8003932 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038c8:	e033      	b.n	8003932 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d113      	bne.n	8003900 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038fe:	e018      	b.n	8003932 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003900:	f7fe fb4a 	bl	8001f98 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d803      	bhi.n	8003918 <HAL_SPI_Transmit+0x20a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d102      	bne.n	800391e <HAL_SPI_Transmit+0x210>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e02d      	b.n	800398e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1c6      	bne.n	80038ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8b1 	bl	8003aa8 <SPI_EndRxTxTransaction>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800398c:	2300      	movs	r3, #0
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039a8:	f7fe faf6 	bl	8001f98 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039b8:	f7fe faee 	bl	8001f98 <HAL_GetTick>
 80039bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039be:	4b39      	ldr	r3, [pc, #228]	@ (8003aa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	015b      	lsls	r3, r3, #5
 80039c4:	0d1b      	lsrs	r3, r3, #20
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ce:	e055      	b.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d051      	beq.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d8:	f7fe fade 	bl	8001f98 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d902      	bls.n	80039ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d13d      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a06:	d111      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a10:	d004      	beq.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1a:	d107      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d10f      	bne.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e018      	b.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	e002      	b.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d19a      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2201      	movs	r2, #1
 8003abc:	2102      	movs	r1, #2
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff ff6a 	bl	8003998 <SPI_WaitFlagStateUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e032      	b.n	8003b40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ada:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <SPI_EndRxTxTransaction+0xa0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <SPI_EndRxTxTransaction+0xa4>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0d5b      	lsrs	r3, r3, #21
 8003ae6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af8:	d112      	bne.n	8003b20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff ff47 	bl	8003998 <SPI_WaitFlagStateUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e00f      	b.n	8003b40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d0f2      	beq.n	8003b20 <SPI_EndRxTxTransaction+0x78>
 8003b3a:	e000      	b.n	8003b3e <SPI_EndRxTxTransaction+0x96>
        break;
 8003b3c:	bf00      	nop
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	165e9f81 	.word	0x165e9f81

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e041      	b.n	8003be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f822 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fc86 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e04e      	b.n	8003ca6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d022      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c32:	d01d      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1e      	ldr	r2, [pc, #120]	@ (8003cbc <HAL_TIM_Base_Start_IT+0xcc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x80>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d111      	bne.n	8003c94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d010      	beq.n	8003ca4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c92:	e007      	b.n	8003ca4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40001800 	.word	0x40001800

08003cd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_TIM_Base_Stop_IT+0x48>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_Base_Stop_IT+0x48>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e041      	b.n	8003dc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd ff6f 	bl	8001c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fb97 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_TIM_PWM_Start+0x24>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e022      	b.n	8003e36 <HAL_TIM_PWM_Start+0x6a>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d109      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x3e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e015      	b.n	8003e36 <HAL_TIM_PWM_Start+0x6a>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d109      	bne.n	8003e24 <HAL_TIM_PWM_Start+0x58>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e008      	b.n	8003e36 <HAL_TIM_PWM_Start+0x6a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07c      	b.n	8003f38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x82>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e4c:	e013      	b.n	8003e76 <HAL_TIM_PWM_Start+0xaa>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x92>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e5c:	e00b      	b.n	8003e76 <HAL_TIM_PWM_Start+0xaa>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xa2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e6c:	e003      	b.n	8003e76 <HAL_TIM_PWM_Start+0xaa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fdfe 	bl	8004a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	@ (8003f40 <HAL_TIM_PWM_Start+0x174>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_PWM_Start+0xcc>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_TIM_PWM_Start+0x178>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_PWM_Start+0xd0>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_TIM_PWM_Start+0xd2>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <HAL_TIM_PWM_Start+0x174>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec4:	d01d      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_TIM_PWM_Start+0x17c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d018      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_TIM_PWM_Start+0x180>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_TIM_PWM_Start+0x184>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <HAL_TIM_PWM_Start+0x178>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_TIM_PWM_Start+0x188>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x136>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <HAL_TIM_PWM_Start+0x18c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d010      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	e007      	b.n	8003f36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0202 	mvn.w	r2, #2
 8003f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa5b 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa4d 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fa5e 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d020      	beq.n	800400c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01b      	beq.n	800400c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa35 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa27 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa38 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d020      	beq.n	8004058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01b      	beq.n	8004058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0208 	mvn.w	r2, #8
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2204      	movs	r2, #4
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa0f 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa01 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa12 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d020      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01b      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0210 	mvn.w	r2, #16
 8004074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2208      	movs	r2, #8
 800407a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9e9 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004090:	e005      	b.n	800409e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9db 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9ec 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd f9b2 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fd76 	bl	8004bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9bd 	bl	800448a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0220 	mvn.w	r2, #32
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fd48 	bl	8004bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ae      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f200 809f 	bhi.w	80042a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080042a9 	.word	0x080042a9
 8004178:	080042a9 	.word	0x080042a9
 800417c:	080042a9 	.word	0x080042a9
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080042a9 	.word	0x080042a9
 8004188:	080042a9 	.word	0x080042a9
 800418c:	080042a9 	.word	0x080042a9
 8004190:	08004227 	.word	0x08004227
 8004194:	080042a9 	.word	0x080042a9
 8004198:	080042a9 	.word	0x080042a9
 800419c:	080042a9 	.word	0x080042a9
 80041a0:	08004267 	.word	0x08004267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fa1e 	bl	80045ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
      break;
 80041e2:	e064      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa6e 	bl	80046cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
      break;
 8004224:	e043      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fac3 	bl	80047b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0208 	orr.w	r2, r2, #8
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0204 	bic.w	r2, r2, #4
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]
      break;
 8004264:	e023      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fb17 	bl	80048a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	61da      	str	r2, [r3, #28]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_ConfigClockSource+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0b4      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x186>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004314:	d03e      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xd4>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431a:	f200 8087 	bhi.w	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	f000 8086 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x172>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432a:	d87f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b70      	cmp	r3, #112	@ 0x70
 800432e:	d01a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xa6>
 8004330:	2b70      	cmp	r3, #112	@ 0x70
 8004332:	d87b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b60      	cmp	r3, #96	@ 0x60
 8004336:	d050      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x11a>
 8004338:	2b60      	cmp	r3, #96	@ 0x60
 800433a:	d877      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b50      	cmp	r3, #80	@ 0x50
 800433e:	d03c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xfa>
 8004340:	2b50      	cmp	r3, #80	@ 0x50
 8004342:	d873      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d058      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x13a>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d86f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b30      	cmp	r3, #48	@ 0x30
 800434e:	d064      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b30      	cmp	r3, #48	@ 0x30
 8004352:	d86b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d060      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d867      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05c      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d05a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	e062      	b.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	f000 fb63 	bl	8004a40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e04f      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	f000 fb4c 	bl	8004a40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b6:	609a      	str	r2, [r3, #8]
      break;
 80043b8:	e03c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fac0 	bl	800494c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2150      	movs	r1, #80	@ 0x50
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb19 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80043d8:	e02c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fadf 	bl	80049aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2160      	movs	r1, #96	@ 0x60
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fb09 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80043f8:	e01c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 faa0 	bl	800494c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2140      	movs	r1, #64	@ 0x40
 8004412:	4618      	mov	r0, r3
 8004414:	f000 faf9 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004418:	e00c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 faf0 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 800442a:	e003      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e000      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a43      	ldr	r2, [pc, #268]	@ (80045c0 <TIM_Base_SetConfig+0x120>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044be:	d00f      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	@ (80045c4 <TIM_Base_SetConfig+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	@ (80045c8 <TIM_Base_SetConfig+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3e      	ldr	r2, [pc, #248]	@ (80045cc <TIM_Base_SetConfig+0x12c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3d      	ldr	r2, [pc, #244]	@ (80045d0 <TIM_Base_SetConfig+0x130>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <TIM_Base_SetConfig+0x120>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004500:	d027      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	@ (80045c4 <TIM_Base_SetConfig+0x124>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d023      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2e      	ldr	r2, [pc, #184]	@ (80045c8 <TIM_Base_SetConfig+0x128>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2d      	ldr	r2, [pc, #180]	@ (80045cc <TIM_Base_SetConfig+0x12c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2c      	ldr	r2, [pc, #176]	@ (80045d0 <TIM_Base_SetConfig+0x130>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d017      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <TIM_Base_SetConfig+0x134>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2a      	ldr	r2, [pc, #168]	@ (80045d8 <TIM_Base_SetConfig+0x138>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a29      	ldr	r2, [pc, #164]	@ (80045dc <TIM_Base_SetConfig+0x13c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a28      	ldr	r2, [pc, #160]	@ (80045e0 <TIM_Base_SetConfig+0x140>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <TIM_Base_SetConfig+0x144>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a26      	ldr	r2, [pc, #152]	@ (80045e8 <TIM_Base_SetConfig+0x148>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d108      	bne.n	8004564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <TIM_Base_SetConfig+0x120>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0xf2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a10      	ldr	r2, [pc, #64]	@ (80045d0 <TIM_Base_SetConfig+0x130>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d103      	bne.n	800459a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40010400 	.word	0x40010400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800
 80045e0:	40001800 	.word	0x40001800
 80045e4:	40001c00 	.word	0x40001c00
 80045e8:	40002000 	.word	0x40002000

080045ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f023 0201 	bic.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <TIM_OC1_SetConfig+0xd8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC1_SetConfig+0x64>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <TIM_OC1_SetConfig+0xdc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10c      	bne.n	800466a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0308 	bic.w	r3, r3, #8
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a15      	ldr	r2, [pc, #84]	@ (80046c4 <TIM_OC1_SetConfig+0xd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC1_SetConfig+0x8e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <TIM_OC1_SetConfig+0xdc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d111      	bne.n	800469e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40010400 	.word	0x40010400

080046cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f023 0210 	bic.w	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0320 	bic.w	r3, r3, #32
 8004716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a22      	ldr	r2, [pc, #136]	@ (80047b0 <TIM_OC2_SetConfig+0xe4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC2_SetConfig+0x68>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <TIM_OC2_SetConfig+0xe8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10d      	bne.n	8004750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800474e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a17      	ldr	r2, [pc, #92]	@ (80047b0 <TIM_OC2_SetConfig+0xe4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_OC2_SetConfig+0x94>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <TIM_OC2_SetConfig+0xe8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d113      	bne.n	8004788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40010400 	.word	0x40010400

080047b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a21      	ldr	r2, [pc, #132]	@ (8004898 <TIM_OC3_SetConfig+0xe0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_OC3_SetConfig+0x66>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a20      	ldr	r2, [pc, #128]	@ (800489c <TIM_OC3_SetConfig+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10d      	bne.n	800483a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <TIM_OC3_SetConfig+0xe0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC3_SetConfig+0x92>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a15      	ldr	r2, [pc, #84]	@ (800489c <TIM_OC3_SetConfig+0xe4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d113      	bne.n	8004872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40010000 	.word	0x40010000
 800489c:	40010400 	.word	0x40010400

080048a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	031b      	lsls	r3, r3, #12
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a12      	ldr	r2, [pc, #72]	@ (8004944 <TIM_OC4_SetConfig+0xa4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC4_SetConfig+0x68>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a11      	ldr	r2, [pc, #68]	@ (8004948 <TIM_OC4_SetConfig+0xa8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800490e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400

0800494c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 030a 	bic.w	r3, r3, #10
 8004988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f023 0210 	bic.w	r2, r3, #16
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 0307 	orr.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e05a      	b.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b30:	d01d      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10c      	bne.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e042      	b.n	8004c84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd f8dc 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	@ 0x24
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fc99 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x66>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb7e 	bl	80053ec <UART_Receive_IT>
      return;
 8004cf0:	e273      	b.n	80051da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80de 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x22c>
 8004cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80d1 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_UART_IRQHandler+0xae>
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_UART_IRQHandler+0xd2>
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_UART_IRQHandler+0xf6>
 8004d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	f043 0204 	orr.w	r2, r3, #4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <HAL_UART_IRQHandler+0x126>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	f043 0208 	orr.w	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 820a 	beq.w	80051d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_UART_IRQHandler+0x14e>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb09 	bl	80053ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_UART_IRQHandler+0x17a>
 8004dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04f      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa14 	bl	8005234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d141      	bne.n	8004e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3314      	adds	r3, #20
 8004e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1d9      	bne.n	8004e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	4a8a      	ldr	r2, [pc, #552]	@ (800509c <HAL_UART_IRQHandler+0x410>)
 8004e74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fabc 	bl	80023f8 <HAL_DMA_Abort_IT>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e90:	4610      	mov	r0, r2
 8004e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00e      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9b6 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e00a      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9b2 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e006      	b.n	8004eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9ae 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eb2:	e18d      	b.n	80051d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	bf00      	nop
    return;
 8004eb6:	e18b      	b.n	80051d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f040 8167 	bne.w	8005190 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8160 	beq.w	8005190 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8159 	beq.w	8005190 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efe:	2b40      	cmp	r3, #64	@ 0x40
 8004f00:	f040 80ce 	bne.w	80050a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80a9 	beq.w	800506c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f22:	429a      	cmp	r2, r3
 8004f24:	f080 80a2 	bcs.w	800506c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3a:	f000 8088 	beq.w	800504e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1d9      	bne.n	8004f3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e1      	bne.n	8004f8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ff0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e3      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800501c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	330c      	adds	r3, #12
 800502c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005030:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005032:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800503e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e3      	bne.n	800500c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd f965 	bl	8002318 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800505c:	b29b      	uxth	r3, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	b29b      	uxth	r3, r3
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8d9 	bl	800521c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800506a:	e0b3      	b.n	80051d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005074:	429a      	cmp	r2, r3
 8005076:	f040 80ad 	bne.w	80051d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005084:	f040 80a6 	bne.w	80051d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8c1 	bl	800521c <HAL_UARTEx_RxEventCallback>
      return;
 800509a:	e09b      	b.n	80051d4 <HAL_UART_IRQHandler+0x548>
 800509c:	080052fb 	.word	0x080052fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808e 	beq.w	80051d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80050bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8089 	beq.w	80051d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80050ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e3      	bne.n	80050c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	623b      	str	r3, [r7, #32]
   return(result);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005122:	633a      	str	r2, [r7, #48]	@ 0x30
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e3      	bne.n	80050fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e3      	bne.n	8005144 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f847 	bl	800521c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800518e:	e023      	b.n	80051d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x524>
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8b7 	bl	800531c <UART_Transmit_IT>
    return;
 80051ae:	e014      	b.n	80051da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <HAL_UART_IRQHandler+0x54e>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8f7 	bl	80053bc <UART_EndTransmit_IT>
    return;
 80051ce:	e004      	b.n	80051da <HAL_UART_IRQHandler+0x54e>
    return;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_UART_IRQHandler+0x54e>
      return;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_UART_IRQHandler+0x54e>
      return;
 80051d8:	bf00      	nop
  }
}
 80051da:	37e8      	adds	r7, #232	@ 0xe8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b095      	sub	sp, #84	@ 0x54
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800525c:	643a      	str	r2, [r7, #64]	@ 0x40
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005262:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d119      	bne.n	80052e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052cc:	61ba      	str	r2, [r7, #24]
 80052ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052ee:	bf00      	nop
 80052f0:	3754      	adds	r7, #84	@ 0x54
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff7a 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b21      	cmp	r3, #33	@ 0x21
 800532e:	d13e      	bne.n	80053ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005338:	d114      	bne.n	8005364 <UART_Transmit_IT+0x48>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d110      	bne.n	8005364 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005356:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]
 8005362:	e008      	b.n	8005376 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6211      	str	r1, [r2, #32]
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10f      	bne.n	80053aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005398:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff feff 	bl	80051e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08c      	sub	sp, #48	@ 0x30
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b22      	cmp	r3, #34	@ 0x22
 8005406:	f040 80aa 	bne.w	800555e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005412:	d115      	bne.n	8005440 <UART_Receive_IT+0x54>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542e:	b29a      	uxth	r2, r3
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	1c9a      	adds	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	629a      	str	r2, [r3, #40]	@ 0x28
 800543e:	e024      	b.n	800548a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544e:	d007      	beq.n	8005460 <UART_Receive_IT+0x74>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <UART_Receive_IT+0x82>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e008      	b.n	8005480 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29b      	uxth	r3, r3
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4619      	mov	r1, r3
 8005498:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800549a:	2b00      	cmp	r3, #0
 800549c:	d15d      	bne.n	800555a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0220 	bic.w	r2, r2, #32
 80054ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d135      	bne.n	8005550 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	613b      	str	r3, [r7, #16]
   return(result);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f023 0310 	bic.w	r3, r3, #16
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550a:	623a      	str	r2, [r7, #32]
 800550c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	61bb      	str	r3, [r7, #24]
   return(result);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d10a      	bne.n	8005542 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fe67 	bl	800521c <HAL_UARTEx_RxEventCallback>
 800554e:	e002      	b.n	8005556 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fe4f 	bl	80051f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e002      	b.n	8005560 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3730      	adds	r7, #48	@ 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b0c0      	sub	sp, #256	@ 0x100
 800556e:	af00      	add	r7, sp, #0
 8005570:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005584:	68d9      	ldr	r1, [r3, #12]
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	ea40 0301 	orr.w	r3, r0, r1
 8005590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055c0:	f021 010c 	bic.w	r1, r1, #12
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ce:	430b      	orrs	r3, r1
 80055d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	ea40 0301 	orr.w	r3, r0, r1
 80055ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005834 <UART_SetConfig+0x2cc>)
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d005      	beq.n	8005608 <UART_SetConfig+0xa0>
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b8d      	ldr	r3, [pc, #564]	@ (8005838 <UART_SetConfig+0x2d0>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d104      	bne.n	8005612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fd ffb2 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 800560c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005610:	e003      	b.n	800561a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fd ff99 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8005616:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005624:	f040 810c 	bne.w	8005840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005632:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	1891      	adds	r1, r2, r2
 8005640:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005642:	415b      	adcs	r3, r3
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800564a:	4621      	mov	r1, r4
 800564c:	eb12 0801 	adds.w	r8, r2, r1
 8005650:	4629      	mov	r1, r5
 8005652:	eb43 0901 	adc.w	r9, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb18 0303 	adds.w	r3, r8, r3
 8005674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005678:	462b      	mov	r3, r5
 800567a:	eb49 0303 	adc.w	r3, r9, r3
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800568e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005696:	460b      	mov	r3, r1
 8005698:	18db      	adds	r3, r3, r3
 800569a:	653b      	str	r3, [r7, #80]	@ 0x50
 800569c:	4613      	mov	r3, r2
 800569e:	eb42 0303 	adc.w	r3, r2, r3
 80056a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056ac:	f7fa fd90 	bl	80001d0 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4b61      	ldr	r3, [pc, #388]	@ (800583c <UART_SetConfig+0x2d4>)
 80056b6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	011c      	lsls	r4, r3, #4
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056d8:	415b      	adcs	r3, r3
 80056da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056e0:	4641      	mov	r1, r8
 80056e2:	eb12 0a01 	adds.w	sl, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb43 0b01 	adc.w	fp, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005700:	4692      	mov	sl, r2
 8005702:	469b      	mov	fp, r3
 8005704:	4643      	mov	r3, r8
 8005706:	eb1a 0303 	adds.w	r3, sl, r3
 800570a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800570e:	464b      	mov	r3, r9
 8005710:	eb4b 0303 	adc.w	r3, fp, r3
 8005714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	643b      	str	r3, [r7, #64]	@ 0x40
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
 800573a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800573e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005742:	f7fa fd45 	bl	80001d0 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4611      	mov	r1, r2
 800574c:	4b3b      	ldr	r3, [pc, #236]	@ (800583c <UART_SetConfig+0x2d4>)
 800574e:	fba3 2301 	umull	r2, r3, r3, r1
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2264      	movs	r2, #100	@ 0x64
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	1acb      	subs	r3, r1, r3
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005762:	4b36      	ldr	r3, [pc, #216]	@ (800583c <UART_SetConfig+0x2d4>)
 8005764:	fba3 2302 	umull	r2, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005770:	441c      	add	r4, r3
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800577c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800578c:	415b      	adcs	r3, r3
 800578e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6339      	str	r1, [r7, #48]	@ 0x30
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057e8:	460b      	mov	r3, r1
 80057ea:	18db      	adds	r3, r3, r3
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ee:	4613      	mov	r3, r2
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057fe:	f7fa fce7 	bl	80001d0 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <UART_SetConfig+0x2d4>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	@ 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	@ 0x32
 800581a:	4a08      	ldr	r2, [pc, #32]	@ (800583c <UART_SetConfig+0x2d4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 0207 	and.w	r2, r3, #7
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4422      	add	r2, r4
 800582e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005830:	e106      	b.n	8005a40 <UART_SetConfig+0x4d8>
 8005832:	bf00      	nop
 8005834:	40011000 	.word	0x40011000
 8005838:	40011400 	.word	0x40011400
 800583c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800584a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800584e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005852:	4642      	mov	r2, r8
 8005854:	464b      	mov	r3, r9
 8005856:	1891      	adds	r1, r2, r2
 8005858:	6239      	str	r1, [r7, #32]
 800585a:	415b      	adcs	r3, r3
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
 800585e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005862:	4641      	mov	r1, r8
 8005864:	1854      	adds	r4, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb43 0501 	adc.w	r5, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	00eb      	lsls	r3, r5, #3
 8005876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587a:	00e2      	lsls	r2, r4, #3
 800587c:	4614      	mov	r4, r2
 800587e:	461d      	mov	r5, r3
 8005880:	4643      	mov	r3, r8
 8005882:	18e3      	adds	r3, r4, r3
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005888:	464b      	mov	r3, r9
 800588a:	eb45 0303 	adc.w	r3, r5, r3
 800588e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800589e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058ae:	4629      	mov	r1, r5
 80058b0:	008b      	lsls	r3, r1, #2
 80058b2:	4621      	mov	r1, r4
 80058b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b8:	4621      	mov	r1, r4
 80058ba:	008a      	lsls	r2, r1, #2
 80058bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058c0:	f7fa fc86 	bl	80001d0 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4b60      	ldr	r3, [pc, #384]	@ (8005a4c <UART_SetConfig+0x4e4>)
 80058ca:	fba3 2302 	umull	r2, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	011c      	lsls	r4, r3, #4
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	61b9      	str	r1, [r7, #24]
 80058ec:	415b      	adcs	r3, r3
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f4:	4641      	mov	r1, r8
 80058f6:	1851      	adds	r1, r2, r1
 80058f8:	6139      	str	r1, [r7, #16]
 80058fa:	4649      	mov	r1, r9
 80058fc:	414b      	adcs	r3, r1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800590c:	4659      	mov	r1, fp
 800590e:	00cb      	lsls	r3, r1, #3
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005916:	4651      	mov	r1, sl
 8005918:	00ca      	lsls	r2, r1, #3
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	4603      	mov	r3, r0
 8005920:	4642      	mov	r2, r8
 8005922:	189b      	adds	r3, r3, r2
 8005924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005928:	464b      	mov	r3, r9
 800592a:	460a      	mov	r2, r1
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800593e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800594c:	4649      	mov	r1, r9
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005956:	4641      	mov	r1, r8
 8005958:	008a      	lsls	r2, r1, #2
 800595a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800595e:	f7fa fc37 	bl	80001d0 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4611      	mov	r1, r2
 8005968:	4b38      	ldr	r3, [pc, #224]	@ (8005a4c <UART_SetConfig+0x4e4>)
 800596a:	fba3 2301 	umull	r2, r3, r3, r1
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2264      	movs	r2, #100	@ 0x64
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	1acb      	subs	r3, r1, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	@ 0x32
 800597c:	4a33      	ldr	r2, [pc, #204]	@ (8005a4c <UART_SetConfig+0x4e4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005988:	441c      	add	r4, r3
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	673b      	str	r3, [r7, #112]	@ 0x70
 8005992:	677a      	str	r2, [r7, #116]	@ 0x74
 8005994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	415b      	adcs	r3, r3
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a8:	4641      	mov	r1, r8
 80059aa:	1851      	adds	r1, r2, r1
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	4649      	mov	r1, r9
 80059b0:	414b      	adcs	r3, r1
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c0:	4659      	mov	r1, fp
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4651      	mov	r1, sl
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4651      	mov	r1, sl
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4642      	mov	r2, r8
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059da:	464b      	mov	r3, r9
 80059dc:	460a      	mov	r2, r1
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059fc:	4649      	mov	r1, r9
 80059fe:	008b      	lsls	r3, r1, #2
 8005a00:	4641      	mov	r1, r8
 8005a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a06:	4641      	mov	r1, r8
 8005a08:	008a      	lsls	r2, r1, #2
 8005a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a0e:	f7fa fbdf 	bl	80001d0 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <UART_SetConfig+0x4e4>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	@ 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	@ 0x32
 8005a2a:	4a08      	ldr	r2, [pc, #32]	@ (8005a4c <UART_SetConfig+0x4e4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4422      	add	r2, r4
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a46:	46bd      	mov	sp, r7
 8005a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a4c:	51eb851f 	.word	0x51eb851f

08005a50 <__NVIC_SetPriority>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db0a      	blt.n	8005a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	490c      	ldr	r1, [pc, #48]	@ (8005a9c <__NVIC_SetPriority+0x4c>)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a78:	e00a      	b.n	8005a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4908      	ldr	r1, [pc, #32]	@ (8005aa0 <__NVIC_SetPriority+0x50>)
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	3b04      	subs	r3, #4
 8005a88:	0112      	lsls	r2, r2, #4
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	761a      	strb	r2, [r3, #24]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e100 	.word	0xe000e100
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <SysTick_Handler+0x1c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005aac:	f001 fd46 	bl	800753c <xTaskGetSchedulerState>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ab6:	f002 fb3f 	bl	8008138 <xPortSysTickHandler>
  }
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	e000e010 	.word	0xe000e010

08005ac4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f06f 0004 	mvn.w	r0, #4
 8005ace:	f7ff ffbf 	bl	8005a50 <__NVIC_SetPriority>
#endif
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ade:	f3ef 8305 	mrs	r3, IPSR
 8005ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005aea:	f06f 0305 	mvn.w	r3, #5
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e00c      	b.n	8005b0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005af2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <osKernelInitialize+0x44>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005afa:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <osKernelInitialize+0x44>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	e002      	b.n	8005b0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b0c:	687b      	ldr	r3, [r7, #4]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000d24 	.word	0x20000d24

08005b20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b26:	f3ef 8305 	mrs	r3, IPSR
 8005b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b32:	f06f 0305 	mvn.w	r3, #5
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	e010      	b.n	8005b5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <osKernelStart+0x48>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d109      	bne.n	8005b56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b42:	f7ff ffbf 	bl	8005ac4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b46:	4b08      	ldr	r3, [pc, #32]	@ (8005b68 <osKernelStart+0x48>)
 8005b48:	2202      	movs	r2, #2
 8005b4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b4c:	f001 f892 	bl	8006c74 <vTaskStartScheduler>
      stat = osOK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e002      	b.n	8005b5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b5c:	687b      	ldr	r3, [r7, #4]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000d24 	.word	0x20000d24

08005b6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	@ 0x38
 8005b70:	af04      	add	r7, sp, #16
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7c:	f3ef 8305 	mrs	r3, IPSR
 8005b80:	617b      	str	r3, [r7, #20]
  return(result);
 8005b82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d17e      	bne.n	8005c86 <osThreadNew+0x11a>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d07b      	beq.n	8005c86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b8e:	2380      	movs	r3, #128	@ 0x80
 8005b90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b92:	2318      	movs	r3, #24
 8005b94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d045      	beq.n	8005c32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <osThreadNew+0x48>
        name = attr->name;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <osThreadNew+0x6e>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b38      	cmp	r3, #56	@ 0x38
 8005bcc:	d805      	bhi.n	8005bda <osThreadNew+0x6e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <osThreadNew+0x72>
        return (NULL);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e054      	b.n	8005c88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <osThreadNew+0xa8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2ba7      	cmp	r3, #167	@ 0xa7
 8005bfc:	d90a      	bls.n	8005c14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d006      	beq.n	8005c14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <osThreadNew+0xa8>
        mem = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e010      	b.n	8005c36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10c      	bne.n	8005c36 <osThreadNew+0xca>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d108      	bne.n	8005c36 <osThreadNew+0xca>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <osThreadNew+0xca>
          mem = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e001      	b.n	8005c36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d110      	bne.n	8005c5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c44:	9202      	str	r2, [sp, #8]
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fe1a 	bl	800688c <xTaskCreateStatic>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	e013      	b.n	8005c86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d110      	bne.n	8005c86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f107 0310 	add.w	r3, r7, #16
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fe68 	bl	800694c <xTaskCreate>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d001      	beq.n	8005c86 <osThreadNew+0x11a>
            hTask = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c86:	693b      	ldr	r3, [r7, #16]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3728      	adds	r7, #40	@ 0x28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c98:	f3ef 8305 	mrs	r3, IPSR
 8005c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <osDelay+0x1c>
    stat = osErrorISR;
 8005ca4:	f06f 0305 	mvn.w	r3, #5
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e007      	b.n	8005cbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ffa6 	bl	8006c08 <vTaskDelay>
    }
  }

  return (stat);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a07      	ldr	r2, [pc, #28]	@ (8005cf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4a06      	ldr	r2, [pc, #24]	@ (8005cf8 <vApplicationGetIdleTaskMemory+0x30>)
 8005cde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2280      	movs	r2, #128	@ 0x80
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000d28 	.word	0x20000d28
 8005cf8:	20000dd0 	.word	0x20000dd0

08005cfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	@ (8005d28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4a06      	ldr	r2, [pc, #24]	@ (8005d2c <vApplicationGetTimerTaskMemory+0x30>)
 8005d12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20000fd0 	.word	0x20000fd0
 8005d2c:	20001078 	.word	0x20001078

08005d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f103 0208 	add.w	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f103 0208 	add.w	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f103 0208 	add.w	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d103      	bne.n	8005df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e00c      	b.n	8005e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3308      	adds	r3, #8
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e002      	b.n	8005e00 <vListInsert+0x2e>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d2f6      	bcs.n	8005dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6852      	ldr	r2, [r2, #4]
 8005e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d103      	bne.n	8005e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	1e5a      	subs	r2, r3, #1
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eac:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ec4:	f002 f8a8 	bl	8008018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	68f9      	ldr	r1, [r7, #12]
 8005ed2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	441a      	add	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	441a      	add	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	22ff      	movs	r2, #255	@ 0xff
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	22ff      	movs	r2, #255	@ 0xff
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d114      	bne.n	8005f44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3310      	adds	r3, #16
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 f942 	bl	80071b0 <xTaskRemoveFromEventList>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d012      	beq.n	8005f58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <xQueueGenericReset+0xd0>)
 8005f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	e009      	b.n	8005f58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3310      	adds	r3, #16
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fef1 	bl	8005d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3324      	adds	r3, #36	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff feec 	bl	8005d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f58:	f002 f890 	bl	800807c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f5c:	2301      	movs	r3, #1
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	@ 0x38
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f80:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f9e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <xQueueGenericCreateStatic+0x56>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <xQueueGenericCreateStatic+0x5a>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueGenericCreateStatic+0x5c>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fcc:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	623b      	str	r3, [r7, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <xQueueGenericCreateStatic+0x84>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <xQueueGenericCreateStatic+0x88>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <xQueueGenericCreateStatic+0x8a>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ffa:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	61fb      	str	r3, [r7, #28]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006012:	2350      	movs	r3, #80	@ 0x50
 8006014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b50      	cmp	r3, #80	@ 0x50
 800601a:	d00b      	beq.n	8006034 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800601c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61bb      	str	r3, [r7, #24]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006034:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006048:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f805 	bl	8006066 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800605e:	4618      	mov	r0, r3
 8006060:	3730      	adds	r7, #48	@ 0x30
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e002      	b.n	8006088 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006094:	2101      	movs	r1, #1
 8006096:	69b8      	ldr	r0, [r7, #24]
 8006098:	f7ff fefe 	bl	8005e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	@ 0x38
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060ba:	2300      	movs	r3, #0
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <xQueueGenericSend+0x34>
	__asm volatile
 80060c8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x42>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <xQueueGenericSend+0x46>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueGenericSend+0x48>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xQueueGenericSend+0x64>
	__asm volatile
 80060f8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d103      	bne.n	800611e <xQueueGenericSend+0x72>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <xQueueGenericSend+0x76>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericSend+0x78>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueGenericSend+0x94>
	__asm volatile
 8006128:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	623b      	str	r3, [r7, #32]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006140:	f001 f9fc 	bl	800753c <xTaskGetSchedulerState>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <xQueueGenericSend+0xa4>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <xQueueGenericSend+0xa8>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <xQueueGenericSend+0xaa>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <xQueueGenericSend+0xc6>
	__asm volatile
 800615a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	61fb      	str	r3, [r7, #28]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006172:	f001 ff51 	bl	8008018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <xQueueGenericSend+0xdc>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d129      	bne.n	80061dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800618e:	f000 fa0f 	bl	80065b0 <prvCopyDataToQueue>
 8006192:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	3324      	adds	r3, #36	@ 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f805 	bl	80071b0 <xTaskRemoveFromEventList>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d013      	beq.n	80061d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061ac:	4b3f      	ldr	r3, [pc, #252]	@ (80062ac <xQueueGenericSend+0x200>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	e00a      	b.n	80061d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061c4:	4b39      	ldr	r3, [pc, #228]	@ (80062ac <xQueueGenericSend+0x200>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061d4:	f001 ff52 	bl	800807c <vPortExitCritical>
				return pdPASS;
 80061d8:	2301      	movs	r3, #1
 80061da:	e063      	b.n	80062a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061e2:	f001 ff4b 	bl	800807c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e05c      	b.n	80062a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 f83f 	bl	8007278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061fe:	f001 ff3d 	bl	800807c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006202:	f000 fda7 	bl	8006d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006206:	f001 ff07 	bl	8008018 <vPortEnterCritical>
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006210:	b25b      	sxtb	r3, r3
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d103      	bne.n	8006220 <xQueueGenericSend+0x174>
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006226:	b25b      	sxtb	r3, r3
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d103      	bne.n	8006236 <xQueueGenericSend+0x18a>
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006236:	f001 ff21 	bl	800807c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800623a:	1d3a      	adds	r2, r7, #4
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f001 f82e 	bl	80072a4 <xTaskCheckForTimeOut>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d124      	bne.n	8006298 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800624e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006250:	f000 faa6 	bl	80067a0 <prvIsQueueFull>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d018      	beq.n	800628c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	3310      	adds	r3, #16
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ff52 	bl	800710c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800626a:	f000 fa31 	bl	80066d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800626e:	f000 fd7f 	bl	8006d70 <xTaskResumeAll>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f47f af7c 	bne.w	8006172 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800627a:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <xQueueGenericSend+0x200>)
 800627c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	e772      	b.n	8006172 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800628c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800628e:	f000 fa1f 	bl	80066d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006292:	f000 fd6d 	bl	8006d70 <xTaskResumeAll>
 8006296:	e76c      	b.n	8006172 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800629a:	f000 fa19 	bl	80066d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800629e:	f000 fd67 	bl	8006d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3738      	adds	r7, #56	@ 0x38
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	@ 0x40
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80062c8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	e7fd      	b.n	80062dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSendFromISR+0x3e>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <xQueueGenericSendFromISR+0x42>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericSendFromISR+0x44>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80062f8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d103      	bne.n	800631e <xQueueGenericSendFromISR+0x6e>
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <xQueueGenericSendFromISR+0x72>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericSendFromISR+0x74>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006328:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	623b      	str	r3, [r7, #32]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006340:	f001 ff4a 	bl	80081d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006344:	f3ef 8211 	mrs	r2, BASEPRI
 8006348:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	61fa      	str	r2, [r7, #28]
 800635a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800635c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006368:	429a      	cmp	r2, r3
 800636a:	d302      	bcc.n	8006372 <xQueueGenericSendFromISR+0xc2>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d12f      	bne.n	80063d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006378:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006388:	f000 f912 	bl	80065b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800638c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d112      	bne.n	80063bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	3324      	adds	r3, #36	@ 0x24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 ff04 	bl	80071b0 <xTaskRemoveFromEventList>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00e      	beq.n	80063cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e007      	b.n	80063cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063c0:	3301      	adds	r3, #1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	b25a      	sxtb	r2, r3
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063cc:	2301      	movs	r3, #1
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80063d0:	e001      	b.n	80063d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3740      	adds	r7, #64	@ 0x40
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <xQueueReceive+0x32>
	__asm volatile
 8006406:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	623b      	str	r3, [r7, #32]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <xQueueReceive+0x40>
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <xQueueReceive+0x44>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <xQueueReceive+0x46>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <xQueueReceive+0x62>
	__asm volatile
 8006436:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61fb      	str	r3, [r7, #28]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800644e:	f001 f875 	bl	800753c <xTaskGetSchedulerState>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <xQueueReceive+0x72>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueReceive+0x76>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueReceive+0x78>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <xQueueReceive+0x94>
	__asm volatile
 8006468:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006480:	f001 fdca 	bl	8008018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01f      	beq.n	80064d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006494:	f000 f8f6 	bl	8006684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	1e5a      	subs	r2, r3, #1
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00f      	beq.n	80064c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	3310      	adds	r3, #16
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fe7f 	bl	80071b0 <xTaskRemoveFromEventList>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064b8:	4b3c      	ldr	r3, [pc, #240]	@ (80065ac <xQueueReceive+0x1c0>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064c8:	f001 fdd8 	bl	800807c <vPortExitCritical>
				return pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e069      	b.n	80065a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064d6:	f001 fdd1 	bl	800807c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064da:	2300      	movs	r3, #0
 80064dc:	e062      	b.n	80065a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064e4:	f107 0310 	add.w	r3, r7, #16
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fec5 	bl	8007278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ee:	2301      	movs	r3, #1
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064f2:	f001 fdc3 	bl	800807c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064f6:	f000 fc2d 	bl	8006d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064fa:	f001 fd8d 	bl	8008018 <vPortEnterCritical>
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006504:	b25b      	sxtb	r3, r3
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d103      	bne.n	8006514 <xQueueReceive+0x128>
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d103      	bne.n	800652a <xQueueReceive+0x13e>
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800652a:	f001 fda7 	bl	800807c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800652e:	1d3a      	adds	r2, r7, #4
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 feb4 	bl	80072a4 <xTaskCheckForTimeOut>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d123      	bne.n	800658a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006544:	f000 f916 	bl	8006774 <prvIsQueueEmpty>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d017      	beq.n	800657e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	3324      	adds	r3, #36	@ 0x24
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fdd8 	bl	800710c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800655c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800655e:	f000 f8b7 	bl	80066d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006562:	f000 fc05 	bl	8006d70 <xTaskResumeAll>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d189      	bne.n	8006480 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800656c:	4b0f      	ldr	r3, [pc, #60]	@ (80065ac <xQueueReceive+0x1c0>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	e780      	b.n	8006480 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800657e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006580:	f000 f8a6 	bl	80066d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006584:	f000 fbf4 	bl	8006d70 <xTaskResumeAll>
 8006588:	e77a      	b.n	8006480 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800658a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800658c:	f000 f8a0 	bl	80066d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006590:	f000 fbee 	bl	8006d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006596:	f000 f8ed 	bl	8006774 <prvIsQueueEmpty>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	f43f af6f 	beq.w	8006480 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3730      	adds	r7, #48	@ 0x30
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d14d      	bne.n	8006672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 ffcc 	bl	8007578 <xTaskPriorityDisinherit>
 80065e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e043      	b.n	8006672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d119      	bne.n	8006624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6858      	ldr	r0, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	461a      	mov	r2, r3
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	f002 f8a8 	bl	8008750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	441a      	add	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d32b      	bcc.n	8006672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	e026      	b.n	8006672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68d8      	ldr	r0, [r3, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662c:	461a      	mov	r2, r3
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	f002 f88e 	bl	8008750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	425b      	negs	r3, r3
 800663e:	441a      	add	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d207      	bcs.n	8006660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	425b      	negs	r3, r3
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d105      	bne.n	8006672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3b01      	subs	r3, #1
 8006670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800667a:	697b      	ldr	r3, [r7, #20]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	441a      	add	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d303      	bcc.n	80066b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68d9      	ldr	r1, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	461a      	mov	r2, r3
 80066c2:	6838      	ldr	r0, [r7, #0]
 80066c4:	f002 f844 	bl	8008750 <memcpy>
	}
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066d8:	f001 fc9e 	bl	8008018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e4:	e011      	b.n	800670a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d012      	beq.n	8006714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3324      	adds	r3, #36	@ 0x24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd5c 	bl	80071b0 <xTaskRemoveFromEventList>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066fe:	f000 fe35 	bl	800736c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	3b01      	subs	r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800670a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	dce9      	bgt.n	80066e6 <prvUnlockQueue+0x16>
 8006712:	e000      	b.n	8006716 <prvUnlockQueue+0x46>
					break;
 8006714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	22ff      	movs	r2, #255	@ 0xff
 800671a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800671e:	f001 fcad 	bl	800807c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006722:	f001 fc79 	bl	8008018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800672c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800672e:	e011      	b.n	8006754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d012      	beq.n	800675e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3310      	adds	r3, #16
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fd37 	bl	80071b0 <xTaskRemoveFromEventList>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006748:	f000 fe10 	bl	800736c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	3b01      	subs	r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dce9      	bgt.n	8006730 <prvUnlockQueue+0x60>
 800675c:	e000      	b.n	8006760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800675e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	22ff      	movs	r2, #255	@ 0xff
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006768:	f001 fc88 	bl	800807c <vPortExitCritical>
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800677c:	f001 fc4c 	bl	8008018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e001      	b.n	8006792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006792:	f001 fc73 	bl	800807c <vPortExitCritical>

	return xReturn;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067a8:	f001 fc36 	bl	8008018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d102      	bne.n	80067be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e001      	b.n	80067c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f001 fc5b 	bl	800807c <vPortExitCritical>

	return xReturn;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e014      	b.n	800680a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067e0:	4a0f      	ldr	r2, [pc, #60]	@ (8006820 <vQueueAddToRegistry+0x50>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067ec:	490c      	ldr	r1, [pc, #48]	@ (8006820 <vQueueAddToRegistry+0x50>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006820 <vQueueAddToRegistry+0x50>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4413      	add	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006802:	e006      	b.n	8006812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b07      	cmp	r3, #7
 800680e:	d9e7      	bls.n	80067e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20001478 	.word	0x20001478

08006824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006834:	f001 fbf0 	bl	8008018 <vPortEnterCritical>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800683e:	b25b      	sxtb	r3, r3
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d103      	bne.n	800684e <vQueueWaitForMessageRestricted+0x2a>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006854:	b25b      	sxtb	r3, r3
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d103      	bne.n	8006864 <vQueueWaitForMessageRestricted+0x40>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006864:	f001 fc0a 	bl	800807c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3324      	adds	r3, #36	@ 0x24
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fc6d 	bl	8007158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	f7ff ff26 	bl	80066d0 <prvUnlockQueue>
	}
 8006884:	bf00      	nop
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	@ 0x38
 8006890:	af04      	add	r7, sp, #16
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800689a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80068a0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	623b      	str	r3, [r7, #32]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80068be:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	61fb      	str	r3, [r7, #28]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068d6:	23a8      	movs	r3, #168	@ 0xa8
 80068d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80068de:	d00b      	beq.n	80068f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80068e0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01e      	beq.n	800693e <xTaskCreateStatic+0xb2>
 8006900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01b      	beq.n	800693e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	2202      	movs	r2, #2
 8006914:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006918:	2300      	movs	r3, #0
 800691a:	9303      	str	r3, [sp, #12]
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	9302      	str	r3, [sp, #8]
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f851 	bl	80069d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006938:	f000 f8f6 	bl	8006b28 <prvAddNewTaskToReadyList>
 800693c:	e001      	b.n	8006942 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006942:	697b      	ldr	r3, [r7, #20]
	}
 8006944:	4618      	mov	r0, r3
 8006946:	3728      	adds	r7, #40	@ 0x28
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08c      	sub	sp, #48	@ 0x30
 8006950:	af04      	add	r7, sp, #16
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fc7b 	bl	800825c <pvPortMalloc>
 8006966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800696e:	20a8      	movs	r0, #168	@ 0xa8
 8006970:	f001 fc74 	bl	800825c <pvPortMalloc>
 8006974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	631a      	str	r2, [r3, #48]	@ 0x30
 8006982:	e005      	b.n	8006990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f001 fd37 	bl	80083f8 <vPortFree>
 800698a:	e001      	b.n	8006990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d017      	beq.n	80069c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	2300      	movs	r3, #0
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	9302      	str	r3, [sp, #8]
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f80f 	bl	80069d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ba:	69f8      	ldr	r0, [r7, #28]
 80069bc:	f000 f8b4 	bl	8006b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069c0:	2301      	movs	r3, #1
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	e002      	b.n	80069cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069c6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069cc:	69bb      	ldr	r3, [r7, #24]
	}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	461a      	mov	r2, r3
 80069f0:	21a5      	movs	r1, #165	@ 0xa5
 80069f2:	f001 fe21 	bl	8008638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a00:	3b01      	subs	r3, #1
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f023 0307 	bic.w	r3, r3, #7
 8006a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006a1a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	617b      	str	r3, [r7, #20]
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	e7fd      	b.n	8006a2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01f      	beq.n	8006a78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e012      	b.n	8006a64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	7819      	ldrb	r1, [r3, #0]
 8006a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3334      	adds	r3, #52	@ 0x34
 8006a4e:	460a      	mov	r2, r1
 8006a50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	3301      	adds	r3, #1
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d9e9      	bls.n	8006a3e <prvInitialiseNewTask+0x66>
 8006a6a:	e000      	b.n	8006a6e <prvInitialiseNewTask+0x96>
			{
				break;
 8006a6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a76:	e003      	b.n	8006a80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	2b37      	cmp	r3, #55	@ 0x37
 8006a84:	d901      	bls.n	8006a8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a86:	2337      	movs	r3, #55	@ 0x37
 8006a88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	2200      	movs	r2, #0
 8006a9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff f965 	bl	8005d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f960 	bl	8005d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	3354      	adds	r3, #84	@ 0x54
 8006ada:	224c      	movs	r2, #76	@ 0x4c
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 fdaa 	bl	8008638 <memset>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b1c <prvInitialiseNewTask+0x144>)
 8006ae8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	4a0c      	ldr	r2, [pc, #48]	@ (8006b20 <prvInitialiseNewTask+0x148>)
 8006aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	4a0c      	ldr	r2, [pc, #48]	@ (8006b24 <prvInitialiseNewTask+0x14c>)
 8006af4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	69b8      	ldr	r0, [r7, #24]
 8006afc:	f001 f95a 	bl	8007db4 <pxPortInitialiseStack>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b12:	bf00      	nop
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	2000903c 	.word	0x2000903c
 8006b20:	200090a4 	.word	0x200090a4
 8006b24:	2000910c 	.word	0x2000910c

08006b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b30:	f001 fa72 	bl	8008018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b34:	4b2d      	ldr	r3, [pc, #180]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b46:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b4c:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d110      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b54:	f000 fc2e 	bl	80073b4 <prvInitialiseTaskLists>
 8006b58:	e00d      	b.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b5a:	4b26      	ldr	r3, [pc, #152]	@ (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b62:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d802      	bhi.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b70:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b76:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <prvAddNewTaskToReadyList+0x74>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	4a18      	ldr	r2, [pc, #96]	@ (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4a15      	ldr	r2, [pc, #84]	@ (8006c00 <prvAddNewTaskToReadyList+0xd8>)
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7ff f8e9 	bl	8005d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bb8:	f001 fa60 	bl	800807c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d207      	bcs.n	8006be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <prvAddNewTaskToReadyList+0xdc>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000198c 	.word	0x2000198c
 8006bf0:	200014b8 	.word	0x200014b8
 8006bf4:	20001998 	.word	0x20001998
 8006bf8:	200019a8 	.word	0x200019a8
 8006bfc:	20001994 	.word	0x20001994
 8006c00:	200014bc 	.word	0x200014bc
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1a:	4b14      	ldr	r3, [pc, #80]	@ (8006c6c <vTaskDelay+0x64>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <vTaskDelay+0x32>
	__asm volatile
 8006c22:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60bb      	str	r3, [r7, #8]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c3a:	f000 f88b 	bl	8006d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fd09 	bl	8007658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c46:	f000 f893 	bl	8006d70 <xTaskResumeAll>
 8006c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c52:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <vTaskDelay+0x68>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200019b4 	.word	0x200019b4
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	@ 0x28
 8006c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c82:	463a      	mov	r2, r7
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff f81c 	bl	8005cc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	4924      	ldr	r1, [pc, #144]	@ (8006d34 <vTaskStartScheduler+0xc0>)
 8006ca4:	4824      	ldr	r0, [pc, #144]	@ (8006d38 <vTaskStartScheduler+0xc4>)
 8006ca6:	f7ff fdf1 	bl	800688c <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a23      	ldr	r2, [pc, #140]	@ (8006d3c <vTaskStartScheduler+0xc8>)
 8006cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cb0:	4b22      	ldr	r3, [pc, #136]	@ (8006d3c <vTaskStartScheduler+0xc8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cc8:	f000 fd1a 	bl	8007700 <xTimerCreateTimerTask>
 8006ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d11b      	bne.n	8006d0c <vTaskStartScheduler+0x98>
	__asm volatile
 8006cd4:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	613b      	str	r3, [r7, #16]
}
 8006ce6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <vTaskStartScheduler+0xcc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3354      	adds	r3, #84	@ 0x54
 8006cee:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <vTaskStartScheduler+0xd0>)
 8006cf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cf2:	4b15      	ldr	r3, [pc, #84]	@ (8006d48 <vTaskStartScheduler+0xd4>)
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cfa:	4b14      	ldr	r3, [pc, #80]	@ (8006d4c <vTaskStartScheduler+0xd8>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d00:	4b13      	ldr	r3, [pc, #76]	@ (8006d50 <vTaskStartScheduler+0xdc>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d06:	f001 f8e3 	bl	8007ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d0a:	e00f      	b.n	8006d2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d10b      	bne.n	8006d2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006d14:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <vTaskStartScheduler+0xb4>
}
 8006d2c:	bf00      	nop
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	08008894 	.word	0x08008894
 8006d38:	08007385 	.word	0x08007385
 8006d3c:	200019b0 	.word	0x200019b0
 8006d40:	200014b8 	.word	0x200014b8
 8006d44:	20000018 	.word	0x20000018
 8006d48:	200019ac 	.word	0x200019ac
 8006d4c:	20001998 	.word	0x20001998
 8006d50:	20001990 	.word	0x20001990

08006d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d58:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <vTaskSuspendAll+0x18>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4a03      	ldr	r2, [pc, #12]	@ (8006d6c <vTaskSuspendAll+0x18>)
 8006d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d62:	bf00      	nop
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	200019b4 	.word	0x200019b4

08006d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d7e:	4b42      	ldr	r3, [pc, #264]	@ (8006e88 <xTaskResumeAll+0x118>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <xTaskResumeAll+0x2e>
	__asm volatile
 8006d86:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	603b      	str	r3, [r7, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d9e:	f001 f93b 	bl	8008018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006da2:	4b39      	ldr	r3, [pc, #228]	@ (8006e88 <xTaskResumeAll+0x118>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	4a37      	ldr	r2, [pc, #220]	@ (8006e88 <xTaskResumeAll+0x118>)
 8006daa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dac:	4b36      	ldr	r3, [pc, #216]	@ (8006e88 <xTaskResumeAll+0x118>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d162      	bne.n	8006e7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006db4:	4b35      	ldr	r3, [pc, #212]	@ (8006e8c <xTaskResumeAll+0x11c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d05e      	beq.n	8006e7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dbc:	e02f      	b.n	8006e1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbe:	4b34      	ldr	r3, [pc, #208]	@ (8006e90 <xTaskResumeAll+0x120>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3318      	adds	r3, #24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f83a 	bl	8005e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff f835 	bl	8005e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dde:	4b2d      	ldr	r3, [pc, #180]	@ (8006e94 <xTaskResumeAll+0x124>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d903      	bls.n	8006dee <xTaskResumeAll+0x7e>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <xTaskResumeAll+0x124>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a27      	ldr	r2, [pc, #156]	@ (8006e98 <xTaskResumeAll+0x128>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe ffc0 	bl	8005d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	4b23      	ldr	r3, [pc, #140]	@ (8006e9c <xTaskResumeAll+0x12c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d302      	bcc.n	8006e1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e18:	4b21      	ldr	r3, [pc, #132]	@ (8006ea0 <xTaskResumeAll+0x130>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <xTaskResumeAll+0x120>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1cb      	bne.n	8006dbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e2c:	f000 fb66 	bl	80074fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e30:	4b1c      	ldr	r3, [pc, #112]	@ (8006ea4 <xTaskResumeAll+0x134>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e3c:	f000 f846 	bl	8006ecc <xTaskIncrementTick>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e46:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <xTaskResumeAll+0x130>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f1      	bne.n	8006e3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <xTaskResumeAll+0x134>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <xTaskResumeAll+0x130>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea8 <xTaskResumeAll+0x138>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f001 f8ff 	bl	800807c <vPortExitCritical>

	return xAlreadyYielded;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200019b4 	.word	0x200019b4
 8006e8c:	2000198c 	.word	0x2000198c
 8006e90:	2000194c 	.word	0x2000194c
 8006e94:	20001994 	.word	0x20001994
 8006e98:	200014bc 	.word	0x200014bc
 8006e9c:	200014b8 	.word	0x200014b8
 8006ea0:	200019a0 	.word	0x200019a0
 8006ea4:	2000199c 	.word	0x2000199c
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006eb2:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <xTaskGetTickCount+0x1c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006eb8:	687b      	ldr	r3, [r7, #4]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20001990 	.word	0x20001990

08006ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8007014 <xTaskIncrementTick+0x148>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 8090 	bne.w	8007000 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8007018 <xTaskIncrementTick+0x14c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8007018 <xTaskIncrementTick+0x14c>)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d121      	bne.n	8006f38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ef4:	4b49      	ldr	r3, [pc, #292]	@ (800701c <xTaskIncrementTick+0x150>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006efe:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	603b      	str	r3, [r7, #0]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <xTaskIncrementTick+0x46>
 8006f16:	4b41      	ldr	r3, [pc, #260]	@ (800701c <xTaskIncrementTick+0x150>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	4b40      	ldr	r3, [pc, #256]	@ (8007020 <xTaskIncrementTick+0x154>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a3e      	ldr	r2, [pc, #248]	@ (800701c <xTaskIncrementTick+0x150>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4a3e      	ldr	r2, [pc, #248]	@ (8007020 <xTaskIncrementTick+0x154>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007024 <xTaskIncrementTick+0x158>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	4a3c      	ldr	r2, [pc, #240]	@ (8007024 <xTaskIncrementTick+0x158>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	f000 fae2 	bl	80074fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f38:	4b3b      	ldr	r3, [pc, #236]	@ (8007028 <xTaskIncrementTick+0x15c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d349      	bcc.n	8006fd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f42:	4b36      	ldr	r3, [pc, #216]	@ (800701c <xTaskIncrementTick+0x150>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	4b36      	ldr	r3, [pc, #216]	@ (8007028 <xTaskIncrementTick+0x15c>)
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	601a      	str	r2, [r3, #0]
					break;
 8006f54:	e03f      	b.n	8006fd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f56:	4b31      	ldr	r3, [pc, #196]	@ (800701c <xTaskIncrementTick+0x150>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d203      	bcs.n	8006f76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8007028 <xTaskIncrementTick+0x15c>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f74:	e02f      	b.n	8006fd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe ff62 	bl	8005e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe ff59 	bl	8005e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	4b25      	ldr	r3, [pc, #148]	@ (800702c <xTaskIncrementTick+0x160>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d903      	bls.n	8006fa6 <xTaskIncrementTick+0xda>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4a22      	ldr	r2, [pc, #136]	@ (800702c <xTaskIncrementTick+0x160>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007030 <xTaskIncrementTick+0x164>)
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f7fe fee4 	bl	8005d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8007034 <xTaskIncrementTick+0x168>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3b8      	bcc.n	8006f42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd4:	e7b5      	b.n	8006f42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fd6:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <xTaskIncrementTick+0x168>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	4914      	ldr	r1, [pc, #80]	@ (8007030 <xTaskIncrementTick+0x164>)
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d901      	bls.n	8006ff2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ff2:	4b11      	ldr	r3, [pc, #68]	@ (8007038 <xTaskIncrementTick+0x16c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e004      	b.n	800700a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007000:	4b0e      	ldr	r3, [pc, #56]	@ (800703c <xTaskIncrementTick+0x170>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a0d      	ldr	r2, [pc, #52]	@ (800703c <xTaskIncrementTick+0x170>)
 8007008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800700a:	697b      	ldr	r3, [r7, #20]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	200019b4 	.word	0x200019b4
 8007018:	20001990 	.word	0x20001990
 800701c:	20001944 	.word	0x20001944
 8007020:	20001948 	.word	0x20001948
 8007024:	200019a4 	.word	0x200019a4
 8007028:	200019ac 	.word	0x200019ac
 800702c:	20001994 	.word	0x20001994
 8007030:	200014bc 	.word	0x200014bc
 8007034:	200014b8 	.word	0x200014b8
 8007038:	200019a0 	.word	0x200019a0
 800703c:	2000199c 	.word	0x2000199c

08007040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007046:	4b2b      	ldr	r3, [pc, #172]	@ (80070f4 <vTaskSwitchContext+0xb4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800704e:	4b2a      	ldr	r3, [pc, #168]	@ (80070f8 <vTaskSwitchContext+0xb8>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007054:	e047      	b.n	80070e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007056:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <vTaskSwitchContext+0xb8>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705c:	4b27      	ldr	r3, [pc, #156]	@ (80070fc <vTaskSwitchContext+0xbc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e011      	b.n	8007088 <vTaskSwitchContext+0x48>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <vTaskSwitchContext+0x42>
	__asm volatile
 800706a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	607b      	str	r3, [r7, #4]
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	e7fd      	b.n	800707e <vTaskSwitchContext+0x3e>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3b01      	subs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	491d      	ldr	r1, [pc, #116]	@ (8007100 <vTaskSwitchContext+0xc0>)
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0e3      	beq.n	8007064 <vTaskSwitchContext+0x24>
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4a16      	ldr	r2, [pc, #88]	@ (8007100 <vTaskSwitchContext+0xc0>)
 80070a8:	4413      	add	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3308      	adds	r3, #8
 80070be:	429a      	cmp	r2, r3
 80070c0:	d104      	bne.n	80070cc <vTaskSwitchContext+0x8c>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	605a      	str	r2, [r3, #4]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007104 <vTaskSwitchContext+0xc4>)
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <vTaskSwitchContext+0xbc>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070dc:	4b09      	ldr	r3, [pc, #36]	@ (8007104 <vTaskSwitchContext+0xc4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3354      	adds	r3, #84	@ 0x54
 80070e2:	4a09      	ldr	r2, [pc, #36]	@ (8007108 <vTaskSwitchContext+0xc8>)
 80070e4:	6013      	str	r3, [r2, #0]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	200019b4 	.word	0x200019b4
 80070f8:	200019a0 	.word	0x200019a0
 80070fc:	20001994 	.word	0x20001994
 8007100:	200014bc 	.word	0x200014bc
 8007104:	200014b8 	.word	0x200014b8
 8007108:	20000018 	.word	0x20000018

0800710c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800711c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	60fb      	str	r3, [r7, #12]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007134:	4b07      	ldr	r3, [pc, #28]	@ (8007154 <vTaskPlaceOnEventList+0x48>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3318      	adds	r3, #24
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fe fe48 	bl	8005dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007142:	2101      	movs	r1, #1
 8007144:	6838      	ldr	r0, [r7, #0]
 8007146:	f000 fa87 	bl	8007658 <prvAddCurrentTaskToDelayedList>
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200014b8 	.word	0x200014b8

08007158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800716a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	617b      	str	r3, [r7, #20]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007182:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <vTaskPlaceOnEventListRestricted+0x54>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3318      	adds	r3, #24
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7fe fdfd 	bl	8005d8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007196:	f04f 33ff 	mov.w	r3, #4294967295
 800719a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	68b8      	ldr	r0, [r7, #8]
 80071a0:	f000 fa5a 	bl	8007658 <prvAddCurrentTaskToDelayedList>
	}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200014b8 	.word	0x200014b8

080071b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80071c6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60fb      	str	r3, [r7, #12]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3318      	adds	r3, #24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fe2e 	bl	8005e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <xTaskRemoveFromEventList+0xb0>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d11d      	bne.n	800722c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fe25 	bl	8005e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	4b19      	ldr	r3, [pc, #100]	@ (8007264 <xTaskRemoveFromEventList+0xb4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d903      	bls.n	800720e <xTaskRemoveFromEventList+0x5e>
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a16      	ldr	r2, [pc, #88]	@ (8007264 <xTaskRemoveFromEventList+0xb4>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a13      	ldr	r2, [pc, #76]	@ (8007268 <xTaskRemoveFromEventList+0xb8>)
 800721c:	441a      	add	r2, r3
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7fe fdb0 	bl	8005d8a <vListInsertEnd>
 800722a:	e005      	b.n	8007238 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	3318      	adds	r3, #24
 8007230:	4619      	mov	r1, r3
 8007232:	480e      	ldr	r0, [pc, #56]	@ (800726c <xTaskRemoveFromEventList+0xbc>)
 8007234:	f7fe fda9 	bl	8005d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723c:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <xTaskRemoveFromEventList+0xc0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	429a      	cmp	r2, r3
 8007244:	d905      	bls.n	8007252 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007246:	2301      	movs	r3, #1
 8007248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800724a:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <xTaskRemoveFromEventList+0xc4>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e001      	b.n	8007256 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007256:	697b      	ldr	r3, [r7, #20]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	200019b4 	.word	0x200019b4
 8007264:	20001994 	.word	0x20001994
 8007268:	200014bc 	.word	0x200014bc
 800726c:	2000194c 	.word	0x2000194c
 8007270:	200014b8 	.word	0x200014b8
 8007274:	200019a0 	.word	0x200019a0

08007278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <vTaskInternalSetTimeOutState+0x24>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007288:	4b05      	ldr	r3, [pc, #20]	@ (80072a0 <vTaskInternalSetTimeOutState+0x28>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	605a      	str	r2, [r3, #4]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	200019a4 	.word	0x200019a4
 80072a0:	20001990 	.word	0x20001990

080072a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80072b4:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	613b      	str	r3, [r7, #16]
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80072d2:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80072ea:	f000 fe95 	bl	8008018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007364 <xTaskCheckForTimeOut+0xc0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d102      	bne.n	800730e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	e023      	b.n	8007356 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <xTaskCheckForTimeOut+0xc4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d007      	beq.n	800732a <xTaskCheckForTimeOut+0x86>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	429a      	cmp	r2, r3
 8007322:	d302      	bcc.n	800732a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e015      	b.n	8007356 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	429a      	cmp	r2, r3
 8007332:	d20b      	bcs.n	800734c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff99 	bl	8007278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e004      	b.n	8007356 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007356:	f000 fe91 	bl	800807c <vPortExitCritical>

	return xReturn;
 800735a:	69fb      	ldr	r3, [r7, #28]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20001990 	.word	0x20001990
 8007368:	200019a4 	.word	0x200019a4

0800736c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007370:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <vTaskMissedYield+0x14>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	200019a0 	.word	0x200019a0

08007384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800738c:	f000 f852 	bl	8007434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007390:	4b06      	ldr	r3, [pc, #24]	@ (80073ac <prvIdleTask+0x28>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d9f9      	bls.n	800738c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <prvIdleTask+0x2c>)
 800739a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073a8:	e7f0      	b.n	800738c <prvIdleTask+0x8>
 80073aa:	bf00      	nop
 80073ac:	200014bc 	.word	0x200014bc
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ba:	2300      	movs	r3, #0
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	e00c      	b.n	80073da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4a12      	ldr	r2, [pc, #72]	@ (8007414 <prvInitialiseTaskLists+0x60>)
 80073cc:	4413      	add	r3, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fcae 	bl	8005d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b37      	cmp	r3, #55	@ 0x37
 80073de:	d9ef      	bls.n	80073c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073e0:	480d      	ldr	r0, [pc, #52]	@ (8007418 <prvInitialiseTaskLists+0x64>)
 80073e2:	f7fe fca5 	bl	8005d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073e6:	480d      	ldr	r0, [pc, #52]	@ (800741c <prvInitialiseTaskLists+0x68>)
 80073e8:	f7fe fca2 	bl	8005d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073ec:	480c      	ldr	r0, [pc, #48]	@ (8007420 <prvInitialiseTaskLists+0x6c>)
 80073ee:	f7fe fc9f 	bl	8005d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073f2:	480c      	ldr	r0, [pc, #48]	@ (8007424 <prvInitialiseTaskLists+0x70>)
 80073f4:	f7fe fc9c 	bl	8005d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073f8:	480b      	ldr	r0, [pc, #44]	@ (8007428 <prvInitialiseTaskLists+0x74>)
 80073fa:	f7fe fc99 	bl	8005d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <prvInitialiseTaskLists+0x78>)
 8007400:	4a05      	ldr	r2, [pc, #20]	@ (8007418 <prvInitialiseTaskLists+0x64>)
 8007402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <prvInitialiseTaskLists+0x7c>)
 8007406:	4a05      	ldr	r2, [pc, #20]	@ (800741c <prvInitialiseTaskLists+0x68>)
 8007408:	601a      	str	r2, [r3, #0]
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200014bc 	.word	0x200014bc
 8007418:	2000191c 	.word	0x2000191c
 800741c:	20001930 	.word	0x20001930
 8007420:	2000194c 	.word	0x2000194c
 8007424:	20001960 	.word	0x20001960
 8007428:	20001978 	.word	0x20001978
 800742c:	20001944 	.word	0x20001944
 8007430:	20001948 	.word	0x20001948

08007434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800743a:	e019      	b.n	8007470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800743c:	f000 fdec 	bl	8008018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007440:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <prvCheckTasksWaitingTermination+0x50>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fcf9 	bl	8005e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <prvCheckTasksWaitingTermination+0x54>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	4a0b      	ldr	r2, [pc, #44]	@ (8007488 <prvCheckTasksWaitingTermination+0x54>)
 800745a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800745c:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <prvCheckTasksWaitingTermination+0x58>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3b01      	subs	r3, #1
 8007462:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <prvCheckTasksWaitingTermination+0x58>)
 8007464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007466:	f000 fe09 	bl	800807c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f810 	bl	8007490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007470:	4b06      	ldr	r3, [pc, #24]	@ (800748c <prvCheckTasksWaitingTermination+0x58>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e1      	bne.n	800743c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20001960 	.word	0x20001960
 8007488:	2000198c 	.word	0x2000198c
 800748c:	20001974 	.word	0x20001974

08007490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3354      	adds	r3, #84	@ 0x54
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f8d3 	bl	8008648 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d108      	bne.n	80074be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 ffa1 	bl	80083f8 <vPortFree>
				vPortFree( pxTCB );
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 ff9e 	bl	80083f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074bc:	e019      	b.n	80074f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d103      	bne.n	80074d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff95 	bl	80083f8 <vPortFree>
	}
 80074ce:	e010      	b.n	80074f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d00b      	beq.n	80074f2 <prvDeleteTCB+0x62>
	__asm volatile
 80074da:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	e7fd      	b.n	80074ee <prvDeleteTCB+0x5e>
	}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007502:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <prvResetNextTaskUnblockTime+0x38>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <prvResetNextTaskUnblockTime+0x3c>)
 800750e:	f04f 32ff 	mov.w	r2, #4294967295
 8007512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007514:	e008      	b.n	8007528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007516:	4b07      	ldr	r3, [pc, #28]	@ (8007534 <prvResetNextTaskUnblockTime+0x38>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4a04      	ldr	r2, [pc, #16]	@ (8007538 <prvResetNextTaskUnblockTime+0x3c>)
 8007526:	6013      	str	r3, [r2, #0]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20001944 	.word	0x20001944
 8007538:	200019ac 	.word	0x200019ac

0800753c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007542:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <xTaskGetSchedulerState+0x34>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800754a:	2301      	movs	r3, #1
 800754c:	607b      	str	r3, [r7, #4]
 800754e:	e008      	b.n	8007562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007550:	4b08      	ldr	r3, [pc, #32]	@ (8007574 <xTaskGetSchedulerState+0x38>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007558:	2302      	movs	r3, #2
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	e001      	b.n	8007562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007562:	687b      	ldr	r3, [r7, #4]
	}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20001998 	.word	0x20001998
 8007574:	200019b4 	.word	0x200019b4

08007578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d058      	beq.n	8007640 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800758e:	4b2f      	ldr	r3, [pc, #188]	@ (800764c <xTaskPriorityDisinherit+0xd4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	d00b      	beq.n	80075b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007598:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60fb      	str	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075b8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	60bb      	str	r3, [r7, #8]
}
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	e7fd      	b.n	80075cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d4:	1e5a      	subs	r2, r3, #1
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d02c      	beq.n	8007640 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d128      	bne.n	8007640 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fc26 	bl	8005e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <xTaskPriorityDisinherit+0xd8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <xTaskPriorityDisinherit+0xa8>
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761c:	4a0c      	ldr	r2, [pc, #48]	@ (8007650 <xTaskPriorityDisinherit+0xd8>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4a09      	ldr	r2, [pc, #36]	@ (8007654 <xTaskPriorityDisinherit+0xdc>)
 800762e:	441a      	add	r2, r3
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3304      	adds	r3, #4
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f7fe fba7 	bl	8005d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800763c:	2301      	movs	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007640:	697b      	ldr	r3, [r7, #20]
	}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200014b8 	.word	0x200014b8
 8007650:	20001994 	.word	0x20001994
 8007654:	200014bc 	.word	0x200014bc

08007658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007662:	4b21      	ldr	r3, [pc, #132]	@ (80076e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007668:	4b20      	ldr	r3, [pc, #128]	@ (80076ec <prvAddCurrentTaskToDelayedList+0x94>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fbe8 	bl	8005e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d10a      	bne.n	8007692 <prvAddCurrentTaskToDelayedList+0x3a>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007682:	4b1a      	ldr	r3, [pc, #104]	@ (80076ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4819      	ldr	r0, [pc, #100]	@ (80076f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800768c:	f7fe fb7d 	bl	8005d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007690:	e026      	b.n	80076e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800769a:	4b14      	ldr	r3, [pc, #80]	@ (80076ec <prvAddCurrentTaskToDelayedList+0x94>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d209      	bcs.n	80076be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076aa:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <prvAddCurrentTaskToDelayedList+0x94>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe fb8b 	bl	8005dd2 <vListInsert>
}
 80076bc:	e010      	b.n	80076e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076be:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <prvAddCurrentTaskToDelayedList+0x94>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f7fe fb81 	bl	8005dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076d0:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d202      	bcs.n	80076e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076da:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20001990 	.word	0x20001990
 80076ec:	200014b8 	.word	0x200014b8
 80076f0:	20001978 	.word	0x20001978
 80076f4:	20001948 	.word	0x20001948
 80076f8:	20001944 	.word	0x20001944
 80076fc:	200019ac 	.word	0x200019ac

08007700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	@ 0x28
 8007704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800770a:	f000 fb13 	bl	8007d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800770e:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <xTimerCreateTimerTask+0x84>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d021      	beq.n	800775a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800771e:	1d3a      	adds	r2, r7, #4
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fae7 	bl	8005cfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	9202      	str	r2, [sp, #8]
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	2302      	movs	r3, #2
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	460a      	mov	r2, r1
 8007740:	4911      	ldr	r1, [pc, #68]	@ (8007788 <xTimerCreateTimerTask+0x88>)
 8007742:	4812      	ldr	r0, [pc, #72]	@ (800778c <xTimerCreateTimerTask+0x8c>)
 8007744:	f7ff f8a2 	bl	800688c <xTaskCreateStatic>
 8007748:	4603      	mov	r3, r0
 800774a:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <xTimerCreateTimerTask+0x90>)
 800774c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800774e:	4b10      	ldr	r3, [pc, #64]	@ (8007790 <xTimerCreateTimerTask+0x90>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007756:	2301      	movs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10b      	bne.n	8007778 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007760:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007778:	697b      	ldr	r3, [r7, #20]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200019e8 	.word	0x200019e8
 8007788:	0800889c 	.word	0x0800889c
 800778c:	080078cd 	.word	0x080078cd
 8007790:	200019ec 	.word	0x200019ec

08007794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	@ 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80077ac:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	623b      	str	r3, [r7, #32]
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077c4:	4b19      	ldr	r3, [pc, #100]	@ (800782c <xTimerGenericCommand+0x98>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d02a      	beq.n	8007822 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b05      	cmp	r3, #5
 80077dc:	dc18      	bgt.n	8007810 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077de:	f7ff fead 	bl	800753c <xTaskGetSchedulerState>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d109      	bne.n	80077fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077e8:	4b10      	ldr	r3, [pc, #64]	@ (800782c <xTimerGenericCommand+0x98>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	f107 0110 	add.w	r1, r7, #16
 80077f0:	2300      	movs	r3, #0
 80077f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f4:	f7fe fc5a 	bl	80060ac <xQueueGenericSend>
 80077f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80077fa:	e012      	b.n	8007822 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <xTimerGenericCommand+0x98>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	f107 0110 	add.w	r1, r7, #16
 8007804:	2300      	movs	r3, #0
 8007806:	2200      	movs	r2, #0
 8007808:	f7fe fc50 	bl	80060ac <xQueueGenericSend>
 800780c:	6278      	str	r0, [r7, #36]	@ 0x24
 800780e:	e008      	b.n	8007822 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007810:	4b06      	ldr	r3, [pc, #24]	@ (800782c <xTimerGenericCommand+0x98>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	f107 0110 	add.w	r1, r7, #16
 8007818:	2300      	movs	r3, #0
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	f7fe fd48 	bl	80062b0 <xQueueGenericSendFromISR>
 8007820:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007824:	4618      	mov	r0, r3
 8007826:	3728      	adds	r7, #40	@ 0x28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200019e8 	.word	0x200019e8

08007830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783a:	4b23      	ldr	r3, [pc, #140]	@ (80078c8 <prvProcessExpiredTimer+0x98>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fafb 	bl	8005e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d023      	beq.n	80078a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	18d1      	adds	r1, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	6978      	ldr	r0, [r7, #20]
 800786a:	f000 f8d5 	bl	8007a18 <prvInsertTimerInActiveList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d020      	beq.n	80078b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007874:	2300      	movs	r3, #0
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	2100      	movs	r1, #0
 800787e:	6978      	ldr	r0, [r7, #20]
 8007880:	f7ff ff88 	bl	8007794 <xTimerGenericCommand>
 8007884:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d114      	bne.n	80078b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800788c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60fb      	str	r3, [r7, #12]
}
 800789e:	bf00      	nop
 80078a0:	bf00      	nop
 80078a2:	e7fd      	b.n	80078a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	6978      	ldr	r0, [r7, #20]
 80078bc:	4798      	blx	r3
}
 80078be:	bf00      	nop
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	200019e0 	.word	0x200019e0

080078cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 f859 	bl	8007990 <prvGetNextExpireTime>
 80078de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4619      	mov	r1, r3
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f805 	bl	80078f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078ea:	f000 f8d7 	bl	8007a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ee:	bf00      	nop
 80078f0:	e7f0      	b.n	80078d4 <prvTimerTask+0x8>
	...

080078f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078fe:	f7ff fa29 	bl	8006d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f866 	bl	80079d8 <prvSampleTimeNow>
 800790c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d130      	bne.n	8007976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <prvProcessTimerOrBlockTask+0x3c>
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	429a      	cmp	r2, r3
 8007920:	d806      	bhi.n	8007930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007922:	f7ff fa25 	bl	8006d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff ff81 	bl	8007830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800792e:	e024      	b.n	800797a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007936:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <prvProcessTimerOrBlockTask+0x90>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <prvProcessTimerOrBlockTask+0x50>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <prvProcessTimerOrBlockTask+0x52>
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <prvProcessTimerOrBlockTask+0x94>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	f7fe ff65 	bl	8006824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800795a:	f7ff fa09 	bl	8006d70 <xTaskResumeAll>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007964:	4b09      	ldr	r3, [pc, #36]	@ (800798c <prvProcessTimerOrBlockTask+0x98>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
}
 8007974:	e001      	b.n	800797a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007976:	f7ff f9fb 	bl	8006d70 <xTaskResumeAll>
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200019e4 	.word	0x200019e4
 8007988:	200019e8 	.word	0x200019e8
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007998:	4b0e      	ldr	r3, [pc, #56]	@ (80079d4 <prvGetNextExpireTime+0x44>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <prvGetNextExpireTime+0x16>
 80079a2:	2201      	movs	r2, #1
 80079a4:	e000      	b.n	80079a8 <prvGetNextExpireTime+0x18>
 80079a6:	2200      	movs	r2, #0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b4:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <prvGetNextExpireTime+0x44>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e001      	b.n	80079c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	200019e0 	.word	0x200019e0

080079d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079e0:	f7ff fa64 	bl	8006eac <xTaskGetTickCount>
 80079e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <prvSampleTimeNow+0x3c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d205      	bcs.n	80079fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079f0:	f000 f93a 	bl	8007c68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a02:	4a04      	ldr	r2, [pc, #16]	@ (8007a14 <prvSampleTimeNow+0x3c>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200019f0 	.word	0x200019f0

08007a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d812      	bhi.n	8007a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e01b      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <prvInsertTimerInActiveList+0x7c>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe f9b8 	bl	8005dd2 <vListInsert>
 8007a62:	e012      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d206      	bcs.n	8007a7a <prvInsertTimerInActiveList+0x62>
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e007      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a7a:	4b07      	ldr	r3, [pc, #28]	@ (8007a98 <prvInsertTimerInActiveList+0x80>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fe f9a4 	bl	8005dd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a8a:	697b      	ldr	r3, [r7, #20]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200019e4 	.word	0x200019e4
 8007a98:	200019e0 	.word	0x200019e0

08007a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08e      	sub	sp, #56	@ 0x38
 8007aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aa2:	e0ce      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da19      	bge.n	8007ade <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	3304      	adds	r3, #4
 8007aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ab6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	61fb      	str	r3, [r7, #28]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad4:	6850      	ldr	r0, [r2, #4]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	6892      	ldr	r2, [r2, #8]
 8007ada:	4611      	mov	r1, r2
 8007adc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f2c0 80ae 	blt.w	8007c42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe f9a4 	bl	8005e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007afc:	463b      	mov	r3, r7
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff ff6a 	bl	80079d8 <prvSampleTimeNow>
 8007b04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	f200 8097 	bhi.w	8007c3c <prvProcessReceivedCommands+0x1a0>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <prvProcessReceivedCommands+0x78>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007bb3 	.word	0x08007bb3
 8007b24:	08007bc7 	.word	0x08007bc7
 8007b28:	08007c13 	.word	0x08007c13
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b3d 	.word	0x08007b3d
 8007b34:	08007bb3 	.word	0x08007bb3
 8007b38:	08007bc7 	.word	0x08007bc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	18d1      	adds	r1, r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b5c:	f7ff ff5c 	bl	8007a18 <prvInsertTimerInActiveList>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d06c      	beq.n	8007c40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d061      	beq.n	8007c40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	441a      	add	r2, r3
 8007b84:	2300      	movs	r3, #0
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b8e:	f7ff fe01 	bl	8007794 <xTimerGenericCommand>
 8007b92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d152      	bne.n	8007c40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b9a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	61bb      	str	r3, [r7, #24]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bb8:	f023 0301 	bic.w	r3, r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bc4:	e03d      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007be6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	617b      	str	r3, [r7, #20]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	18d1      	adds	r1, r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c0c:	f7ff ff04 	bl	8007a18 <prvInsertTimerInActiveList>
					break;
 8007c10:	e017      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c22:	f000 fbe9 	bl	80083f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c26:	e00c      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c2e:	f023 0301 	bic.w	r3, r3, #1
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c3a:	e002      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c3c:	bf00      	nop
 8007c3e:	e000      	b.n	8007c42 <prvProcessReceivedCommands+0x1a6>
					break;
 8007c40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c42:	4b08      	ldr	r3, [pc, #32]	@ (8007c64 <prvProcessReceivedCommands+0x1c8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1d39      	adds	r1, r7, #4
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fbce 	bl	80063ec <xQueueReceive>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f47f af26 	bne.w	8007aa4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	3730      	adds	r7, #48	@ 0x30
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	200019e8 	.word	0x200019e8

08007c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c6e:	e049      	b.n	8007d04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c70:	4b2e      	ldr	r3, [pc, #184]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe f8db 	bl	8005e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d02f      	beq.n	8007d04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4413      	add	r3, r2
 8007cac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d90e      	bls.n	8007cd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f7fe f880 	bl	8005dd2 <vListInsert>
 8007cd2:	e017      	b.n	8007d04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fd58 	bl	8007794 <xTimerGenericCommand>
 8007ce4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007cec:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	603b      	str	r3, [r7, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d04:	4b09      	ldr	r3, [pc, #36]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1b0      	bne.n	8007c70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d0e:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d14:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <prvSwitchTimerLists+0xc8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a04      	ldr	r2, [pc, #16]	@ (8007d2c <prvSwitchTimerLists+0xc4>)
 8007d1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d1c:	4a04      	ldr	r2, [pc, #16]	@ (8007d30 <prvSwitchTimerLists+0xc8>)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6013      	str	r3, [r2, #0]
}
 8007d22:	bf00      	nop
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200019e0 	.word	0x200019e0
 8007d30:	200019e4 	.word	0x200019e4

08007d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d3a:	f000 f96d 	bl	8008018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d3e:	4b15      	ldr	r3, [pc, #84]	@ (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d120      	bne.n	8007d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d46:	4814      	ldr	r0, [pc, #80]	@ (8007d98 <prvCheckForValidListAndQueue+0x64>)
 8007d48:	f7fd fff2 	bl	8005d30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d4c:	4813      	ldr	r0, [pc, #76]	@ (8007d9c <prvCheckForValidListAndQueue+0x68>)
 8007d4e:	f7fd ffef 	bl	8005d30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d52:	4b13      	ldr	r3, [pc, #76]	@ (8007da0 <prvCheckForValidListAndQueue+0x6c>)
 8007d54:	4a10      	ldr	r2, [pc, #64]	@ (8007d98 <prvCheckForValidListAndQueue+0x64>)
 8007d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d58:	4b12      	ldr	r3, [pc, #72]	@ (8007da4 <prvCheckForValidListAndQueue+0x70>)
 8007d5a:	4a10      	ldr	r2, [pc, #64]	@ (8007d9c <prvCheckForValidListAndQueue+0x68>)
 8007d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <prvCheckForValidListAndQueue+0x74>)
 8007d64:	4a11      	ldr	r2, [pc, #68]	@ (8007dac <prvCheckForValidListAndQueue+0x78>)
 8007d66:	2110      	movs	r1, #16
 8007d68:	200a      	movs	r0, #10
 8007d6a:	f7fe f8ff 	bl	8005f6c <xQueueGenericCreateStatic>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4a08      	ldr	r2, [pc, #32]	@ (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d7c:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	490b      	ldr	r1, [pc, #44]	@ (8007db0 <prvCheckForValidListAndQueue+0x7c>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fd24 	bl	80067d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d88:	f000 f978 	bl	800807c <vPortExitCritical>
}
 8007d8c:	bf00      	nop
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	200019e8 	.word	0x200019e8
 8007d98:	200019b8 	.word	0x200019b8
 8007d9c:	200019cc 	.word	0x200019cc
 8007da0:	200019e0 	.word	0x200019e0
 8007da4:	200019e4 	.word	0x200019e4
 8007da8:	20001a94 	.word	0x20001a94
 8007dac:	200019f4 	.word	0x200019f4
 8007db0:	080088a4 	.word	0x080088a4

08007db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b04      	subs	r3, #4
 8007dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b04      	subs	r3, #4
 8007de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007de4:	4a0c      	ldr	r2, [pc, #48]	@ (8007e18 <pxPortInitialiseStack+0x64>)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b14      	subs	r3, #20
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f06f 0202 	mvn.w	r2, #2
 8007e02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3b20      	subs	r3, #32
 8007e08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	08007e1d 	.word	0x08007e1d

08007e1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e26:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <prvTaskExitError+0x58>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d00b      	beq.n	8007e48 <prvTaskExitError+0x2c>
	__asm volatile
 8007e30:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <prvTaskExitError+0x28>
	__asm volatile
 8007e48:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60bb      	str	r3, [r7, #8]
}
 8007e5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e5c:	bf00      	nop
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0fc      	beq.n	8007e5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000014 	.word	0x20000014
	...

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	200014b8 	.word	0x200014b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ea8:	4808      	ldr	r0, [pc, #32]	@ (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eca:	bf00      	nop
 8007ecc:	e000ed08 	.word	0xe000ed08

08007ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ed6:	4b47      	ldr	r3, [pc, #284]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a47      	ldr	r2, [pc, #284]	@ (8007ff8 <xPortStartScheduler+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10b      	bne.n	8007ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ee0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ffc <xPortStartScheduler+0x12c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10b      	bne.n	8007f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f02:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	613b      	str	r3, [r7, #16]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f1a:	4b39      	ldr	r3, [pc, #228]	@ (8008000 <xPortStartScheduler+0x130>)
 8007f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	22ff      	movs	r2, #255	@ 0xff
 8007f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <xPortStartScheduler+0x134>)
 8007f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f48:	e009      	b.n	8007f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4a2d      	ldr	r2, [pc, #180]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f66:	2b80      	cmp	r3, #128	@ 0x80
 8007f68:	d0ef      	beq.n	8007f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f6a:	4b27      	ldr	r3, [pc, #156]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1c3 0307 	rsb	r3, r3, #7
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00b      	beq.n	8007f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f76:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	4a1c      	ldr	r2, [pc, #112]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f98:	4b1b      	ldr	r3, [pc, #108]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fa0:	4a19      	ldr	r2, [pc, #100]	@ (8008008 <xPortStartScheduler+0x138>)
 8007fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fac:	4b17      	ldr	r3, [pc, #92]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a16      	ldr	r2, [pc, #88]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fb8:	4b14      	ldr	r3, [pc, #80]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a13      	ldr	r2, [pc, #76]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fc4:	f000 f8da 	bl	800817c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <xPortStartScheduler+0x140>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fce:	f000 f8f9 	bl	80081c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fd2:	4b10      	ldr	r3, [pc, #64]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fde:	f7ff ff63 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fe2:	f7ff f82d 	bl	8007040 <vTaskSwitchContext>
	prvTaskExitError();
 8007fe6:	f7ff ff19 	bl	8007e1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed00 	.word	0xe000ed00
 8007ff8:	410fc271 	.word	0x410fc271
 8007ffc:	410fc270 	.word	0x410fc270
 8008000:	e000e400 	.word	0xe000e400
 8008004:	20001ae4 	.word	0x20001ae4
 8008008:	20001ae8 	.word	0x20001ae8
 800800c:	e000ed20 	.word	0xe000ed20
 8008010:	20000014 	.word	0x20000014
 8008014:	e000ef34 	.word	0xe000ef34

08008018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
	__asm volatile
 800801e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008032:	4b10      	ldr	r3, [pc, #64]	@ (8008074 <vPortEnterCritical+0x5c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a0e      	ldr	r2, [pc, #56]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <vPortEnterCritical+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <vPortEnterCritical+0x4e>
	__asm volatile
 800804e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	603b      	str	r3, [r7, #0]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <vPortEnterCritical+0x4a>
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000014 	.word	0x20000014
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <vPortExitCritical+0x26>
	__asm volatile
 800808a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080a2:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <vPortExitCritical+0x50>)
 80080aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080ac:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <vPortExitCritical+0x50>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <vPortExitCritical+0x44>
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	20000014 	.word	0x20000014

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0030 	mov.w	r0, #48	@ 0x30
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f7fe ff9e 	bl	8007040 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	200014b8 	.word	0x200014b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	__asm volatile
 800813e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008152:	f7fe febb 	bl	8006ecc <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <xPortSysTickHandler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	@ (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	@ (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	20000008 	.word	0x20000008
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081d2:	bf00      	nop
 80081d4:	e000ed88 	.word	0xe000ed88

080081d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d915      	bls.n	8008216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ea:	4a18      	ldr	r2, [pc, #96]	@ (800824c <vPortValidateInterruptPriority+0x74>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f4:	4b16      	ldr	r3, [pc, #88]	@ (8008250 <vPortValidateInterruptPriority+0x78>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d20b      	bcs.n	8008216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081fe:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008216:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <vPortValidateInterruptPriority+0x7c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <vPortValidateInterruptPriority+0x80>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d90b      	bls.n	800823e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008226:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <vPortValidateInterruptPriority+0x62>
	}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	e000e3f0 	.word	0xe000e3f0
 8008250:	20001ae4 	.word	0x20001ae4
 8008254:	e000ed0c 	.word	0xe000ed0c
 8008258:	20001ae8 	.word	0x20001ae8

0800825c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	@ 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008268:	f7fe fd74 	bl	8006d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800826c:	4b5c      	ldr	r3, [pc, #368]	@ (80083e0 <pvPortMalloc+0x184>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008274:	f000 f924 	bl	80084c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008278:	4b5a      	ldr	r3, [pc, #360]	@ (80083e4 <pvPortMalloc+0x188>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 8095 	bne.w	80083b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01e      	beq.n	80082ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800828c:	2208      	movs	r2, #8
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d015      	beq.n	80082ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f023 0307 	bic.w	r3, r3, #7
 80082a4:	3308      	adds	r3, #8
 80082a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <pvPortMalloc+0x6e>
	__asm volatile
 80082b2:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	617b      	str	r3, [r7, #20]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d06f      	beq.n	80083b0 <pvPortMalloc+0x154>
 80082d0:	4b45      	ldr	r3, [pc, #276]	@ (80083e8 <pvPortMalloc+0x18c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d86a      	bhi.n	80083b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082da:	4b44      	ldr	r3, [pc, #272]	@ (80083ec <pvPortMalloc+0x190>)
 80082dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082de:	4b43      	ldr	r3, [pc, #268]	@ (80083ec <pvPortMalloc+0x190>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e4:	e004      	b.n	80082f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <pvPortMalloc+0xa6>
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f1      	bne.n	80082e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008302:	4b37      	ldr	r3, [pc, #220]	@ (80083e0 <pvPortMalloc+0x184>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008308:	429a      	cmp	r2, r3
 800830a:	d051      	beq.n	80083b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2208      	movs	r2, #8
 8008312:	4413      	add	r3, r2
 8008314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	2308      	movs	r3, #8
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	429a      	cmp	r2, r3
 800832c:	d920      	bls.n	8008370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800832e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4413      	add	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <pvPortMalloc+0xfc>
	__asm volatile
 8008340:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800836a:	69b8      	ldr	r0, [r7, #24]
 800836c:	f000 f90a 	bl	8008584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008370:	4b1d      	ldr	r3, [pc, #116]	@ (80083e8 <pvPortMalloc+0x18c>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	4a1b      	ldr	r2, [pc, #108]	@ (80083e8 <pvPortMalloc+0x18c>)
 800837c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800837e:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <pvPortMalloc+0x18c>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b1b      	ldr	r3, [pc, #108]	@ (80083f0 <pvPortMalloc+0x194>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d203      	bcs.n	8008392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800838a:	4b17      	ldr	r3, [pc, #92]	@ (80083e8 <pvPortMalloc+0x18c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a18      	ldr	r2, [pc, #96]	@ (80083f0 <pvPortMalloc+0x194>)
 8008390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <pvPortMalloc+0x188>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	431a      	orrs	r2, r3
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083a6:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <pvPortMalloc+0x198>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	4a11      	ldr	r2, [pc, #68]	@ (80083f4 <pvPortMalloc+0x198>)
 80083ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b0:	f7fe fcde 	bl	8006d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <pvPortMalloc+0x17a>
	__asm volatile
 80083be:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60fb      	str	r3, [r7, #12]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <pvPortMalloc+0x176>
	return pvReturn;
 80083d6:	69fb      	ldr	r3, [r7, #28]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3728      	adds	r7, #40	@ 0x28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20009024 	.word	0x20009024
 80083e4:	20009038 	.word	0x20009038
 80083e8:	20009028 	.word	0x20009028
 80083ec:	2000901c 	.word	0x2000901c
 80083f0:	2000902c 	.word	0x2000902c
 80083f4:	20009030 	.word	0x20009030

080083f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d04f      	beq.n	80084aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800840a:	2308      	movs	r3, #8
 800840c:	425b      	negs	r3, r3
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4413      	add	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b25      	ldr	r3, [pc, #148]	@ (80084b4 <vPortFree+0xbc>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <vPortFree+0x46>
	__asm volatile
 8008426:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <vPortFree+0x66>
	__asm volatile
 8008446:	f04f 0330 	mov.w	r3, #48	@ 0x30
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60bb      	str	r3, [r7, #8]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	4b14      	ldr	r3, [pc, #80]	@ (80084b4 <vPortFree+0xbc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4013      	ands	r3, r2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01e      	beq.n	80084aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11a      	bne.n	80084aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <vPortFree+0xbc>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	43db      	mvns	r3, r3
 800847e:	401a      	ands	r2, r3
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008484:	f7fe fc66 	bl	8006d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <vPortFree+0xc0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4413      	add	r3, r2
 8008492:	4a09      	ldr	r2, [pc, #36]	@ (80084b8 <vPortFree+0xc0>)
 8008494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008496:	6938      	ldr	r0, [r7, #16]
 8008498:	f000 f874 	bl	8008584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <vPortFree+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	4a06      	ldr	r2, [pc, #24]	@ (80084bc <vPortFree+0xc4>)
 80084a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084a6:	f7fe fc63 	bl	8006d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084aa:	bf00      	nop
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20009038 	.word	0x20009038
 80084b8:	20009028 	.word	0x20009028
 80084bc:	20009034 	.word	0x20009034

080084c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084c6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80084ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084cc:	4b27      	ldr	r3, [pc, #156]	@ (800856c <prvHeapInit+0xac>)
 80084ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3307      	adds	r3, #7
 80084de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	4a1f      	ldr	r2, [pc, #124]	@ (800856c <prvHeapInit+0xac>)
 80084f0:	4413      	add	r3, r2
 80084f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008570 <prvHeapInit+0xb0>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008570 <prvHeapInit+0xb0>)
 8008500:	2200      	movs	r2, #0
 8008502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4413      	add	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800850c:	2208      	movs	r2, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <prvHeapInit+0xb4>)
 8008520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <prvHeapInit+0xb4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800852a:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <prvHeapInit+0xb4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008540:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <prvHeapInit+0xb4>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a0a      	ldr	r2, [pc, #40]	@ (8008578 <prvHeapInit+0xb8>)
 800854e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a09      	ldr	r2, [pc, #36]	@ (800857c <prvHeapInit+0xbc>)
 8008556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008558:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <prvHeapInit+0xc0>)
 800855a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800855e:	601a      	str	r2, [r3, #0]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20001aec 	.word	0x20001aec
 8008570:	2000901c 	.word	0x2000901c
 8008574:	20009024 	.word	0x20009024
 8008578:	2000902c 	.word	0x2000902c
 800857c:	20009028 	.word	0x20009028
 8008580:	20009038 	.word	0x20009038

08008584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800858c:	4b28      	ldr	r3, [pc, #160]	@ (8008630 <prvInsertBlockIntoFreeList+0xac>)
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e002      	b.n	8008598 <prvInsertBlockIntoFreeList+0x14>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d8f7      	bhi.n	8008592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d108      	bne.n	80085c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d118      	bne.n	800860c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <prvInsertBlockIntoFreeList+0xb0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d00d      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e008      	b.n	8008614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008602:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <prvInsertBlockIntoFreeList+0xb0>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e003      	b.n	8008614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d002      	beq.n	8008622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	2000901c 	.word	0x2000901c
 8008634:	20009024 	.word	0x20009024

08008638 <memset>:
 8008638:	4402      	add	r2, r0
 800863a:	4603      	mov	r3, r0
 800863c:	4293      	cmp	r3, r2
 800863e:	d100      	bne.n	8008642 <memset+0xa>
 8008640:	4770      	bx	lr
 8008642:	f803 1b01 	strb.w	r1, [r3], #1
 8008646:	e7f9      	b.n	800863c <memset+0x4>

08008648 <_reclaim_reent>:
 8008648:	4b2d      	ldr	r3, [pc, #180]	@ (8008700 <_reclaim_reent+0xb8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4283      	cmp	r3, r0
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	d053      	beq.n	80086fc <_reclaim_reent+0xb4>
 8008654:	69c3      	ldr	r3, [r0, #28]
 8008656:	b31b      	cbz	r3, 80086a0 <_reclaim_reent+0x58>
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	b163      	cbz	r3, 8008676 <_reclaim_reent+0x2e>
 800865c:	2500      	movs	r5, #0
 800865e:	69e3      	ldr	r3, [r4, #28]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	5959      	ldr	r1, [r3, r5]
 8008664:	b9b1      	cbnz	r1, 8008694 <_reclaim_reent+0x4c>
 8008666:	3504      	adds	r5, #4
 8008668:	2d80      	cmp	r5, #128	@ 0x80
 800866a:	d1f8      	bne.n	800865e <_reclaim_reent+0x16>
 800866c:	69e3      	ldr	r3, [r4, #28]
 800866e:	4620      	mov	r0, r4
 8008670:	68d9      	ldr	r1, [r3, #12]
 8008672:	f000 f87b 	bl	800876c <_free_r>
 8008676:	69e3      	ldr	r3, [r4, #28]
 8008678:	6819      	ldr	r1, [r3, #0]
 800867a:	b111      	cbz	r1, 8008682 <_reclaim_reent+0x3a>
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f875 	bl	800876c <_free_r>
 8008682:	69e3      	ldr	r3, [r4, #28]
 8008684:	689d      	ldr	r5, [r3, #8]
 8008686:	b15d      	cbz	r5, 80086a0 <_reclaim_reent+0x58>
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	682d      	ldr	r5, [r5, #0]
 800868e:	f000 f86d 	bl	800876c <_free_r>
 8008692:	e7f8      	b.n	8008686 <_reclaim_reent+0x3e>
 8008694:	680e      	ldr	r6, [r1, #0]
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f868 	bl	800876c <_free_r>
 800869c:	4631      	mov	r1, r6
 800869e:	e7e1      	b.n	8008664 <_reclaim_reent+0x1c>
 80086a0:	6961      	ldr	r1, [r4, #20]
 80086a2:	b111      	cbz	r1, 80086aa <_reclaim_reent+0x62>
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f861 	bl	800876c <_free_r>
 80086aa:	69e1      	ldr	r1, [r4, #28]
 80086ac:	b111      	cbz	r1, 80086b4 <_reclaim_reent+0x6c>
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f85c 	bl	800876c <_free_r>
 80086b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086b6:	b111      	cbz	r1, 80086be <_reclaim_reent+0x76>
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 f857 	bl	800876c <_free_r>
 80086be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086c0:	b111      	cbz	r1, 80086c8 <_reclaim_reent+0x80>
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f852 	bl	800876c <_free_r>
 80086c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80086ca:	b111      	cbz	r1, 80086d2 <_reclaim_reent+0x8a>
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 f84d 	bl	800876c <_free_r>
 80086d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80086d4:	b111      	cbz	r1, 80086dc <_reclaim_reent+0x94>
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 f848 	bl	800876c <_free_r>
 80086dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086de:	b111      	cbz	r1, 80086e6 <_reclaim_reent+0x9e>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f843 	bl	800876c <_free_r>
 80086e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086e8:	b111      	cbz	r1, 80086f0 <_reclaim_reent+0xa8>
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f83e 	bl	800876c <_free_r>
 80086f0:	6a23      	ldr	r3, [r4, #32]
 80086f2:	b11b      	cbz	r3, 80086fc <_reclaim_reent+0xb4>
 80086f4:	4620      	mov	r0, r4
 80086f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086fa:	4718      	bx	r3
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	bf00      	nop
 8008700:	20000018 	.word	0x20000018

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	@ (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	@ (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	@ (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	@ (8008748 <__libc_init_array+0x44>)
 8008718:	f000 f87e 	bl	8008818 <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	080090f8 	.word	0x080090f8
 8008740:	080090f8 	.word	0x080090f8
 8008744:	080090f8 	.word	0x080090f8
 8008748:	080090fc 	.word	0x080090fc

0800874c <__retarget_lock_acquire_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_release_recursive>:
 800874e:	4770      	bx	lr

08008750 <memcpy>:
 8008750:	440a      	add	r2, r1
 8008752:	4291      	cmp	r1, r2
 8008754:	f100 33ff 	add.w	r3, r0, #4294967295
 8008758:	d100      	bne.n	800875c <memcpy+0xc>
 800875a:	4770      	bx	lr
 800875c:	b510      	push	{r4, lr}
 800875e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008766:	4291      	cmp	r1, r2
 8008768:	d1f9      	bne.n	800875e <memcpy+0xe>
 800876a:	bd10      	pop	{r4, pc}

0800876c <_free_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4605      	mov	r5, r0
 8008770:	2900      	cmp	r1, #0
 8008772:	d041      	beq.n	80087f8 <_free_r+0x8c>
 8008774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008778:	1f0c      	subs	r4, r1, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfb8      	it	lt
 800877e:	18e4      	addlt	r4, r4, r3
 8008780:	f000 f83e 	bl	8008800 <__malloc_lock>
 8008784:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <_free_r+0x90>)
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	b933      	cbnz	r3, 8008798 <_free_r+0x2c>
 800878a:	6063      	str	r3, [r4, #4]
 800878c:	6014      	str	r4, [r2, #0]
 800878e:	4628      	mov	r0, r5
 8008790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008794:	f000 b83a 	b.w	800880c <__malloc_unlock>
 8008798:	42a3      	cmp	r3, r4
 800879a:	d908      	bls.n	80087ae <_free_r+0x42>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	1821      	adds	r1, r4, r0
 80087a0:	428b      	cmp	r3, r1
 80087a2:	bf01      	itttt	eq
 80087a4:	6819      	ldreq	r1, [r3, #0]
 80087a6:	685b      	ldreq	r3, [r3, #4]
 80087a8:	1809      	addeq	r1, r1, r0
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	e7ed      	b.n	800878a <_free_r+0x1e>
 80087ae:	461a      	mov	r2, r3
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	b10b      	cbz	r3, 80087b8 <_free_r+0x4c>
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d9fa      	bls.n	80087ae <_free_r+0x42>
 80087b8:	6811      	ldr	r1, [r2, #0]
 80087ba:	1850      	adds	r0, r2, r1
 80087bc:	42a0      	cmp	r0, r4
 80087be:	d10b      	bne.n	80087d8 <_free_r+0x6c>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	4401      	add	r1, r0
 80087c4:	1850      	adds	r0, r2, r1
 80087c6:	4283      	cmp	r3, r0
 80087c8:	6011      	str	r1, [r2, #0]
 80087ca:	d1e0      	bne.n	800878e <_free_r+0x22>
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	6053      	str	r3, [r2, #4]
 80087d2:	4408      	add	r0, r1
 80087d4:	6010      	str	r0, [r2, #0]
 80087d6:	e7da      	b.n	800878e <_free_r+0x22>
 80087d8:	d902      	bls.n	80087e0 <_free_r+0x74>
 80087da:	230c      	movs	r3, #12
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	e7d6      	b.n	800878e <_free_r+0x22>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428b      	cmp	r3, r1
 80087e6:	bf04      	itt	eq
 80087e8:	6819      	ldreq	r1, [r3, #0]
 80087ea:	685b      	ldreq	r3, [r3, #4]
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	bf04      	itt	eq
 80087f0:	1809      	addeq	r1, r1, r0
 80087f2:	6021      	streq	r1, [r4, #0]
 80087f4:	6054      	str	r4, [r2, #4]
 80087f6:	e7ca      	b.n	800878e <_free_r+0x22>
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
 80087fa:	bf00      	nop
 80087fc:	20009178 	.word	0x20009178

08008800 <__malloc_lock>:
 8008800:	4801      	ldr	r0, [pc, #4]	@ (8008808 <__malloc_lock+0x8>)
 8008802:	f7ff bfa3 	b.w	800874c <__retarget_lock_acquire_recursive>
 8008806:	bf00      	nop
 8008808:	20009174 	.word	0x20009174

0800880c <__malloc_unlock>:
 800880c:	4801      	ldr	r0, [pc, #4]	@ (8008814 <__malloc_unlock+0x8>)
 800880e:	f7ff bf9e 	b.w	800874e <__retarget_lock_release_recursive>
 8008812:	bf00      	nop
 8008814:	20009174 	.word	0x20009174

08008818 <_init>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr

08008824 <_fini>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr
